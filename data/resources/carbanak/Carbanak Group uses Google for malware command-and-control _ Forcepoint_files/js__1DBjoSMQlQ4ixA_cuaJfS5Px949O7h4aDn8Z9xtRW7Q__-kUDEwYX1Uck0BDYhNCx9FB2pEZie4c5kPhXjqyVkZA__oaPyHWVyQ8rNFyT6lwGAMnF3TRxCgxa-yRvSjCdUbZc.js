/**
 * @file
 * Handles Hubspot forms on Forcepoint.com.
 */

/* globals hbspt:readonly */

(($, Drupal) => {
  'use strict';


  Drupal.behaviors.handleHubspotForm = {
    attach: (context, settings) => {
      const
        // Functions.
        countryPicker = (aObject, aCountry) => {
          const countryListValue = aObject.find('option:contains(' + aCountry + ')').val();
          aObject.val(countryListValue).change();
        },
        selectUserCountry = (aObject) => {

          // Usage is set for `geolocation-db` by default,
          // but this website also supports the Abstract API.
          // In order to use Abstract, set $apiProvider = 'abstract'.
          const requestUrl = 'https://geolocation-db.com/json/',
            countryPropertyName = 'country_name',

            // Tries to get the user country from local storage.
            userCountry = localStorage.getItem('userCountry');

          // If it is not available, request the information from a cloud
          // service.
          if (userCountry === null) {
            $.when().done(function () {
              $.getJSON(requestUrl, (aData) => {
                if (Object.prototype.hasOwnProperty.call(aData, countryPropertyName)) {
                  let outputCountryUnprocessed = aData[countryPropertyName],
                    outputCountry = outputCountryUnprocessed.split(',')[0];

                  localStorage.setItem('userCountry', outputCountry);
                  countryPicker(aObject, outputCountry);
                }
              });
            });
          }

          // If data is already stored.
          else {
            countryPicker(aObject, userCountry);
          }
        },
        onHubspotFormSubmit = (aForm, aFormInstance) => {

          // If this is a resource redirect...
          if (Object.prototype.hasOwnProperty.call(aFormInstance, 'groupResource')) {

            const resourceFid = parseInt(aFormInstance.groupResource.resourceFid);

            // If this is a gate form, initialize the download.
            if (!Number.isNaN(resourceFid)) {
              const download = document.createElement('iframe');
              download.style.display = 'none';
              download.src = '/marketo_forms/download/' + resourceFid;
              document.body.appendChild(download);
            }
          }
        },
        onHubspotFormReady = (aForm, aTarget, aFormInstance) => {

          const
            // Gets basic form instance data.
            conversionType = aFormInstance.groupBasic.conversionType,
            campaign = aFormInstance.groupBasic.campaign,
            campaignName = aFormInstance.groupBasic.campaignName,
            formWrapper = $(aTarget),

            // Gets resource instance data.
            areasOfInterestFromForm = aFormInstance.groupBasic.areasOfInterest,

            // Gets nodes for form data change.
            countryNode = aForm.find('select[name="country__c"]'),
            conversionTypeNode = aForm.find('input[name="conversion_type"]'),
            areasOfInterestNode = aForm.find('input[name="area_of_interest__c"]'),
            campaignNode = aForm.find('input[name="sfcmpid"]'),
            campaignNameNode = aForm.find('input[name="salesforce_campaign_name"]'),
            gclidNode = aForm.find('input[name="gclid"]'),
            campaignIdNode = aForm.find('input[name="sf_source_campaign_id"]');

          // Removes the throbber icon.
          if (formWrapper !== null && formWrapper.length > 0) {
            formWrapper.addClass('loaded');
          }

          // Sets a default value for the country selector.
          if (countryNode.length > 0) {
            selectUserCountry(countryNode);

            // Hide Country field
            if (countryNode.val() != null) {
              aForm.find('.hs_country__c').hide();
            }
          }

          // Sets the value of conversion_type.
          if (conversionTypeNode.length > 0 && conversionType !== null) {
            conversionTypeNode.val(conversionType);
          }

          // Sets the campaign Id.
          if (campaignNode.length > 0 && campaign !== false) {
            campaignNode.val(campaign);
          }

          // Sets the campaign name.
          if (campaignNameNode.length > 0 && campaign !== false) {
            campaignNameNode.val(campaignName);
          }

          // Sets gclid from data stored in a cookie.
          if (gclidNode.length > 0) {
            const gclidRaw = new RegExp('(?:^|;\\s*)gclid=([^;]*)').exec(document.cookie);
            if (gclidRaw !== null && gclidRaw.length > 0 && typeof gclidRaw[1] !== 'undefined') {
              $('input[name="gclid"]').val(gclidRaw[1]);
            }
          }

          function getCookie(cookieName) {
            const cookies = document.cookie.includes(cookieName)
              ? `; ${document.cookie}`.split(`; ${cookieName}=`)
              : null;
            return cookies ? cookies.pop().split(';').shift() : null;
          }

          // Sets campaign id from data stored in a cookie
          const sfcmpid = getCookie('sf_src_cmpid');
          if (campaignIdNode.length > 0 && sfcmpid) {
            campaignIdNode.val(sfcmpid);
          }

          // Get area of interest from cookie or custom form
          const isCustomForm = window.location.search;
          function decodeAoiCookie(cookie) {
            let decodedCookie = '',
              char, codeStr, firstCharCode, lastCharCode;
            cookie = cookie.match(/.{1,4}/g)
              .reduce((acc, currentString) => acc + String.fromCharCode(parseInt(currentString, 16)), '');
            for (let i = 0; i < cookie.length; i++) {
              char = cookie.charCodeAt(i);
              if (char > 132) {
                codeStr = char.toString(10);
                firstCharCode = parseInt(codeStr.substring(0, codeStr.length - 2), 10);
                lastCharCode = parseInt(codeStr.substring(codeStr.length - 2, codeStr.length), 10) + 31;
                decodedCookie += String.fromCharCode(firstCharCode) + String.fromCharCode(lastCharCode);
              }
              else {
                decodedCookie += cookie.charAt(i);
              }
            }
            return decodeURI(decodedCookie);
          }
          let aoi;
          if (getCookie('aoi') && !isCustomForm) {
            aoi = decodeAoiCookie(getCookie('aoi'));
          }
          else {
            aoi = typeof areasOfInterestFromForm === 'string'
              ? areasOfInterestFromForm
              : areasOfInterestFromForm.join(';');
          }

          // Temporary patch to handle old AOI values while Sales force is not updated
          const mapAoi = {
            'SASE / SSE': [
              'Data-first SASE,', 'SASE', 'SD-WAN',
              'SSE', 'Web Security', 'Cloud Security',
              'Private App Security', 'SWG', 'CASB',
              'ZTNA', 'RBI', 'Insider Risk'
            ],
            'Data Loss Protection': [
              'Data Security', 'DLP', 'Risk Adaptive',
              'Classification', 'Visibility', 'Email Security'
            ],
            'Network Security and Firewall': ['NGFW', 'Threat Protection'],
            'Cross Domain': ['Critical Infrastructure', 'Cross Domain'],
            'All / Brand': ['Partner'],
            'Content Disarm and Reconstruction (CDR)': ['CDR']
          };
          Object.keys(mapAoi).forEach(item => {
            if (mapAoi[item].some((newAoi) => newAoi === aoi)) {
              aoi = item;
            }
          });
          if (aoi === '') {
            aoi = 'All / Brand';
          }

          areasOfInterestNode.val(aoi);

          // Hide first and last name inputs.
          let
            form = $(aForm),
            inputFirstName = form.find('input[name="firstname"]'),
            inputLastName = form.find('input[name="lastname"]'),
            inputNamePlaceholder = Drupal.t('First & Last Name', {}, { context: 'marketo' });


          // <-- VWO A/B Test: Demo of Forcepoint Solution as Question
          const message = $('.hs-form .hs-demo_requested .inputs-list label span').text(),
            optionYes = Drupal.t('Yes', {}, {context: 'marketo'}),
            optionNo = Drupal.t('No', {}, {context: 'marketo'});
          $('.hs-form .hs-demo_requested .inputs-list').append(`
            <li><label style="margin:10px 0;display:inline-block">${message}</label>
            <label style="display:flex">
            <input style="appearance:auto;flex:0;margin:0 10px" type="radio" name="demo_request" value="Yes">${optionYes}</label>
            <label style="display:flex"><input style="appearance:auto;flex:0;margin:0 10px" type="radio" name="demo_request" value="No">${optionNo}</label>
            </li>`);
          $('.hs-form .hs-demo_requested .hs-form-booleancheckbox').hide();
          $('input[type="radio"][name="demo_request"]').change(function () {
            if (this.value == 'Yes') {
              $('input[type="checkbox"][name="demo_requested"]').prop('checked', true);
            } else {
              $('input[type="checkbox"][name="demo_requested"]').prop('checked', false);
            }
          });
          // VWO A/B Test -->

          // Converts checkboxes into a MultipleSelect for Hubspot Forms configure at:
          // admin/config/marketo_forms/checkbox-to-multiselect
          const checkBoxes2MultipleSelect = $('.hs-form .hs-fieldtype-checkbox .multi-container');
          if (aFormInstance.groupBasic.checkboxToMultiSelect.includes(aFormInstance.groupBasic.hubspotFormId)) {
            checkBoxes2MultipleSelect.each(function (index) {
              const currentElement = $(this),
                // Create our select element.
                selectElement = $('<select multiple class="chosen-choices">').appendTo(currentElement.parent('.input'));

              // Fixes issue with select option hidden for certain forms.
              currentElement.parents('.hs-fieldtype-checkbox').css({"display": "initial", "visibility": "initial"});

              // Hide current element.
              currentElement.hide();

              // Create our options and append to our select.
              currentElement.find('label').each(function (index) {
                const optionElement = document.createElement("option");
                optionElement.id = $(this).find('input')[0].id;
                optionElement.name = $(this).find('span').text();
                optionElement.value = $(this).find('span').text();
                optionElement.innerText = $(this).find('span').text();
                selectElement.append(optionElement);
              });

              // Assign attributes to our select element.
              selectElement.attr('id', currentElement.find('label').find('input')[0].name);
              selectElement.attr('name', currentElement.find('label').find('input')[0].name);

              // Convert into chosen.
              selectElement.chosen();
            });
          }

          if (
            typeof inputFirstName === 'object' && inputFirstName.length === 1
            && typeof inputLastName === 'object' && inputLastName.length === 1
          ) {
            $('.hs-firstname').before(`
                <div class="hs_name hs-name hs-fieldtype-text field hs-form-field smart-field">
                    <div class="input">
                        <input name="name" type="text" class="hs-input" placeholder="${inputNamePlaceholder}" required>
                    </div>
                </div>
            `);
            form.prepend(inputLastName);
            form.prepend(inputFirstName);
            inputFirstName.prop('type', 'hidden');
            inputLastName.prop('type', 'hidden');
            $('.hs_firstname.hs-firstname.hs-fieldtype-text.field.hs-form-field').remove();
            $('.hs_lastname.hs-lastname.hs-fieldtype-text.field.hs-form-field').remove();

            let
              name = form.find('input[name="name"]'),
              nameWrapper = $('.hs_name.hs-name.hs-fieldtype-text.field.hs-form-field.smart-field'),
              setErrorMessage = (errMsg) => {
                name.addClass('invalid').addClass('error');
                nameWrapper.append(`
                    <ul class="no-list hs-error-msgs inputs-list" role="alert">
                        <li>
                            <label class="hs-error-msg">
                              ${errMsg}
                            </label>
                        </li>
                    </ul>
                  `);
              },
              clearErrorMessage = () => {
                let errorMessageWrapper = nameWrapper.find('.no-list.hs-error-msgs.inputs-list');
                if (errorMessageWrapper.length) {
                  errorMessageWrapper.remove();
                  name.removeClass('invalid').removeClass('error');
                }
              },
              validateName = () => {
                // Helper variables.
                let aName = name.val().trim(),
                  tmpName = '',
                  doCheck = false;
                // Process name.
                do {
                  tmpName = aName.replace('  ', ' ');
                  if (tmpName.length !== aName.length) {
                    aName = tmpName;
                    doCheck = true;
                  }
                  else {
                    doCheck = false;
                  }
                } while (doCheck);
                let firstName, lastName, nameParts;
                nameParts = aName.split(' ');
                if (name.val().trim().length === 0) {
                  let errorMessage = Drupal.t('Please complete this required field.', {}, { context: 'marketo' });
                  setErrorMessage(errorMessage);
                }
                else if (nameParts.length < 2) {
                  let errorMessage = Drupal.t('Please fill in your first and last name.', {}, { context: 'marketo' });
                  setErrorMessage(errorMessage);
                }
                else {
                  firstName = nameParts.reverse().pop();
                  lastName = nameParts.reverse().join(' ');
                  inputFirstName.val(firstName).trigger('change');
                  inputLastName.val(lastName).trigger('change');
                  clearErrorMessage();
                }
              };
            name.change(validateName);
            name.keyup(validateName);
            name.focusout(validateName);
            name.focus(clearErrorMessage);
          }
        },
        // Global HubSpot data.
        formInstances = Drupal.settings.featureWsMarketoForm,
        portalId = Drupal.settings.featureWsMarketoGlobal.portalId,
        locale = Drupal.settings.featureWsMarketoGlobal.locale,
        // Variables for content override.
        overrideTitle = (Object.prototype.hasOwnProperty.call(Drupal.settings, 'featureWsMarketoFormOverride')) ? Drupal.settings.featureWsMarketoFormOverride.overrideTitle : false,
        overrideDescription = (Object.prototype.hasOwnProperty.call(Drupal.settings, 'featureWsMarketoFormOverride')) ? Drupal.settings.featureWsMarketoFormOverride.overrideDescription : false,
        createForm = (aHubspotFormId, aRedirectUrl, aTarget, aFormInstance) => {
          hbspt.forms.create({
            region: 'na1',
            portalId: portalId,
            formId: aHubspotFormId,
            redirectUrl: aRedirectUrl,
            locale: locale,
            target: aTarget,
            onFormReady: (aForm) => {
              onHubspotFormReady(aForm, aTarget, aFormInstance);
            },
            onFormSubmit: (aForm) => {
              onHubspotFormSubmit(aForm, aFormInstance);
            }
          });
        };

      // Overrides page content.
      if (overrideTitle !== false) {
        $('.node-type-page h1').text(overrideTitle);
      }

      if (overrideDescription !== false) {
        $('.field-main-content .field-pg-wysiwyg-body').html(overrideDescription);
      }

      // Goes over each of the Hubspot forms set on a given page.
      for (const formId in formInstances) {
        if (Object.prototype.hasOwnProperty.call(formInstances, formId)) {
          const
            formInstance = formInstances[formId],
            hubspotFormId = formInstance.groupBasic.hubspotFormId,
            target = '#' + formInstance.groupBasic.target,
            formIds = [
              '71a042c2-601f-42ae-856e-7c4c2af57530',
              'c8b0f1ae-9283-443d-a3c8-45d16d92730a',
              '40929cc4-c63e-4c8b-bee7-bef3747e0d83'
            ];
          let redirectUrl = formInstance.groupBasic.redirectUrl;

          // FAST Lane Implementation from Drift
          if (formIds.includes(hubspotFormId)) {
            // Create form without redirect URL.
            // Redirect should be handled through the Drift object.
            // Handled manually when the Drift object does not load.
            createForm(hubspotFormId, '', target, formInstance);
            window.addEventListener('message', (event) => {
              let _formData;
              window.addEventListener('message', function (event) {
                if (!event.data || event.data.type !== 'hsFormCallback') {
                  return;
                }
                let formEvent = event.data;
                if (formEvent.eventName === 'onFormSubmit' && !!formEvent.data && formEvent.data.length > 0) {
                  _formData = {};
                  for (let i = 0, len = formEvent.data.length; i < len; i++) {
                    let item = formEvent.data[i];
                    if (!!item.name && !!item.value && item.value !== '') {
                      _formData[item.name] = item.value;
                    }
                  }
                }
                else if (formEvent.eventName === 'onFormSubmitted' && !!_formData && Object.keys(_formData).length > 0) {
                  // This condition is for when users do not accept cookies on
                  // the site. Drift does not load in this case.
                  if (typeof drift !== 'undefined') {
                    drift.api.collectFormData(_formData, {
                      campaignId: 2589222,
                      followupUrl: redirectUrl
                    });
                  }
                  else {
                    window.location.href = redirectUrl;
                  }
                }
              });
            });
          }
          else {
            // Create form with redirect URL.
            createForm(hubspotFormId, redirectUrl, target, formInstance);
          }
        }
      }
    }
  };

})(jQuery, Drupal);

;/*})'"*/
;/*})'"*/
