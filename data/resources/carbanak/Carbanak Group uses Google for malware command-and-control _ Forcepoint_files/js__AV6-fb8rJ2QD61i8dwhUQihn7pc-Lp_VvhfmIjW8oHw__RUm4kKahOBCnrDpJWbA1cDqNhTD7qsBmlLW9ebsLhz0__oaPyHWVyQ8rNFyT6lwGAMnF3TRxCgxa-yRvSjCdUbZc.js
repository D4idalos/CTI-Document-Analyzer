/**
 * @file
 * Handles updates to Hubspot Form in Resources content type.
 * Resources Download Page: Form in Two Steps.
 */

(($, Drupal) => {
  'use strict';

  Drupal.behaviors.handleResourceHubspotForm = {
    attach: (context, settings) => {

      // Email validation.
      const validateEmail = (email) => {
        const emailRegex = new RegExp(/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/, 'gm'),
          companyMatch = new RegExp(/^[a-zA-Z0-9._%+-]+@(?!gmail.com)(?!yahoo.com)(?!yahoo.co.in)(?!aol.com)(?!hotmail.com)(?!live.com)(?!outlook.com)(?!mail.com)(?!test.com)(?!example.com)(?!example.net)[a-zA-Z0-9_-]+.[a-zA-Z0-9-.]{2,61}$/);

        return emailRegex.test(email) && companyMatch.test(email);
      };

      // Helpers for input validation.
      let setErrorMessage = (input, message) => {
          let errorMessage = Drupal.t('Please complete this required field.', {}, {context: 'marketo'});
          if (message) {
            errorMessage = Drupal.t(`${message}`, {}, {context: 'marketo'});
          }
          input.addClass('invalid').addClass('error');

          let element = input.parent();
          if (input.children().hasClass('hs-email-fake')) {
            element = input.parent().parent();
          }

          element.append(`
            <ul class="no-list hs-error-msgs inputs-list">
              <li><label class="hs-error-msg">${errorMessage}</label></li>
            </ul>
          `);
        },
        clearErrorMessage = (input) => {
          let errorMessage = input.parent().find('.no-list.hs-error-msgs.inputs-list');
          if (input.children().hasClass('hs-email-fake')) {
            errorMessage = input.parent().parent().find('.no-list.hs-error-msgs.inputs-list');
          }

          if (errorMessage.length) {
            errorMessage.remove();
            input.removeClass('invalid').removeClass('error');
          }
        };

      $(document).ready(() => {
        const currentURL = document.location.pathname,
          resourcesURLS = [
            '/resources/ebooks/',
            '/resources/industry-analyst-reports/',
            '/resources/industry-analyst-report/',
            '/resources/reports/',
            '/resources/webcasts/',
            '/resources/whitepapers/'
          ];
        let resourcePath = false,
          resourceType = '';

        resourcesURLS.forEach((item) => {
          if (currentURL.indexOf(item) > -1) {
            resourceType = item.split('/')[2];
            resourcePath = true;
          }
        });

        // Create elements for Resources download pages.
        if (resourcePath) {
          let placeHolderTitleText = Drupal.t('Get Your Copy', {}, {context: 'marketo'}),
            emailFormButton = $(`<input type="button" value="${placeHolderTitleText}" class="hs-button--submit" id="hs-button--submit">`);

          const placeHolderWorkEmail = Drupal.t('Work Email', {}, {context: 'marketo'}),
            emailInputField = $(`<input name="email" placeholder="${placeHolderWorkEmail}" type="email" class="hs-input hs-email hs-email-fake" inputmode="email" autocomplete="email" value="">`),
            emailInputFieldWrapper = $('.hs-email-intro-form .form--wrapper .input'),
            popUpTitleBar = $(`<div class="hsForm-popup-title-bar">
                <span class="title">${placeHolderTitleText}</span>
                <span class="close-btn"></span>
              </div>`),
            hsFormFieldWrapper = $('.pane-node-field-resource-gate .field-resource-gate');

          hsFormFieldWrapper.prepend(popUpTitleBar);

          const hsFormTitleBar = $('.pane-node-field-resource-gate .field-resource-gate .title'),
            hsFormCloseButton = $('.pane-node-field-resource-gate .field-resource-gate .close-btn');

          // Handle form elements and events.
          if (resourceType == 'webcasts') {
            placeHolderTitleText = Drupal.t('Watch the Video', {type: 'webcasts'}, {context: 'marketo'});
            emailFormButton.val(placeHolderTitleText);
          }
          hsFormTitleBar.text(placeHolderTitleText);
          hsFormCloseButton.on('click', (event) => {
            event.preventDefault();
            $('body').toggleClass('hs-popup-toggle');
            $('.pane-node-field-resource-gate').toggleClass('popup-toggle');
          });
          $('body').on('click', (event) => {
            if ($('body').hasClass('hs-popup-toggle')) {
              if (event.target.classList.contains('popup-toggle')) {
                $('body').toggleClass('hs-popup-toggle');
                $('.pane-node-field-resource-gate').toggleClass('popup-toggle');
              }
            }
          });

          // Create email field elements on the page.
          emailInputFieldWrapper.prepend(emailInputField);
          emailFormButton.insertAfter(emailInputFieldWrapper);

          // Target changes to the fake input field, update the hs field.
          emailInputField.on('change', (e) => {
            const hsEmailField = $('.hs_email .input input');
            hsEmailField.val(emailInputField.val());
            hsEmailField.change();
          }).on('keyup', (event) => {
            if (event.key === 'Enter') {
              event.preventDefault();
              emailFormButton.click();
            }
          });

          emailFormButton.on('click', (event) => {
            event.preventDefault();
            if (emailInputField.val() !== '' && validateEmail(emailInputField.val())) {
              $('body').toggleClass('hs-popup-toggle');
              $('.pane-node-field-resource-gate').toggleClass('popup-toggle');
              emailInputFieldWrapper.removeClass('show-error');
              clearErrorMessage(emailInputFieldWrapper);
            }
            else {
              emailInputFieldWrapper.addClass('show-error');
              const message = 'Please enter a valid business email address.';
              setErrorMessage(emailInputFieldWrapper, message);
            }
          });

          // Add icons for the resource.
          if (resourceType) {
            // Replace the icon with one set by the user.
            const customIcon = $('.pane-node-field-customer-logo img'),
              iconDiv = $('.top__right .icon');

            if (customIcon.length) {
              iconDiv.addClass('icon__custom');
              iconDiv.prepend(customIcon);
            }
            else {
              iconDiv.addClass('icon__' + resourceType);
            }
          }
        }
      });
    }
  };
})(jQuery, Drupal);

;/*})'"*/
;/*})'"*/
