//
// DO NOT MODIFY THIS FILE DIRECTLY
// If you do, your changes will be overwritten and lost. Instead, make your changes to
// the appropriate files in the js folder, then run Grunt to generate this file.
// Instructions for running Grunt are in the readme file at the project root.
//


if( typeof TrendMicro === 'undefined' ) { TrendMicro = {}; }

TrendMicro.UnderAttackLink = function()
{
	this.underAttackLinkSelector = '.under-attack-link';
	this.alertsSelector = ".alerts";
	this.utilityMenuSelector = ".utilityMenu.utilityMenuV1";
}

TrendMicro.UnderAttackLink.prototype.init = function()
{
	this.alerts = document.querySelector(this.alertsSelector);
	this.utilityMenu = document.querySelector(this.utilityMenuSelector);
	this.underAttackLink = document.querySelector(this.underAttackLinkSelector);

	this.placeUnderAttackLink();
}

TrendMicro.UnderAttackLink.prototype.placeUnderAttackLink = function()
{
	if( this.underAttackLink == null || this.alerts == null || this.utilityMenu == null ) { return; }

	this.underAttackLink.style.right = this.alerts.offsetWidth + this.utilityMenu.offsetWidth + 28 + "px";		//+28px for 24px wide search icon and its 4px margin-left
};


const underAttackLink = new TrendMicro.UnderAttackLink();
$(document).ready( function() { underAttackLink.init(); } );

TrendMicro.UtilityMenu = function( wrapperElement, multipleLevel1Links = true )
{
	if( wrapperElement == null ) { return; }

	this.utilityMenuWrapperElement = wrapperElement;

	this.level1Links = this.utilityMenuWrapperElement.querySelectorAll(".dropDownMenuV1 > .label");
	this.utilityWrapper1 = this.utilityMenuWrapperElement.querySelector(".utility-wrapper:nth-child(1)");
	this.utilityWrapper2 = this.utilityMenuWrapperElement.querySelector(".utility-wrapper:nth-child(2)");
	this.subUtilityWrapper = this.utilityWrapper2.querySelector(".sub-utility-wrapper");
	this.backOneLevelButtons = this.utilityMenuWrapperElement.querySelectorAll(".back-one-level-utility");

	this.isVisibleClass = "is-visible";
	this.isActiveClass = "is-active";

	this.depth = 0;
	this.mobileMaxWidth = "(max-width: 1199px)";
	this.desktopMinWidth = "(min-width: 1200px)";

	if( multipleLevel1Links ) { this.setupMultipleEntriesClickHandlers(); }
	else { this.setupStaticClickHandlers(); }

	this.dropDownMenuWindows = [this.utilityWrapper2];
	$(window).on('click', {scope: this}, this.outsideMenuClickHandler );
	$(window).on('scroll', {scope: this}, this.outsideMenuScrollHandler );
};

TrendMicro.UtilityMenu.prototype.isMobile = function()
{
	return window.matchMedia( this.mobileMaxWidth ).matches;
};

TrendMicro.UtilityMenu.prototype.isDesktop = function()
{
	return window.matchMedia( this.desktopMinWidth ).matches;
};

//TODO: Explain why alert menus need static click handlers, but the utility menu has to use multiple entry clickhandlers

TrendMicro.UtilityMenu.prototype.setupMultipleEntriesClickHandlers = function()
{
	for( let level1Link of this.level1Links ) {
		$(level1Link).on( "click", { scope: this, cloneSubMenuHTML: true }, this.level1LinksClickHandler );
	}

	for( let backOneLevelBtn of this.backOneLevelButtons ) {
		$(backOneLevelBtn).on( "click", {scope:this}, this.backOneLevelBtnClickHandler );
	}
}

TrendMicro.UtilityMenu.prototype.setupStaticClickHandlers = function()
{
	// We need event handlers, so no cloning
	$(this.level1Links[0]).on( "click", { scope: this, cloneSubMenuHTML: false }, this.level1LinksClickHandler );
	$(this.backOneLevelButtons[0]).on( "click", {scope:this }, this.backOneLevelBtnClickHandler );
}

TrendMicro.UtilityMenu.prototype.placeMenu = function( offset )
{
	this.utilityWrapper2.style.top = offset + 'px';
}

TrendMicro.UtilityMenu.prototype.moveLevelZeroIntoFocus = function()
{
	this.utilityWrapper1.style.position = "unset";
	this.utilityWrapper1.style.display = "block";

	this.utilityWrapper2.style.position = "absolute";
	this.utilityWrapper2.style.display = "none";
};

TrendMicro.UtilityMenu.prototype.moveLevelOneIntoFocus = function()
{
	if( this.isMobile() ) {
		this.utilityWrapper1.style.position = "absolute";
		this.utilityWrapper1.style.display = "none";

		this.utilityWrapper2.style.position = "unset";
		this.utilityWrapper2.style.display = "block";
	}

	if( this.isDesktop() ) {
		this.utilityWrapper1.style.position = "unset";
		this.utilityWrapper1.style.display = "flex";

		this.utilityWrapper2.style.position = "absolute";
		this.utilityWrapper2.style.display = "block";
		this.utilityWrapper2.style.top = "39px";
		// this.utilityWrapper2.style.right = "0";
	}
};

TrendMicro.UtilityMenu.prototype.closeMenu = function()
{
	for( let element of this.dropDownMenuWindows )
	{
		element.style.display = "none";
		element.classList.remove( this.isVisibleClass );
	}

	for( let element of this.level1Links )
	{
		element.classList.remove( this.isActiveClass );
	}
}

TrendMicro.UtilityMenu.prototype.swapUtilityMenuView = function()
{
	switch (this.depth) {
		case 0:
			// setTimeout(() => {this.moveLevelZeroIntoFocus()}, 750);
			this.moveLevelZeroIntoFocus();
			break;

		case 1:
			// setTimeout(() => {this.moveLevelOneIntoFocus()}, 750);
			this.moveLevelOneIntoFocus();
			break;
	}
};

TrendMicro.UtilityMenu.prototype.level1LinksClickHandler = function( event )
{
	const self = event.data.scope;
	const cloneSubMenuHTML = event.data.cloneSubMenuHTML;

	const siblingList = this.nextElementSibling;
	if (siblingList) {
		event.preventDefault();

		for (let item of self.level1Links) {
			item.classList.remove( self.isActiveClass );
		}
		this.classList.add( self.isActiveClass );

		if( cloneSubMenuHTML ) {	// Alerts menu only has one entry, and it needs event handlers, so don't clone it
			const cloneSiblingList = siblingList.cloneNode(true);
			self.subUtilityWrapper.innerHTML = "";
			self.subUtilityWrapper.append(cloneSiblingList);

			if ( self.isDesktop() ) {
				const offset = self.utilityMenuWrapperElement.getBoundingClientRect().right - this.getBoundingClientRect().right;
				self.utilityWrapper2.style.right = offset + "px";
				// self.utilityWrapper2.style.width = "300px";
			}
		} else {		//this is for alerts
			if ( self.isDesktop() ) {
				self.utilityWrapper2.style.right = 0;
				// self.utilityWrapper2.style.width = "300px";
			}
		}

		self.utilityWrapper2.classList.add(self.isVisibleClass);
	}
	self.depth = 1;
	self.swapUtilityMenuView();
};

TrendMicro.UtilityMenu.prototype.backOneLevelBtnClickHandler = function( event )
{
	var self = event.data.scope;
	event.stopPropagation();
	const parent = this.closest(".utility-wrapper");
	parent.classList.remove(self.isVisibleClass);
	parent.previousElementSibling
		.querySelector(".is-active")
		.classList.remove(self.isActiveClass);

	if (self.depth >= 1 ) {
		self.depth--;
	}
	self.swapUtilityMenuView();
};

TrendMicro.UtilityMenu.prototype.outsideMenuClickHandler = function( event )
{
	const self = event.data.scope;

	if( !self.utilityMenuWrapperElement.contains(event.target) && self.isDesktop() ) {
		self.closeMenu();
	}
};

TrendMicro.UtilityMenu.prototype.outsideMenuScrollHandler = function( event )
{
	const self = event.data.scope;

	if( !self.utilityMenuWrapperElement.contains(event.target) && self.isDesktop() ) {
		self.closeMenu();
	}
};

TrendMicro.UtilityMenuHandler = function()
{
	this.headerAssembly = document.querySelector( ".headerAssemblyV1" );
	if( null == this.headerAssembly ) { return; }

	this.menus = [];
};

TrendMicro.UtilityMenuHandler.prototype.init = function()
{
	if( null == this.headerAssembly ) { return; }
	this.setupMenus();
};

TrendMicro.UtilityMenuHandler.prototype.setupMenus = function()
{
	let utilityMenu = this.headerAssembly.querySelector( ".utilityMenu" );
	if( utilityMenu != null ) { this.menus.push( new TrendMicro.UtilityMenu( utilityMenu ) ); }

	let alertsUtilityMenu = this.headerAssembly.querySelector( ".alertUtilityMenu" );
	if( alertsUtilityMenu != null ) { this.menus.push( new TrendMicro.UtilityMenu( alertsUtilityMenu, false ) ); }


	let alertsMenu = document.querySelector(".alerts");
	alertsMenu.style.right = "calc(" + utilityMenu.offsetWidth + "px + 28px)";		//+28px for 24px wide search icon and its 4px margin-left

};

TrendMicro.UtilityMenuHandler.prototype.placeMenus = function( offset )
{
	for( let menu of this.menus )
	{
		menu.placeMenu( offset )
	}
};

const utilityMenuHandler = new TrendMicro.UtilityMenuHandler();
$( document ).ready( function() {
	utilityMenuHandler.init();
});


TrendMicro.MainNavMenu = function()
{
	this.headerAssembly = document.querySelector( ".headerAssemblyV1" );
	// We can't count on the class name for the business header, so user headerAssembly's parentNode
	this.businessHeader = this.headerAssembly.parentNode;

	if( null == this.headerAssembly ) { return; }

	this.pageHeader = document.querySelector(".page-header");

	this.body = document.querySelector("body");
	this.searchInput = document.querySelector(".search");
	this.searchIcon = document.querySelector(".search-icon");
	this.searchBackArrow = document.querySelector(".search-back-arrow");
	this.searchInputField = document.querySelector(".gsc-input-field");
	this.clearSearch = document.querySelector(".search-clear-button");
	this.closeDesktopSearch = document.querySelector(".close-search-icon");

	this.hamburgerWrapper = document.querySelector(".hamburger-wrapper");
	this.toggleMenu = this.pageHeader.querySelector(".hamburger-menu");
	this.menuWrapper = this.pageHeader.querySelector(".mainNavMenu");
	this.level1Links = this.pageHeader.querySelectorAll(".nav-level-0 > li > div");
	this.initalListWrapper = this.pageHeader.querySelector(".inital-list-wrapper");
	this.listWrapper2 = this.pageHeader.querySelector(".list-wrapper:nth-child(2)");
	this.listWrapper3 = this.pageHeader.querySelector(".list-wrapper:nth-child(3)");
	this.listWrapper4 = this.pageHeader.querySelector(".list-wrapper:nth-child(4)");
	this.listWrapper5 = this.pageHeader.querySelector(".list-wrapper:nth-child(5)");
	this.subMenuWrapper2 = this.listWrapper2.querySelector(".sub-menu-wrapper");
	this.subMenuWrapper3 = this.listWrapper3.querySelector(".sub-menu-wrapper");
	this.subMenuWrapper4 = this.listWrapper4.querySelector(".sub-menu-wrapper");
	this.subMenuWrapper5 = this.listWrapper5.querySelector(".sub-menu-wrapper");
	this.backOneLevelBtns = this.pageHeader.querySelectorAll(".back-one-level");
	this.isVisibleClass = "is-visible";
	this.isActiveClass = "is-active";

	this.depth = 0;
	this.mobileMaxWidth = "(max-width: 1199px)";
	this.desktopMinWidth = "(min-width: 1200px)";

	this.afterPseudoElementZIndex = 2;

	this.dropDownMenuWindows = [this.listWrapper2, this.listWrapper3, this.listWrapper4, this.listWrapper5];

};

TrendMicro.MainNavMenu.prototype.makeNavSticky = function()
{
	if (this.businessHeader != null ) {
		this.businessHeader.style.setProperty( '--stickyNavPaddingTop', this.pageHeader.offsetHeight + 'px' );
	}

	let lastScrollY = window.scrollY;

	window.addEventListener("scroll", () => {

		if ( window.scrollY > this.pageHeader.offsetHeight ) {
			this.closeMenu();
			if (lastScrollY < window.scrollY) {
				this.headerAssembly.classList.add("sticky-nav");
			} else {
				this.headerAssembly.classList.remove("sticky-nav");
			}
		}

		lastScrollY = window.scrollY;
	});
};

TrendMicro.MainNavMenu.prototype.resizePageHeaderPseudoElements = function( height )
{
	this.pageHeader.style.setProperty( '--psuedoElementsHeight', height + 'px' );
	this.pageHeader.style.setProperty( '--psuedoElementsTop', this.pageHeader.offsetHeight + 'px' );
	this.pageHeader.style.setProperty( '--psuedoElementsRight', this.pageHeader.getBoundingClientRect().right - window.innerWidth + 'px' );
	this.pageHeader.style.setProperty( '--psuedoElementsZIndex', this.afterPseudoElementZIndex );
};

TrendMicro.MainNavMenu.prototype.isMobile = function()
{
	return window.matchMedia( this.mobileMaxWidth ).matches;
};

TrendMicro.MainNavMenu.prototype.isDesktop = function()
{
	return window.matchMedia( this.desktopMinWidth ).matches;
};

TrendMicro.MainNavMenu.prototype.deactivateMenuLinkSiblings = function( anchorElement, topNavMode = false )
{
	if (!topNavMode) {
		let parentUL = anchorElement.parentElement.parentElement.parentElement;
		let matches = parentUL.querySelectorAll("li div.label a.menu-link");
		for( let match of matches ) {
			// match.classList.remove(this.isVisibleClass);
			match.classList.remove(this.isActiveClass);
		}
	} else {
		let parentUL = anchorElement.parentElement.parentElement;
		let matches = parentUL.querySelectorAll("li");
		for( let match of matches ) {
			// match.classList.remove(this.isVisibleClass);
			match.classList.remove(this.isActiveClass);
		}
	}
};

TrendMicro.MainNavMenu.prototype.activateFirstChild = function( parentListMenuElement )
{
	const firstAnchorLink = parentListMenuElement.querySelector( ".sub-menu-wrapper > ul > li > div > a:first-child" );
	if (firstAnchorLink == null) {
		return;
	}

	firstAnchorLink.classList.add("is-active");

	const mouseoverEvent = new MouseEvent( 'mouseover', { 'view': window, 'bubbles': true, 'cancelable': true } );
	firstAnchorLink.dispatchEvent( mouseoverEvent );
};

TrendMicro.MainNavMenu.prototype.init = function()
{
	if( null == this.headerAssembly ) { return; }

	this.hamburgerWrapper.style.top = this.pageHeader.offsetHeight + "px";

	if( this.isMobile() ) {
		this.hamburgerWrapper.style.height = "calc(100vh - " + this.pageHeader.offsetHeight + "px)";
	} else {
		this.hamburgerWrapper.style.height = "auto";
	}

	this.toggleMenu.checked = false; // clear this in case browser tried to keep it

	this.makeNavSticky();

	// $(this.toggleMenu).on( "click", { scope: this }, this.menuWrapperClickHandler );
	$(this.toggleMenu).on( "change", { scope: this }, this.menuWrapperClickHandler );

	for( let level1Link of this.level1Links ) {
		$(level1Link).on( "click", { scope: this }, this.level1LinksClickHandler );
	}
	$(this.listWrapper2).on( "click", {scope: this}, this.listWrapper2ClickHandler );
	$(this.listWrapper3).on( "click", {scope: this}, this.listWrapper3ClickHandler );
	$(this.listWrapper4).on( "click", {scope: this}, this.listWrapper4ClickHandler );

	for( let backOneLevelBtn of this.backOneLevelBtns ) {
		$(backOneLevelBtn).on( "click", {scope:this}, this.backOneLevelBtnClickHandler );
	}

	// Search Functionality
	$(this.searchIcon).on( "click", {scope: this}, this.openSearchInput );
	$(this.searchBackArrow).on( "click", {scope: this}, this.closeSearchInputMobile );
	$(this.clearSearch).on( "click", {scope: this}, this.clearSearchInput );

	$(this.closeDesktopSearch).on( "click", {scope: this}, this.closeSearchInputDesktop );

	// Added for Desktop
	$(this.listWrapper2).on( "mouseover", {scope: this}, this.listWrapper2ClickHandler );
	$(this.listWrapper3).on( "mouseover", {scope: this}, this.listWrapper3ClickHandler );
	$(this.listWrapper4).on( "mouseover", {scope: this}, this.listWrapper4ClickHandler );

	// Listen for clicks anywhere in the page, and close the menu if it's open on desktop
	$(window).on('click', {scope: this}, this.outsideMenuClickHandler );
};

TrendMicro.MainNavMenu.prototype.closeMenu = function()
{
	for( let element of this.dropDownMenuWindows )
	{
		element.style.display = "none";
		element.classList.remove( this.isVisibleClass );
	}

	this.resizePageHeaderPseudoElements(0);
}

TrendMicro.MainNavMenu.prototype.syncDropDownMenuWindowHeights = function()
{
	this.resetDropDownMenuWindowHeights();

	let tallestHeight = 0;

	for( let element of this.dropDownMenuWindows )
	{
		if( element.offsetHeight > tallestHeight ) { tallestHeight = element.offsetHeight; }
	}

	for( let element of this.dropDownMenuWindows )
	{
		element.style.height = tallestHeight + 'px';
	}

	this.resizePageHeaderPseudoElements(tallestHeight);
}

TrendMicro.MainNavMenu.prototype.resetDropDownMenuWindowHeights = function()
{
	for( let element of this.dropDownMenuWindows )
	{
		element.style.height = 'auto';
	}
}

TrendMicro.MainNavMenu.prototype.isListWrapperLeafContent = function( leafWrapperElement )
{
	const ulElement = leafWrapperElement.querySelector( '.sub-menu-wrapper > ul' );

	if( ulElement == null ) { return false; }
	return ulElement.classList.contains( 'nav-item-leaf');
}

TrendMicro.MainNavMenu.prototype.setListWrapper3Width = function( leafWrapperElement )
{
	if( this.isListWrapperLeafContent(leafWrapperElement) ) {
		return '75%';
	}
	else {
		return '25%';
	}
};

TrendMicro.MainNavMenu.prototype.setListWrapper4Width = function( leafWrapperElement )
{
	if( this.isListWrapperLeafContent(leafWrapperElement) ) {
		return '50%';
	}
	else {
		return '25%';
	}
};


TrendMicro.MainNavMenu.prototype.setListWrapperBorder = function( leafWrapperElement )
{
	if( this.isListWrapperLeafContent(leafWrapperElement) ) {
		return "none";
	}
	else {
		return "1px solid #707070";
	}
};

TrendMicro.MainNavMenu.prototype.moveLevelZeroIntoFocus = function()
{
	this.initalListWrapper.style.display = "block";

	this.listWrapper2.style.position = "absolute";
	this.listWrapper2.style.display = "none";

	this.listWrapper3.style.position = "absolute";
	this.listWrapper3.style.display = "none";

	this.listWrapper4.style.position = "absolute";
	this.listWrapper4.style.display = "none";

	this.listWrapper5.style.position = "absolute";
	this.listWrapper5.style.display = "none";
};

TrendMicro.MainNavMenu.prototype.moveLevelOneIntoFocus = function()
{
	this.initalListWrapper.style.display = "none";

	this.listWrapper2.style.position = "unset";
	this.listWrapper2.style.display = "block";

	this.listWrapper3.style.position = "absolute";
	this.listWrapper3.style.display = "none";

	this.listWrapper4.style.position = "absolute";
	this.listWrapper4.style.display = "none";

	this.listWrapper5.style.position = "absolute";
	this.listWrapper5.style.display = "none"

	if( window.matchMedia( this.desktopMinWidth ).matches )
	{
		this.initalListWrapper.style.display = "block";

		this.listWrapper2.style.position = "absolute";
		this.listWrapper2.style.display = "block";
		this.listWrapper2.style.top = this.pageHeader.offsetHeight + "px";
		this.listWrapper2.style.width = "25%";
		this.listWrapper2.style.left = 0;

		this.listWrapper3.style.position = "absolute";
		this.listWrapper3.style.display = "block";
		this.listWrapper3.style.top = this.pageHeader.offsetHeight + "px";
		this.listWrapper3.style.width = "25%";
		this.listWrapper3.style.left = "25%";

		this.listWrapper4.style.position = "absolute";
		this.listWrapper4.style.display = "block";
		this.listWrapper4.style.top = this.pageHeader.offsetHeight + "px";
		this.listWrapper4.style.width = "25%";
		this.listWrapper4.style.left = "50%";

		this.listWrapper5.style.position = "absolute";
		this.listWrapper5.style.display = "block";
		this.listWrapper5.style.top = this.pageHeader.offsetHeight + "px";
		this.listWrapper5.style.width = "25%";
		this.listWrapper5.style.left = "75%";

		this.activateFirstChild( this.listWrapper2 );
	}
};

TrendMicro.MainNavMenu.prototype.moveLevelTwoIntoFocus = function()
{
	this.initalListWrapper.style.display = "none";

	this.listWrapper2.style.position = "absolute";
	this.listWrapper2.style.display = "none";

	this.listWrapper3.style.position = "unset";
	this.listWrapper3.style.display = "block";

	this.listWrapper4.style.position = "absolute";
	this.listWrapper4.style.display = "none";

	this.listWrapper5.style.position = "absolute";
	this.listWrapper5.style.display = "none";

	if( window.matchMedia( this.desktopMinWidth ).matches )
	{
		this.initalListWrapper.style.display = "block";

		this.listWrapper2.style.display = "block";

		this.listWrapper3.style.position = "absolute";
		this.listWrapper3.style.display = "block";
		this.listWrapper3.style.top = this.pageHeader.offsetHeight + "px";
		this.listWrapper3.style.width = this.setListWrapper3Width( this.listWrapper3 );
		this.listWrapper3.style.left = "25%";
		this.listWrapper3.style.borderRight = this.setListWrapperBorder(this.listWrapper3);

		this.listWrapper4.style.position = "absolute";
		this.listWrapper4.style.display = "block";
		this.listWrapper4.style.top = this.pageHeader.offsetHeight + "px";
		this.listWrapper4.style.width = "25%";
		this.listWrapper4.style.left = "50%";

		this.listWrapper5.style.position = "absolute";
		this.listWrapper5.style.display = "block";
		this.listWrapper5.style.top = this.pageHeader.offsetHeight + "px";
		this.listWrapper5.style.width = "25%";
		this.listWrapper5.style.left = "75%";

		this.activateFirstChild( this.listWrapper3 );
	}
};

TrendMicro.MainNavMenu.prototype.moveLevelThreeIntoFocus = function()
{
	this.initalListWrapper.style.display = "none";

	this.listWrapper2.style.position = "absolute";
	this.listWrapper2.style.display = "none";

	this.listWrapper3.style.position = "absolute";
	this.listWrapper3.style.display = "none";

	this.listWrapper4.style.position = "unset";
	this.listWrapper4.style.display = "block";

	this.listWrapper5.style.position = "absolute";
	this.listWrapper5.style.display = "none";

	if( window.matchMedia( this.desktopMinWidth ).matches )
	{
		this.initalListWrapper.style.display = "block";

		this.listWrapper2.style.display = "block";
		this.listWrapper3.style.display = "block";

		this.listWrapper4.style.position = "absolute";
		this.listWrapper4.style.display = "block";
		this.listWrapper4.style.top = this.pageHeader.offsetHeight + "px";
		this.listWrapper4.style.width = this.setListWrapper4Width( this.listWrapper4 );
		this.listWrapper4.style.left = "50%";
		this.listWrapper4.style.borderRight = this.setListWrapperBorder(this.listWrapper4);

		this.listWrapper5.style.position = "absolute";
		this.listWrapper5.style.display = "block";
		this.listWrapper5.style.top = this.pageHeader.offsetHeight + "px";
		this.listWrapper5.style.width = "25%";
		this.listWrapper5.style.left = "75%";

		this.activateFirstChild( this.listWrapper4 );
	}
};

TrendMicro.MainNavMenu.prototype.moveLevelFourIntoFocus = function()
{
	this.initalListWrapper.style.display = "none";

	this.listWrapper2.style.position = "absolute";
	this.listWrapper2.style.display = "none";

	this.listWrapper3.style.position = "absolute";
	this.listWrapper3.style.display = "none";

	this.listWrapper4.style.position = "absolute";
	this.listWrapper4.style.display = "none";

	this.listWrapper5.style.position = "unset";
	this.listWrapper5.style.display = "block";

	if( window.matchMedia( this.desktopMinWidth ).matches )
	{
		this.initalListWrapper.style.display = "block";

		this.listWrapper2.style.display = "block";
		this.listWrapper3.style.display = "block";
		this.listWrapper4.style.display = "block";

		this.listWrapper5.style.position = "absolute";
		this.listWrapper5.style.display = "block";
		this.listWrapper5.style.top = this.pageHeader.offsetHeight + "px";
		this.listWrapper5.style.width = "25%";
		this.listWrapper5.style.left = "75%";
	}
};

TrendMicro.MainNavMenu.prototype.swapMenuView = function()
{
	switch (this.depth) {
		case 0:
			// setTimeout(() => {this.moveLevelZeroIntoFocus()}, 750);
			this.moveLevelZeroIntoFocus();
			break;

		case 1:
			// setTimeout(() => {this.moveLevelOneIntoFocus()}, 750);
			this.moveLevelOneIntoFocus();
			if( this.isDesktop() ) { this.syncDropDownMenuWindowHeights(); }
			break;

		case 2:
			// setTimeout(() => {this.moveLevelTwoIntoFocus()}, 750);
			this.moveLevelTwoIntoFocus();
			if( this.isDesktop() ) { this.syncDropDownMenuWindowHeights(); }
			break;

		case 3:
			// setTimeout(() => {this.moveLevelTwoIntoFocus()}, 750);
			this.moveLevelThreeIntoFocus();
			if( this.isDesktop() ) { this.syncDropDownMenuWindowHeights(); }
			break;

		case 4:
			// setTimeout(() => {this.moveLevelTwoIntoFocus()}, 750);
			this.moveLevelFourIntoFocus();
			if( this.isDesktop() ) { this.syncDropDownMenuWindowHeights(); }
			break;
	}
};

TrendMicro.MainNavMenu.prototype.menuWrapperClickHandler = function( event )
{
	let self = event.data.scope;
	self.hamburgerWrapper.classList.toggle( self.isVisibleClass );

	//removes search icon when hamburger is clicked
	if (self.hamburgerWrapper.classList.contains( self.isVisibleClass )) {
		self.searchIcon.style.display = "none";
	} else {
		self.searchIcon.style.display = "block";
	}

	if (!this.classList.contains( self.isVisibleClass )) {
		self.listWrapper2.classList.remove( self.isVisibleClass );
		self.listWrapper3.classList.remove( self.isVisibleClass );
		self.listWrapper4.classList.remove( self.isVisibleClass );
	}

	self.navDropDownCoverScreen( self, this );
	self.depth = 0;
	self.swapMenuView();

	// Script scope
	utilityMenuHandler.placeMenus( self.pageHeader.offsetHeight );
};

TrendMicro.MainNavMenu.prototype.navDropDownCoverScreen = function( self, selector )
{
	// ------------------------------------------------------------
	// Mobile view only
	// For making the main nav drop-down to cover the entire screen
	// ------------------------------------------------------------
	if( self.isMobile() ) {

		if( selector.checked ){

			const scrollY = window.scrollY;

			$(self.body).css('position', 'fixed');
			$(self.hamburgerWrapper).css('background-color', '#050809');

			let documentTop = `-${scrollY}` + 'px';

			$(self.body).css('top', documentTop);

		}else{
			// ---------------------------------------------------------------
			// Case when user closes the hamburger menu. reset position, and
			// scroll the user to where they were before opening the hamburger
			// ---------------------------------------------------------------
				const scrollY = $(self.body).css('top');
				$(self.body).css('position', '');
				$(self.body).css('top', '');
				window.scrollTo(0, parseInt(scrollY || '0') * -1);
				$(self.hamburgerWrapper).css('background-color', '');
		}
	}
}

TrendMicro.MainNavMenu.prototype.isEventMobileMouseOver = function( event )
{
	return (this.isMobile() && event.type === 'mouseover');
}

TrendMicro.MainNavMenu.prototype.isTargetLeafLinkOnMobile = function( target )
{
	return (this.isMobile() && target.parentNode.nextElementSibling.classList.contains('nav-item-leaf'));
}

TrendMicro.MainNavMenu.prototype.level1LinksClickHandler = function( event )
{
	let self = event.data.scope;
	if( self.isEventMobileMouseOver(event) ) { return; }

	const siblingList = this.nextElementSibling;
	if (siblingList) {
		event.preventDefault();
		self.deactivateMenuLinkSiblings(event.target, true);
		this.parentElement.classList.add( self.isActiveClass );
		let listParent = this.parentElement;
		const cloneSiblingList = siblingList.cloneNode(true);
		self.subMenuWrapper2.innerHTML = "";
		self.subMenuWrapper2.append(cloneSiblingList);
		self.listWrapper2.classList.add(self.isVisibleClass);
	}
	self.depth = 1;
	self.swapMenuView();
};

TrendMicro.MainNavMenu.prototype.listWrapper2ClickHandler = function( event )
{
	const self = event.data.scope;
	const target = event.target;

	if( self.isEventMobileMouseOver(event) ) { return; }	// Happens in mobile emulation only, but just ignore it
	if( self.isEventDesktopClick(event) ) { return; }		// Desktop clicks cannot trigger next menu, only hover
	if( !self.isTargetAnAnchorLink( target ) ) { return; }
	if( !self.doesTargetParentHaveSibling( target ) ) { return; }
	if( self.isTargetLeafLinkOnMobile(target ) ) { return; }
	if( self.isLeafButton(target) ) { return; }

	self.deactivateMenuLinkSiblings(target);
	const siblingList = target.parentNode.nextElementSibling;
	event.preventDefault();
	target.classList.add( self.isActiveClass );
	const cloneSiblingList = siblingList.cloneNode(true);
	self.subMenuWrapper3.innerHTML = "";
	self.subMenuWrapper3.append(cloneSiblingList);
	self.listWrapper3.classList.add( self.isVisibleClass );

	self.afterPseudoElementZIndex = 2;
	self.depth = 2;
	self.swapMenuView();
};

TrendMicro.MainNavMenu.prototype.listWrapper3ClickHandler = function( event )
{
	const self = event.data.scope;
	const target = event.target;

	if( self.isEventMobileMouseOver(event) ) { return; }
	if( self.isEventDesktopClick(event) ) { return; }
	if( !self.isTargetAnAnchorLink( target ) ) { return; }
	if( !self.doesTargetParentHaveSibling( target ) ) { return; }
	if( self.isTargetLeafLinkOnMobile(target ) ) { return; }
	if( self.isLeafButton(target) ) { return; }

	self.deactivateMenuLinkSiblings(target);
	const siblingList = target.parentNode.nextElementSibling;
	event.preventDefault();
	target.classList.add( self.isActiveClass );
	const cloneSiblingList = siblingList.cloneNode(true);
	self.subMenuWrapper4.innerHTML = "";
	self.subMenuWrapper4.append(cloneSiblingList);
	self.listWrapper4.classList.add( self.isVisibleClass );

	self.afterPseudoElementZIndex = 2;
	self.depth = 3;
	self.swapMenuView();
};

TrendMicro.MainNavMenu.prototype.listWrapper4ClickHandler = function( event )
{
	let self = event.data.scope;
	const target = event.target;

	if( self.isEventMobileMouseOver(event) ) { return; }
	if( self.isEventDesktopClick(event) ) { return; }
	if( !self.isTargetAnAnchorLink( target ) ) { return; }
	if( !self.doesTargetParentHaveSibling( target ) ) { return; }
	if( self.isTargetLeafLinkOnMobile(target ) ) { return; }
	if( self.isLeafButton(target) ) { return; }

	self.deactivateMenuLinkSiblings(target);
	const siblingList = target.parentNode.nextElementSibling;
	event.preventDefault();
	target.classList.add( self.isActiveClass );
	const cloneSiblingList = siblingList.cloneNode(true);
	self.subMenuWrapper5.innerHTML = "";
	self.subMenuWrapper5.append(cloneSiblingList);
	self.listWrapper5.classList.add( self.isVisibleClass );

	self.afterPseudoElementZIndex = 1;
	self.depth = 4;
	self.swapMenuView();
};

TrendMicro.MainNavMenu.prototype.backOneLevelBtnClickHandler = function( event )
{
	let self = event.data.scope;
	if( self.isEventMobileMouseOver(event) ) { return; }

	event.stopPropagation();
	const parent = this.closest(".list-wrapper");
	parent.classList.remove(self.isVisibleClass);

	if (self.depth >= 1 ) {
		self.depth--;
	}
	self.swapMenuView();
};

TrendMicro.MainNavMenu.prototype.openSearchInput = function( event )
{
	let self = event.data.scope;
	self.searchInput.classList.add( self.isVisibleClass );

	if( self.isDesktop() ) {
		self.searchInput.style.top = "0px";
		self.searchInput.style.height = "100vh";

		self.searchIcon.style.display = "none";
		self.closeDesktopSearch.style.display = "block";
	}
};

TrendMicro.MainNavMenu.prototype.isEventDesktopClick = function( event )
{
	return this.isDesktop() && (event.type === 'click');
};

TrendMicro.MainNavMenu.prototype.isTargetAnAnchorLink = function( target )
{
	return target.tagName.toLowerCase() === "a";
};

TrendMicro.MainNavMenu.prototype.isLeafButton = function( target )
{
	return target.classList.contains( 'leaf-button');
};

TrendMicro.MainNavMenu.prototype.doesTargetParentHaveSibling = function( target )
{
	return target.parentNode.nextElementSibling != null
};

TrendMicro.MainNavMenu.prototype.closeSearchInputMobile = function( event )
{
	let self = event.data.scope;
	self.searchInput.classList.remove( self.isVisibleClass );
};

TrendMicro.MainNavMenu.prototype.closeSearchInputDesktop = function( event )
{
	let self = event.data.scope;

	self.searchInput.classList.remove( self.isVisibleClass );
	self.searchIcon.style.display = "block";
	self.closeDesktopSearch.style.display = "none";
};

TrendMicro.MainNavMenu.prototype.clearSearchInput = function( event )
{
	let self = event.data.scope;
	console.log("clearing search");
	console.log(self.searchInputField);
	self.searchInputField.value = "";
};

TrendMicro.MainNavMenu.prototype.outsideMenuClickHandler = function( event )
{
	const self = event.data.scope;

	if( !self.menuWrapper.contains(event.target) && self.isDesktop() ) {
		self.closeMenu();
	}
};

const mainNavMenu = new TrendMicro.MainNavMenu();
$( document ).ready( function() {
	mainNavMenu.init(); // Run after page load
});

TrendMicro.Alerts = function()
{
	this.headerSelector = '.headerAssemblyV1';
	this.alertsSelector = '.alerts';
	this.alertsCounterSelector = '.alertUtilityMenu .counter';
	this.listSelector = 'ul';
	this.closeButtonSelector = 'span.material-symbols-outlined';
	this.alertsUnreadButtonSelector = '.alerts-unread-button';
	this.alertsAllButtonSelector = '.alerts-all-button';

	this.unreadCSSClass = 'unread';
	this.readCSSClass = 'read';
	this.activeCSSClass = 'is-active';

	this.alertsElement = null;
	this.counterElement = null;
	this.alertsListElement = null;
	this.unreadButtonElement = null;
	this.allButtonElement = null;

	this.cookieName = "TrendMicroReadAlerts";
	this.rawCookie = document.cookie.match("(^|;)\\s*" + this.cookieName + "\\s*=\\s*([^;]+)");
	this.readAlertsList = JSON.parse( this.rawCookie ? this.rawCookie.pop() : "[]");

	this.count = 0;
	this.displayOnlyUnread = true;
}

TrendMicro.Alerts.prototype.init = function()
{
	this.alertsElement = document.querySelector( this.headerSelector + ' ' + this.alertsSelector );
	if( this.alertsElement == null ) { return; }

	this.alertsListElement = this.alertsElement.querySelector( this.listSelector );
	if( this.alertsListElement != null ) {
		let closeButtons = this.alertsListElement.querySelectorAll(this.closeButtonSelector)
		closeButtons.forEach((item) => {
			$(item).on('click', {scope: this}, this.markAlertReadClickHandler);
		});
	}

	this.counterElement = this.alertsElement.querySelector( this.alertsCounterSelector );
	this.count = this.readCount( this.counterElement );

	this.unreadButtonElement = document.querySelector( this.alertsUnreadButtonSelector );
	this.allButtonElement = document.querySelector( this.alertsAllButtonSelector );
	$( this.unreadButtonElement ).on( 'click', {scope:this}, this.unreadAlertsClickHandler );
	$( this.allButtonElement ).on( 'click', {scope:this}, this.allAlertsClickHandler );

	this.showOnlyUnreadAlerts( this.alertsListElement )
}


TrendMicro.Alerts.prototype.readCount = function( element )
{
	if( element != null ){ return parseInt( element.innerHTML ); }
	return 0;
}

TrendMicro.Alerts.prototype.writeCount = function( element, count )
{
	if( element != null ){ element.innerHTML = count; }
}

TrendMicro.Alerts.prototype.readAlertID = function( liElement )
{
	if( liElement != null ) { return liElement.id.replace( 'alert-', '' ); }
	return null;
};

TrendMicro.Alerts.prototype.setCookie = function()
{
	var expireDate = new Date();
	expireDate.setFullYear(expireDate.getFullYear() + 10);

	document.cookie = this.cookieName +
		"=" +
		JSON.stringify( this.readAlertsList ) +
		"; path=/; expires=" +
		expireDate.toGMTString();
};

TrendMicro.Alerts.prototype.addReadAlert = function( alertID )
{
	if( this.readAlertsList.indexOf(alertID) < 0 )
	{
		this.readAlertsList.push( alertID );
	}

	this.setCookie();
};

TrendMicro.Alerts.prototype.isUnread = function( liElement )
{
	if( liElement != null ) {
		return liElement.classList.contains(this.unreadCSSClass);
	}
};

TrendMicro.Alerts.prototype.showOnlyUnreadAlerts = function( parentULElement )
{
	if( parentULElement == null ) { return; }

	let alerts = parentULElement.querySelectorAll( 'li' );
	for( let item of alerts ) {
		if( !this.isUnread( item ) ) {
			item.style.display = 'none';
		}
	}
}

TrendMicro.Alerts.prototype.showAllAlerts = function( parentULElement )
{
	if( parentULElement == null ) { return; }

	let alerts = parentULElement.querySelectorAll( 'li' );
	for( let item of alerts ) {
		item.style.display = 'block';
	}
}

TrendMicro.Alerts.prototype.markAlertReadClickHandler = function( event )
{
	const self = event.data.scope;
	const liElement = this.parentElement.parentElement;
	let id = self.readAlertID( liElement );
	self.addReadAlert( id );
	liElement.classList.remove( self.unreadCSSClass );
	liElement.classList.add( self.readCSSClass );

	self.showOnlyUnreadAlerts( self.alertsListElement );

	self.dropAlertCount();
};

TrendMicro.Alerts.prototype.dropAlertCount = function()
{
	if( this.count > 0 ) { this.count--; }
	this.writeCount( this.counterElement, this.count );
};

TrendMicro.Alerts.prototype.unreadAlertsClickHandler = function( event )
{
	const self = event.data.scope;
	self.displayOnlyUnread = true;

	if( self.alertsListElement == null ) { return; }
	self.showOnlyUnreadAlerts( self.alertsListElement );

	self.unreadButtonElement.classList.add( self.activeCSSClass );
	self.allButtonElement.classList.remove( self.activeCSSClass );
};

TrendMicro.Alerts.prototype.allAlertsClickHandler = function( event )
{
	const self = event.data.scope;
	self.displayOnlyUnread = false;

	if( self.alertsListElement == null ) { return; }
	self.showAllAlerts( self.alertsListElement );

	self.unreadButtonElement.classList.remove( self.activeCSSClass );
	self.allButtonElement.classList.add( self.activeCSSClass );
};

const alerts = new TrendMicro.Alerts();
$(document).ready( function() { alerts.init(); } );

