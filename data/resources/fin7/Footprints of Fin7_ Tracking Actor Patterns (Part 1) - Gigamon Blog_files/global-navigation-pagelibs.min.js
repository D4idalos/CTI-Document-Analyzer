(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

(function(){

    if (!String.prototype.startsWith) {
      String.prototype.startsWith = function(searchString, position) {
        position = position || 0;
        return this.indexOf(searchString, position) === position;
      };
    }

    })();

},{}],2:[function(require,module,exports){
(function() {

		$(function() {
		initialize();
	});

	var initialize = function() {
		attachAdditionalPageLoadVars();
		setUpEvents();
	}

	var attachAdditionalPageLoadVars = function() {
		attachInternalSearchVars();
	}

		var attachInternalSearchVars = function() {
		if($('section.component-search').length) {
			var numResults = $('section.component-search').data('result-count');

						digitalData.page.pageInfo.onsiteSearchResults = numResults;

						_satellite.track('search results page load');
		}
	}

	var setUpEvents = function() {
		attachMarketoEvents();
	}

		var attachMarketoEvents = function() {
		if(typeof MktoForms2 !== 'undefined' && typeof MktoForms2.whenReady !== 'undefined') {
			MktoForms2.whenReady(function(form) {

				form.onSuccess(function(values, followUpUrl) {
					var formId = form.getId();

					var formType = formId;
					var formName = document.title;
					var transactionId = 'mktoForm_' + formId + '_' + guid();

					digitalData.form = {};
					digitalData.form.appName = formType + ':' + formName;
					digitalData.form.transactionId = transactionId;

					_satellite.track('form submit');

										return true;
				});

							});
		}
	}


	function guid() {
		return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
			var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
			return v.toString(16);
		});
	}
})();

},{}],3:[function(require,module,exports){
'use strict';

var log = require('loglevel');
var queryString = require('query-string');

var parms = queryString.parse(location.search);

if (parms.trace) {
    log.setLevel('trace');

} else if (parms.debug) {
    log.setLevel('debug');

} else if (parms.info) {
    log.setLevel('info');

} else if (parms.warn) {
    log.setLevel('warn');

} else if (parms.error) {
    log.setLevel('error');

    } else if (parms.silent) {
    log.setLevel('silent');
}

},{"loglevel":70,"query-string":74}],4:[function(require,module,exports){


require('./../../components/background');
require('./../../components/image');
require('./../../components/html');
require('./../../components/text-jumbo');
require('./../../components/cta');
require('./../../components/columns');
require('./../../components/hero-banner');
require('./../../components/breadcrumbs');
require('./../../components/navbar');
require('./../../components/video');
require('./../../components/twitter-timeline');
require('./../../components/article');
require('./../../components/text-image-two-column');
require('./../../components/search');
require('./../../components/carousel');
require('./../../components/page-list');
require('./../../components/responsive-layout');
require('./../../components/background-image');
require('./../../components/global-navigation');
require('./../../components/sub-menu');
require('./../../components/sub-menu-block');
require('./../../components/block-quote');
require('./../../components/resource-card');
require('./../../components/footer');
require('./../../components/resource-grid');
require('./../../components/filter-container');
require('./../../components/filter-dropdown-resource');
require('./../../components/general-modal');
require('./../../components/sticky-footer');
require('./../../components/simple-navigation');
require('./../../components/mega-banner');
require('./../../components/jump-navigation');
require('./../../components/multi-tabs');
require('./../../components/rss-feeds');
require('./../../components/gated-marketo-form');
require('./../../components/twitter-feed');
require('./../../components/coveo-search');
require('./../../components/tiles');
require('./../../components/video-banner');
require('./../../components/back-to-top');
require('./../../components/stickynav');
require('./../../components/engagement-menu');
require('./../../components/horizontal-resource-card');
require('./../../components/fat-footer');
require('./../../components/have-questions');
require('./../../components/giga-smart-cube');
require('./../../components/giga-smart-blade');
require('./../../components/quotes');
require('./../../components/resource-logo');
require('./../../components/promo');
require('./../../components/logo-tile');
require('./../../components/related-pages');
require('./../../components/thinblade');
},{"./../../components/article":8,"./../../components/back-to-top":9,"./../../components/background":11,"./../../components/background-image":10,"./../../components/block-quote":12,"./../../components/breadcrumbs":13,"./../../components/carousel":14,"./../../components/columns":15,"./../../components/coveo-search":16,"./../../components/cta":17,"./../../components/engagement-menu":18,"./../../components/fat-footer":19,"./../../components/filter-container":20,"./../../components/filter-dropdown-resource":21,"./../../components/footer":22,"./../../components/gated-marketo-form":23,"./../../components/general-modal":24,"./../../components/giga-smart-blade":25,"./../../components/giga-smart-cube":26,"./../../components/global-navigation":27,"./../../components/have-questions":28,"./../../components/hero-banner":29,"./../../components/horizontal-resource-card":30,"./../../components/html":31,"./../../components/image":32,"./../../components/jump-navigation":33,"./../../components/logo-tile":34,"./../../components/mega-banner":35,"./../../components/multi-tabs":36,"./../../components/navbar":37,"./../../components/page-list":38,"./../../components/promo":39,"./../../components/quotes":40,"./../../components/related-pages":41,"./../../components/resource-card":42,"./../../components/resource-grid":43,"./../../components/resource-logo":44,"./../../components/responsive-layout":45,"./../../components/rss-feeds":46,"./../../components/search":47,"./../../components/simple-navigation":48,"./../../components/sticky-footer":49,"./../../components/stickynav":50,"./../../components/sub-menu":52,"./../../components/sub-menu-block":51,"./../../components/text-image-two-column":53,"./../../components/text-jumbo":54,"./../../components/thinblade":55,"./../../components/tiles":56,"./../../components/twitter-feed":57,"./../../components/twitter-timeline":58,"./../../components/video":60,"./../../components/video-banner":59}],5:[function(require,module,exports){


require('./js/logsetup.js');

require('./js/custom-polyfills.js');

require('../../node_modules/bootstrap-sass/assets/javascripts/bootstrap/transition');
require('../../node_modules/bootstrap-sass/assets/javascripts/bootstrap/dropdown');
require('../../node_modules/bootstrap-sass/assets/javascripts/bootstrap/collapse');

require('../../node_modules/slick-carousel/slick/slick');

require('./pagelibs.components');

require('../vendor/jquery.pushMenu');

require('./js/digitaldata.js');

require('../../node_modules/css-modal/modal.js').init();

require('../vendor/jquery.hoverIntent');


},{"../../node_modules/bootstrap-sass/assets/javascripts/bootstrap/collapse":65,"../../node_modules/bootstrap-sass/assets/javascripts/bootstrap/dropdown":66,"../../node_modules/bootstrap-sass/assets/javascripts/bootstrap/transition":67,"../../node_modules/css-modal/modal.js":68,"../../node_modules/slick-carousel/slick/slick":75,"../vendor/jquery.hoverIntent":6,"../vendor/jquery.pushMenu":7,"./js/custom-polyfills.js":1,"./js/digitaldata.js":2,"./js/logsetup.js":3,"./pagelibs.components":4}],6:[function(require,module,exports){




;(function(factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (jQuery && !jQuery.fn.hoverIntent) {
        factory(jQuery);
    }
})(function($) {
    'use strict';

    var _cfg = {
        interval: 100,
        sensitivity: 6,
        timeout: 0
    };

    var INSTANCE_COUNT = 0;

    var cX, cY;

    var track = function(ev) {
        cX = ev.pageX;
        cY = ev.pageY;
    };

    var compare = function(ev,$el,s,cfg) {
        if ( Math.sqrt( (s.pX-cX)*(s.pX-cX) + (s.pY-cY)*(s.pY-cY) ) < cfg.sensitivity ) {
            $el.off(s.event,track);
            delete s.timeoutId;
            s.isActive = true;
            ev.pageX = cX; ev.pageY = cY;
            delete s.pX; delete s.pY;
            return cfg.over.apply($el[0],[ev]);
        } else {
            s.pX = cX; s.pY = cY;
            s.timeoutId = setTimeout( function(){compare(ev, $el, s, cfg);} , cfg.interval );
        }
    };

    var delay = function(ev,$el,s,out) {
        delete $el.data('hoverIntent')[s.id];
        return out.apply($el[0],[ev]);
    };

    $.fn.hoverIntent = function(handlerIn,handlerOut,selector) {
        var instanceId = INSTANCE_COUNT++;

        var cfg = $.extend({}, _cfg);
        if ( $.isPlainObject(handlerIn) ) {
            cfg = $.extend(cfg, handlerIn);
            if ( !$.isFunction(cfg.out) ) {
                cfg.out = cfg.over;
            }
        } else if ( $.isFunction(handlerOut) ) {
            cfg = $.extend(cfg, { over: handlerIn, out: handlerOut, selector: selector } );
        } else {
            cfg = $.extend(cfg, { over: handlerIn, out: handlerIn, selector: handlerOut } );
        }

        var handleHover = function(e) {
            var ev = $.extend({},e);

            var $el = $(this);

            var hoverIntentData = $el.data('hoverIntent');
            if (!hoverIntentData) { $el.data('hoverIntent', (hoverIntentData = {})); }

            var state = hoverIntentData[instanceId];
            if (!state) { hoverIntentData[instanceId] = state = { id: instanceId }; }


            if (state.timeoutId) { state.timeoutId = clearTimeout(state.timeoutId); }

            var mousemove = state.event = 'mousemove.hoverIntent.hoverIntent'+instanceId;

            if (e.type === 'mouseenter') {
                if (state.isActive) { return; }
                state.pX = ev.pageX; state.pY = ev.pageY;
                $el.off(mousemove,track).on(mousemove,track);
                state.timeoutId = setTimeout( function(){compare(ev,$el,state,cfg);} , cfg.interval );
            } else { 
                if (!state.isActive) { return; }
                $el.off(mousemove,track);
                state.timeoutId = setTimeout( function(){delay(ev,$el,state,cfg.out);} , cfg.timeout );
            }
        };

        return this.on({'mouseenter.hoverIntent':handleHover,'mouseleave.hoverIntent':handleHover}, cfg.selector);
    };
});

},{}],7:[function(require,module,exports){

;(function ($, window, document, undefined) {



    var pluginName = "pushMenu",
        defaults = {
        type : 'overlap', 
        levelSpacing : 0, 
        backClass : 'mp-back', 
        trigger : '#trigger', 
        pusher: '#mp-pusher', 
        scrollTop: false 
    };

    function Plugin (element, options) {
        this.element = element;
        this.settings = $.extend({}, defaults, options);
        this._defaults = defaults;
        this._name = pluginName;

                if(window.navigator.userAgent.indexOf('MSIE 8') == -1)  {
            this.init();
        }
    }

    $.extend(Plugin.prototype, {

        init: function () {
            this.open = false;
            this.level = 0;

            this.wrapper = $(this.settings.pusher)[0],

            this.levels = $('.mp-level', this.element);

            var self = this;
            $.each(this.levels, function(i, element){
                level = self.getLevelDepth(element, self.element.id, 'mp-level');

                                $(element).attr('data-level', level);
            });

            this.menuItems = Array.prototype.slice.call(this.element.querySelectorAll('li'));

            this.levelBack = $('.' + this.settings.backClass, this.element);

            this.eventtype = 'click';

            $(this.element).addClass('mp-' + this.settings.type);

            this._initEvents();
        },

        getLevelDepth : function(e, id, waypoint, cnt)  {
            var self = this;

            cnt = cnt || 0;
            if (e.id.indexOf(id) >= 0) return cnt;

            if($(e).hasClass(waypoint)) {
                ++cnt;
            }
            return e.parentNode && self.getLevelDepth(e.parentNode, id, waypoint, cnt);
        },

        isIE: function()    {
            var myNav = navigator.userAgent.toLowerCase();
            return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;
        },

        mobilecheck : function()    {
            var check = false;
            (function(a){if(/(android|ipad|playbook|silk|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm(os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s)|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp(i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac(|\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt(|\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg(g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v)|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v)|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-|)|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
            return check;
        },

        closest : function(e, classname)    {
            var self = this;

            if($(e).hasClass(classname))    {
                return e;
            }
            return e.parentNode && self.closest(e.parentNode, classname);
        },

        hasParent : function(e, id) {
            if (!e) return false;
            var el = e.target||e.srcElement||e||false;
            while (el && el.id != id) {
                    el = el.parentNode||false;
            }
            return (el!==false);
        },

        _initEvents : function() {
            var self = this;

            var bodyClickFn = function(el) {
                self._resetMenu();
                el.removeEventListener(self.eventtype, bodyClickFn);
            };

            $(self.settings.trigger).on(this.eventtype, function(ev) {
                ev.stopPropagation();
                if(self.open) {
                    self._resetMenu();
                }
                else {
                    self._openMenu();
                    document.addEventListener(self.eventtype, function(ev) {
                        if(self.open && !self.hasParent(ev.target, self.element.id)) {
                            bodyClickFn(this);
                        }
                    });
                }
            });


                        this.menuItems.forEach(function(el, i) {
                var subLevel = el.querySelector('div.mp-level');
                if(subLevel) {
                    $('a', el).on(self.eventtype, function(ev) {
                        if ($(this).attr('href') == 'javascript:;' || $(this).attr('href') == null){
                            var level = self.closest(el, 'mp-level').getAttribute('data-level');

                                                        if(self.level <= level) {
                                ev.stopPropagation();
                                $(self.closest(el, 'mp-level')).addClass('mp-level-overlay');
                                self._openMenu(subLevel);
                            }
                        }
                    });
                }
            });

            $.each(this.levels, function(){
                var el = $(this);

                                el.on(self.eventtype, function(ev){
                    ev.stopPropagation();

                                        var level = el.data('level');

                                        if(self.level > level) {
                        self.level = level;
                        self._closeMenu();
                    }
                });
            });

            $.each(this.levelBack, function(){
                var el = $(this);

                                el.on(self.eventtype, function(ev){
                    var handler = $(this, self);
                    var level = $(handler).closest('.mp-level').data('level');

                                        if(self.level <= level) {
                        ev.stopPropagation();
                        self.level = $(handler).closest('.mp-level').data('level') -1;
                        self.level === 0 ? self._resetMenu() : self._closeMenu();
                    }
                });
            });
        },
        _openMenu : function(subLevel) {
            ++this.level;

            var levelFactor = (this.level - 1) * this.settings.levelSpacing,
                translateVal = this.settings.type === 'overlap' ? this.element.offsetWidth + levelFactor : this.element.offsetWidth;

                this._setTransform(translateVal + 'px');

            if(subLevel) {
                this._setTransform('', subLevel);

                for(var i = 0, len = this.levels.length; i < len; ++i) {
                    var levelEl = this.levels[i];
                    if(parseInt($(levelEl).data('level')) !== parseInt($(subLevel).data('level')) && !$(levelEl).hasClass('mp-level-open'))   {
                    }
                }
            }
            if(this.level === 1) {
                $(this.wrapper).addClass('mp-pushed');
                this.open = true;
            }
            $(subLevel || this.levels[0]).addClass('mp-level-open');

            if(this.settings.scrollTop) {
                _self._scrollTop(subLevel || this.levels[0]);
            }
        },
        _resetMenu : function() {
            this._setTransform(0);
            this.level = 0;
            $(this.wrapper).removeClass('mp-pushed');
            this._toggleLevels();
            this.open = false;
        },
        _closeMenu : function() {
            var translateVal = this.settings.type === 'overlap' ? this.element.offsetWidth + (this.level - 1) * this.settings.levelSpacing : this.element.offsetWidth;
            this._setTransform(translateVal);
            this._toggleLevels();
        },
        _setTransform : function(val, el, secondaryVal) {

                        _self = this;

                        el = el || this.wrapper;
            secondaryVal = secondaryVal || false;

                        if(false !== _self.isIE() && _self.isIE() <= 9)   {

                            secondaryVal = parseInt(secondaryVal) == 0 ? '-300px' : secondaryVal;

                                $(el).animate({
                        left: val
                    }, 
                    'medium', function(){
                        if(false !== secondaryVal){
                            $(this).animate({
                                left: secondaryVal
                            });
                        }
                    }
                );

            } else {

                translate = '';

                                if(val) {
                    translate = 'translate3d(' + val + ',0,0)';

                    if(false !== secondaryVal)   {
                        translate = translate + ' translate3d(' + secondaryVal + ',0,0)';
                    }
                }

                $(el).css({
                    '-webkit-transform' : translate,
                    '-moz-transform'    : translate,
                    '-ms-transform'     : translate,
                    '-o-transform'      : translate,
                    'transform'         : translate
                });
            }
        },
        _toggleLevels : function() {

                        var $self = this;

                        $.each(this.levels, function(){
                var levelEl = $(this);
                if(levelEl.data('level') >= $self.level + 1) {

                                        if(false !== $self.isIE() && $self.isIE() <= 9)   {
                        $(levelEl).animate({
                            left: '-300px'
                        },'medium');
                    }

                                        levelEl.removeClass('mp-level-open');
                    levelEl.removeClass('mp-level-overlay');
                }
                else if(Number(levelEl.data('level')) == $self.level) {
                    levelEl.removeClass('mp-level-overlay');
                }
            });
        },
        _scrollTop : function(element)    {
            $('html, body').animate({
                scrollTop: $(element).offset().top
            }, 100);
        }
    });

    $.fn[ pluginName ] = function (options) {
        this.each(function() {
            if (!$.data(this, "plugin_" + pluginName)) {
                $.data(this, "plugin_" + pluginName, new Plugin(this, options));
            }
        });

        return this;
    };

})(jQuery, window, document);

},{}],8:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-article').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Article');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],9:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-back-to-top').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Backtotop');


    window.addEventListener('scroll', function() {
    scrollFunction();
    });


    function scrollFunction() {
      if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
        document.getElementById("backToTop").style.display = "block";
      } else {
        document.getElementById("backToTop").style.display = "none";
      }
    }
    if ($(window).width() >= 1600) {
          var newWidth = $(window).width()-1600;
          var rightpos = newWidth/2;
          var newpos = rightpos+30;
          $("#backToTop").css("right", newpos+"px");
    }

    $(".backToTop").on('click', function(event){
        window.scrollTo({top: 0, behavior: 'smooth'});
    });
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],10:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-background-image').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing BackgroundImage');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],11:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-background').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Background');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],12:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-block-quote').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing BlockQuote');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],13:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-breadcrumbs').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Breadcrumbs');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],14:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');
var wcmmode = require('../wcmmode');

if ($('.component-carousel').length) {
    if (!wcmmode.isEdit() && !wcmmode.isDesign() && !wcmmode.isPreview()) {
        $(function() {
            init();
        });
    }
}

function init() {
    log.trace('Initializing Carousel');
        $('.component-carousel').slick({
            prevArrow: '<button class="custom-prev" type="button"><svg height="40" viewBox="0 0 24 40" width="24" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><path d="m0 0 15.6498538 16-15.6498538 16" stroke="#121b1f" stroke-width="2" transform="matrix(-1 0 0 1 20 4)"/><path d="m0 0h24v40h-24z"/><path d="m0 0h24v40h-24z"/></g></svg></button>',
            nextArrow: '<button class="custom-next" type="button"><svg height="40" viewBox="0 0 24 40" width="24" xmlns="http://www.w3.org/2000/svg"><path d="m0 0 15.6498538 16-15.6498538 16" fill="none" stroke="#121b1f" stroke-width="2" transform="translate(4 4)"/></svg></button>',
             centerMode: true,
              variableWidth: false,
              centerPadding: '0px',
              responsive: [
                     {
                       breakpoint: 420,
                       settings: {
                         arrows: false,
                         centerPadding: '0px',
                         slidesToShow: 1,
                         slidesToScroll: 1,
                         dots: true
                       }
                     },
					 {
                      breakpoint: 769,
                      settings: {
                        arrows: false,
                        centerPadding: '0px',
                          slidesToShow: 1,
                        slidesToScroll: 1,
                        dots: true
                      }
                    }
                   ]
            });
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../wcmmode":64,"loglevel":70}],15:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-columns').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Columns');

	$('.component-columns.hoverable .component-text-jumbo').hover(function() {
		$('.component-columns.hoverable .component-text-jumbo').removeClass('active');
		$(this).addClass('active');
	},function(){
		$('.component-columns.hoverable .component-text-jumbo').removeClass('active');
	});


}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],16:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.coveo-search').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing CoveoSearch');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],17:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-cta').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Cta');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],18:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-engagement-menu').length) {
    $(function() {
        init();
    });
}

function init() {





    log.trace('Initializing EngagementMenu');
}

$(window).scroll(function() {

if($(".component-engagement-menu ul.menu li").hasClass("expand")){
  $(".component-engagement-menu ul.menu li").removeClass("expand").addClass("collapse");}
});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],19:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-fat-footer').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing FatFooter');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],20:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-filter-container').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing FilterContainer');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],21:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-filter-dropdown-resource').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing FilterDropdownResource');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],22:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-footer').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Footer');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],23:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-gated-marketo-form').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing GatedMarketoForm');

}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],24:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');
var cssmodal = require( '../../node_modules/css-modal/modal.js' );


if ($('.component-general-modal').length) {
    $(function() {
        generalModal();
    });
}

var generalModal = function () {

    var xPos;

	$('.component-general-modal').each(function() {
        $(this).insertAfter($('.site-content'));
    });

    $(".general-modal").click(function (event) {
        var hash = event.currentTarget.getAttribute('href').replace('#', '');
        var modalElement = document.getElementById(hash);
        if (modalElement) {
            var $modalElement = $(modalElement);
            if ($modalElement.hasClass("component-general-modal")) {
                cssmodal.mainHandler(event, true);
            }
        }
    });

    $(document).on('cssmodal:show', function (event, modalParms) {
        var $target = $(modalParms.detail.modal);
        if ($target.hasClass('component-general-modal')) {

            $(".site-wrapper").addClass("general-modal-open");

            xPos = $('body').scrollTop();

                    }
    });

    $(document).on('cssmodal:hide', function (event, modalParms) {
        var $target = $(modalParms.detail.modal);
        if ($target.hasClass('component-general-modal')) {

            $(".site-wrapper").removeClass("general-modal-open");

            $('body').css({
                  overflow: '',
                  position: '',
                  top: ''
            });

            if($target.find('iframe')){
                $($target.find('iframe')).attr("src", $($target.find('iframe')).attr("src"));
            }

        }
    });

    var resizeWindow = function () {
        var siteHeader = $('.site-header');
        var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        var modalWindow = $('.component-general-modal');
        modalWindow.each(function (index) {
            var innerModal = $(this).find('.modal-inner');

            if ($(window).width() >= 463) {
                var innerH = h - 250;
                log.debug('innerModal h ' + h + ' innerH ' + innerH);
            }
            else {
                log.debug('width' + $(window).width());
            }
        });
    };

    var modalWindow = $('.component-general-modal');
    if (modalWindow.length) {
        resizeWindow();
        $(window).resize(function () {
            resizeWindow();
        });
    }
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../../node_modules/css-modal/modal.js":68,"loglevel":70}],25:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');
var bladeWidth = $(window).width();
var tabDynamicColor= $(".vtab-nav").attr("data-selected-bg");

if ($('.component-giga-smart-blade').length) {
	giagSmartChange();
}

$( window ).resize(function() {
if ($(this).width() !== bladeWidth) {
giagSmartChange();
 $('.vtab-content').siblings('.vtab-visible').removeClass('vtab-visible');
 $('a.vtab-navtitle').siblings('.vtab-selected').removeClass('vtab-selected').removeClass(tabDynamicColor);
	$('.vtab .vtab-content.fvtab-content').addClass('vtab-visible');
     $('.vtab .vtab-nav a.fvtab-navtitle').addClass('vtab-selected').addClass(tabDynamicColor);
	  $('.mtab-content').siblings('.mtab-visible').removeClass('mtab-visible');
	  $("select.mnav-select").prop("selectedIndex", 0)
	  $('.vtab .mtab-content.fmtab-content').addClass('mtab-visible');
bladeWidth = $(this).width();
}

});

	function giagSmartChange(){
if (window.matchMedia("(min-width: 768px)").matches) {
    $(function() {
     $('.vtab .vtab-content.fvtab-content').addClass('vtab-visible');
     $('.vtab .vtab-nav a.fvtab-navtitle').addClass('vtab-selected').addClass(tabDynamicColor);
        $('.vtab .vtab-nav a.vtab-navtitle ').on('click',function() {
               show_content($(this).attr("id"));
             });

    });
function show_content(idVal) {
 $('.vtab-content#'+idVal).siblings('.vtab-visible').removeClass('vtab-visible');
	$('.vtab .vtab-content#'+idVal).addClass('vtab-visible');
	$('a.vtab-navtitle#'+idVal).siblings('.vtab-selected').removeClass('vtab-selected').removeClass(tabDynamicColor);
    $('.vtab .vtab-nav a.vtab-navtitle#'+idVal).addClass('vtab-selected').addClass(tabDynamicColor);
}
}
  else {
 $(function() {
     $('.vtab .mtab-content.fmtab-content').addClass('mtab-visible');
        $('.mnav select').on('change',function() {
               show_mcontent($(this).children("option:selected").attr("id"));
             });

    });
    function show_mcontent(idVal) {
	 $('.mtab-content#'+idVal).siblings('.mtab-visible').removeClass('mtab-visible');
	$('.vtab .mtab-content#'+idVal).addClass('mtab-visible');
  }
	}
	}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],26:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


$('.component-giga-smart-cube').hover(giagCubeHover);

$( window ).resize(function() {
	$('section.component-giga-smart-cube .gigasmartcube-description').removeAttr('style');
});

function giagCubeHover(e) {
    if (window.matchMedia("(min-width: 992px)").matches) {
        if (e.type === "mouseenter") {
             $(this).children('section.component-giga-smart-cube .gigasmartcube-description').stop().slideDown(300);
        } else if (e.type === "mouseleave") {
            $(this).children('.component-giga-smart-cube .gigasmartcube-description').stop().slideUp(200);
        }
    }
}


}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],27:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');
var changeImageSource;

if ($('.component-global-navigation').length) {
    $(function() {
changeImageSource= $('.search-trigger-desktop img').attr('src');
        init();
    });
}

function changeSource(){
var source = "/content/dam/website-assets/icons/close-icon.svg";
if(source == ($('.search-trigger-desktop img').attr('src')) ){
$('.search-trigger-desktop img').attr('src', changeImageSource);}
else{
$('.search-trigger-desktop img').attr('src', source);
}
}

function closeSearch(){
if($('.utility-nav .search-trigger-desktop').hasClass('active-search')){
$(".active-search").parent().css({ "border-bottom":"" ,"padding-bottom":"" } );
    $('.remove-close').parent().removeClass('show-sprite-search').addClass('sprite-image-search');
    $('.remove-close').css("display", "none");
             $('.search-trigger-desktop').toggleClass('active-search');
             changeSource();
      $('.desktop-search-box').slideToggle();
   }

}

function closeSubmenu(){
if($('.utility-nav .lang-options').hasClass('active-utility-item')){
$(".active-utility-item").parent().css({ "border-bottom":"" ,"padding-bottom":"" } );
    $('.utility-submenu').slideUp();
    $('.lang-options').removeClass('active-utility-item');
    }
}

$.fn.bindFirst = function(name, fn) {
    this.on(name, fn);
    this.each(function() {
        var handlers = $._data(this, 'events')[name.split('.')[0]];
        var handler = handlers.pop();
        handlers.splice(0, 0, handler);
    });
};

$( window ).resize(function() {
    if($('.mp-pushed').length < 1){
        if($(window).width() > 380){
          $('#mp-menu').width(360);
        }else{
          $('#mp-menu').width($(window).width() - 40);
        }
    }
});

    $('body').on('click','.lang-options',function(){
          $(this).parent('div').siblings('.lang-container').css({ "border-bottom":"" ,"padding-bottom":"" }).find('.utility-submenu').slideUp();
          $(this).parent('div').siblings('.lang-container').find('.active-utility-item').removeClass('active-utility-item');
          $(this).siblings('.utility-submenu').slideToggle();
           $(this).toggleClass('active-utility-item');
            if($(".lang-container").find( ".active-utility-item").length > 0){
               $(this).parent().css({ "border-bottom":"5px solid #ff6c00" ,"padding-bottom":"15px" } );
            }
            else{
          $(this).parent().css({ "border-bottom":"" ,"padding-bottom":"" } );
            }
			if($(".nav-container").find( ".active-utility-item").length > 0){
               $(this).parent().css({ "border-bottom":"5px solid #ff6c00" ,"padding-bottom":"11px" } );
            }
            else{
          $(this).parent().css({ "border-bottom":"" ,"padding-bottom":"" } );
            }

			        });



$(document).on('click', function(event){
  if (!$(event.target).closest('.lang-options,.utility-submenu').length) {
   closeSubmenu();

  }

   if (!$(event.target).closest('.desktop-search-box, .search-bar-desktop ').length) {
   closeSearch();
   }

});


$('.toggle-menu').on('touchend, click',function(){
  $(this).parent('li').find('.teir-options').slideToggle();
  $(this).toggleClass('expanded');
  $(this).attr('aria-expanded', $(this).attr('aria-expanded') == 'false' ? 'true' : 'false');
});


$(document).on('touchmove',function(e){
    if($('.mp-pushed').length){
        if (!$(e.target).parents('#mp-menu')[0]) {
            e.preventDefault();
        }
    }
});

function init() {
    console.log('Initializing GlobalNavigation');

    $(window).scroll(function() {
      if ($(this).scrollTop() > 200) {
      $('.global-navigation').addClass('shrink');
      }
      else if ($(this).scrollTop() < 200) {
         $('.global-navigation').removeClass('shrink');
         }
      });

    if($(window).width() > 380){
      $('#mp-menu').width(360);
    }else{
      $('#mp-menu').width($(window).width() - 40);
    }

    $('#mp-menu').pushMenu({
        type: 'overlap',
        levelSpacing: 0,
        backClass: 'mp-back',
        trigger: '.mobile-trigger',
        pusher: '.site-wrapper',
        scrollTop: false
    });


  $(".mp-back").bindFirst('click', function() {
    if($(this).parent().hasClass("mp-level-open")){
      $(this).parent().addClass("slide-priority");
      var $currentMenu = $(this).parent();
      setTimeout(function(){
          $currentMenu.removeClass("slide-priority");
      },500);
    }
  });

  if (typeof localStorage === 'object') {
      try {
        if(window.sessionStorage.getItem('animateLogo') === 'false') {
          $("#logo-ani").removeClass('hoverPlay').addClass('stoppedAnimation');
        } else {
          $("#logo-ani").removeClass('stoppedAnimation').addClass('hoverPlay');
          window.sessionStorage.setItem('animateLogo', 'false');
        }
      } catch (e) {
          console.log('Your web browser does not support storing settings locally. In Safari, the most common cause of this is using "Private Browsing Mode". Some settings may not save or some features may not work properly for you.');
      }
  }

  $("#hero-logo-container").hover(
    function() {
        $("#hero-logo-ani").removeClass('stoppedAnimation').addClass('hoverPlay');
    }, function() {
        $("#hero-logo-ani").removeClass('hoverPlay').addClass('stoppedAnimation');
    }
  );

  $('#navbar-menu-toggle').click(function() {
    $(".mobile-menu").toggleClass("reveal");
  });




$('body').on('click','.search-trigger-desktop',function(event){
  event.stopPropagation();
    event.preventDefault();
    closeSubmenu();
    $(this).toggleClass('active-search');
     if($(".lang-container").find( ".active-search").length > 0){
		 $(this).removeClass('sprite-image-search');
		$(this).find('.remove-close').css("display", "inline-block");
                   $(this).parent().css({ "border-bottom":"5px solid #ff6c00" ,"padding-bottom":"8px" } );
                }
                else{
              $(this).parent().css({ "border-bottom":"" ,"padding-bottom":"" } );
			   $('.utility-nav .sprite').find('.remove-close').css("display", "none");
				$('.utility-nav').find('.search-trigger-desktop').addClass('sprite-image-search');
                }
    changeSource();
    $('.desktop-search-box').slideToggle();
   $('.search-bar-desktop').find("input").focus();
  });

$('body').on('click','.desktop-search-trigger',function(event){
    var searchQuery = $('#searchInputDesktop').val();
    var searchResultsURL = $('#searchInputDesktop').data('path');
    window.location.href = searchResultsURL+'.html?#q='+searchQuery;
  });

  $(window).scroll(function(event){
    closeSearch();
    });

  $('#searchInputDesktop').on('keyup',function(e){
    if (e.keyCode === 13){
   var searchQuery = $('#searchInputDesktop').val();
      var searchResultsURL = $('#searchInputDesktop').data('path');
      window.location.href = searchResultsURL+'.html?#q='+searchQuery;
    }
    if (e.keyCode === 27){
     closeSearch();
    }

    });



  $('body').on('click','.search-trigger-mobile',function(event){
    $(this).toggleClass('active');
    $('.search-bar-mobile').toggle();
    $('.search-bar-mobile').find("input").focus();
	 if($('.search-trigger-mobile').hasClass('active')){
			$('.sprite-mobile-search').hide();
      }else{
          $('.sprite-mobile-search').show();
      }
  });

  $('body').on('click','.mobile-search-trigger',function(event){
    var searchQuery = $('#searchInputMobile').val();
    var searchResultsURL = $('#searchInputMobile').data('path');
    window.location.href = searchResultsURL+'.html?#q='+searchQuery;
  });

  $('#searchInputMobile').on('input', function() {
      var searchResultsURL = $('#searchInput').data('path');
      $("#searchInputMobileForm").attr("action", searchResultsURL+'.html?#q='+$('#searchInputMobile').val());
  });


$(window).scroll(function(event){
    if($('.mobile-btns .search-trigger-mobile').hasClass('active')){
             $('.search-trigger-mobile').toggleClass('active');
     $('.search-bar-mobile').toggle();
   }
    });

  var menuIndex = 0, menuIndexOld;
  var touchPrevious;

  var opts = {
    timeout: 500,
    sensitivity: 7,
    interval: 50
  };


  $(".desktop-nav-top>a").hoverIntent( function(event) {
    menuIndex = $(this).attr("data-index");
    if($('.desktop-nav-top a').hasClass('active')){
      hideNav(touchPrevious);
    }
    showNav(menuIndex);
  }, function(event) {
    $("body").on("mouseover", function(event) {
      if(!$(event.target).closest('.desktop-nav-top>a,.nav-dropdown,.component-sub-menu-wrapper').length) {
        hideNav(touchPrevious);
      }
    });
  });


  $(".desktop-nav-top>a").on("touchstart", function(e) {
    e.stopPropagation();
    e.preventDefault();
    if(!$(this).hasClass('active')){
      if($('.desktop-nav-top a').hasClass('active')){
        hideNav(touchPrevious);
      }
      menuIndex = $(this).attr("data-index");
      showNav(menuIndex);
    } else {
      hideNav(touchPrevious);
    }
  });

  function showNav(menuIndex){
    menuIndexOld = menuIndex;
    closeSearch();
    closeSubmenu();
    $("a[data-index="+menuIndex+"]").addClass("active");
    $(".nav-dropdown[data-index="+menuIndex+"]").css({'zIndex':9});
    $(".component-sub-menu-wrapper[data-index="+menuIndex+"] .nav-dropdown > .container").slideDown();
    touchPrevious = menuIndex;
  }

  function hideNav(touchPrevious){
    $("a[data-index="+touchPrevious+"]").removeClass("active");
    $(".nav-dropdown[data-index="+touchPrevious+"]").css("zIndex",0);
    $(".component-sub-menu-wrapper[data-index="+touchPrevious+"]  .nav-dropdown > .container").hide();
    menuIndexOld = null;
  }

  $(document).keyup(function(e) {
      if (e.keyCode === 27){
        if($('.search-bar').hasClass("reveal")){
          $('.search-bar').removeClass("reveal");
          $('.search-bar').find("input").val("");
        }
        $(".search-container, .search-results").removeClass("active");
        $("body").removeClass("fixed");
      }
      if (e.keyCode === 9) {
        $(':focus').addClass("accessibility-focus");
        $(".nav-dropdown").removeClass("active");
        $(".nav-background").removeClass("active");
        $("*[data-nav-trigger]").removeClass("active");
        if($('.component-sub-menu-block a:focus').length){
          $(".nav-dropdown").css("zIndex",0);
          $(".nav-background").css("zIndex",0);
          var menuIndex = $('.component-sub-menu-block a:focus').closest('.nav-dropdown').attr('data-index');
          $(".nav-dropdown[data-index="+menuIndex+"]").css("zIndex",2);
          $(".nav-background[data-index="+menuIndex+"]").css("zIndex",1);
          showNav(menuIndex);
        }
      }
  });
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],28:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-have-questions').length) {
    $(function() {
        init();
    });
}

function init() {
    $.getScript("https://app-abm.marketo.com/js/forms2/js/forms2.min.js", function(){
     MktoForms2.loadForm("//app-abm.marketo.com", "892-WER-078", $(".component-have-questions .have-questions-container .have-questions-form form").attr("id").replace("mktoForm_",""), function (form){
       form.onSubmit(function(){
       if(Cookies.get('UTM_Source') !== null ||Cookies.get('UTM_Medium') !== null ||Cookies.get('UTM_Campaign') !== null ||Cookies.get('UTM_Term') !== null ||Cookies.get('UTM_content') !== null || Cookies.get('UTM_cid') !==null){
       Cookies.remove('UTM_Source');
       Cookies.remove('UTM_Medium');
       Cookies.remove('UTM_Campaign');
       Cookies.remove('UTM_Term');
       Cookies.remove('UTM_content');
       Cookies.remove('UTM_cid');
  }
 });
});
    });

}


}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],29:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-hero-banner').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing HeroBanner');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],30:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-horizontal-resource-card').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing HorizontalResourceCard');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],31:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-html').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Html');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],32:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-image').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Image');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],33:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-jump-navigation').length) {
    $(function() {
        init();
    });
}

function init() {
	log.trace('Initializing JumpNavigation');
	 var x= $('.component-jump-navigation').offset().top;
	     $(window).scroll(function() {
			if ($(this).scrollTop() > x) {

			$('.component-jump-navigation').addClass('sticky');
			$('.simple-navigation').addClass('absolute');
			$('.component-simple-navigation').addClass('absolute');
			}
			else if ($(this).scrollTop() < x) {
				$('.component-jump-navigation').removeClass('sticky');
				$('.simple-navigation').removeClass('absolute');
				$('.component-simple-navigation').removeClass('absolute');
				}
			});
}


function jump(id) {
    $('html, body').animate({
        scrollTop: $('#'+id).offset().top
    }, 1500);
}


$('#jump-arrow').click(function(){
	if($(window).width()>415)
	{
    $('.component-jump-navigation .jump-main').addClass('hide');
	 $('.component-jump-navigation .arrow-open').removeClass('hide');
	}
	if($(window).width()<=415)
			{

					 if($('.component-jump-navigation .jump-list').hasClass('hide'))
    				{
				 $('.component-jump-navigation .jump-head .mp-downarrow').attr('class','mp-downarrow hide');
					$('.component-jump-navigation .jump-head .mp-uparrow').attr('class','mp-uparrow');
				 $('.component-jump-navigation .jump-list').removeClass('hide');
    				}
    				else{
    					$('.component-jump-navigation .jump-list').addClass('hide');
    					$('.component-jump-navigation .jump-head .mp-downarrow').attr('class','mp-downarrow');
    					$('.component-jump-navigation .jump-head .mp-uparrow').attr('class','mp-uparrow hide');	

    				    				}
			}

});

$('#arrow-open').click(function(){
		if($(window).width()>=415)
			{
    			$('.component-jump-navigation .jump-main').removeClass('hide');
	 			$('.component-jump-navigation .arrow-open').addClass('hide');
			}
});


$(document).ready(function(){
	if($(window).width()<=415)
    {
$('.component-jump-navigation .jump-main').removeClass('hide');
$('.component-jump-navigation .jump-list').addClass('hide');
$('.component-jump-navigation .jump-head .left-arrow').attr('class','left-arrow hide');
$('.component-jump-navigation .jump-head .mp-downarrow').attr('class','mp-downarrow');
    }
});
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],34:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-logo-tile').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing logo tile');


}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],35:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-mega-banner').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing MegaBanner');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],36:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-multi-tabs').length) {
     $(function() {
        init();
        $('.responsive-tabs').responsiveTabs({
            accordionOn: ['xs']
           });
    });

}
function orangeBarLoad(){

        $(window).load(function(){

         $(".nav-tabs li:nth-child(2)").addClass("active");

   var $magicLine = $("#magic-line");
       $("#magic-line").css('left',$(".nav-tabs li:nth-child(2)").position().left);

$(".nav-tabs li:nth-child(2)").each(function(i, obj) {

      $(obj).siblings("#magic-line").css('left',$(obj).position().left).width($(obj).find("a").width());
        });
        });
    }
function init() {
  if ($(".tab-pane").hasClass("max-height")){
    const mq = window.matchMedia( "(min-width: 768px)" );

      var heights = $(".tab-pane").map(function ()
    {
        return $(this).height();
    }).get();



   var maxHeight = Math.max.apply(null, heights);



    if (mq.matches) {

       $('.tab-pane').height(maxHeight);

    }
	}

    $(".tab-pane:first-child").addClass("active");

    orangeBarLoad();

 }


    ! function($) {
       "use strict";
       var a = {
           accordionOn: ["xs"]
       };
       $.fn.responsiveTabs = function(e) {


           var t = $.extend({}, a, e),
               s = "";
           return $.each(t.accordionOn, function(a, e) {
               s += " accordion-" + e
           }), this.each(function() {
               var a = $(this),
                   e = a.find("> li > a"),
                   t = $(e.first().attr("href")).parent(".tab-content"),
                   i = t.children(".tab-pane");
               a.add(t).wrapAll('<div class="responsive-tabs-container" />');
               var n = a.parent(".responsive-tabs-container");
               n.addClass(s), e.each(function(a) {
                   var t = $(this),
                       s = t.attr("href"),
                       i = "",
                       n = "",
                       r = "";
                   t.parent("li").hasClass("active") && (i = " active"), 0 === a && (n = " first"), a === e.length - 1 && (r = " last"), t.clone(!1).addClass("accordion-link" + i + n + r).insertBefore(s)
               });
               var r = t.children(".accordion-link");
               e.on("click", function(a) {
    			                a.preventDefault();
                   var e = $(this),
                       s = e.parent("li"),
                       n = s.siblings("li"),
                       c = e.attr("href"),
                       l = t.children('a[href="' + c + '"]');
                   s.hasClass("active") || (s.addClass("active"), n.removeClass("active"),i.hide().removeClass("active"), $(c).fadeIn(500).addClass('active') , r.removeClass("active"), l.addClass("active"))
               }), r.on("click", function(t) {
    			                   t.preventDefault();
                   var s = $(this),
                       n = s.attr("href"),
                       c = a.find('li > a[href="' + n + '"]').parent("li");

              activeCheck() || (r.removeClass("active"), s.addClass("active"), i.removeClass("active"), $(n).addClass("active"), e.parent("li").removeClass("active"), c.addClass("active"))

    function activeCheck() {
     if(s.hasClass("active"))
    					{
    					s.removeClass("active");
    					i.removeClass("active");
    					return true;
    					}
    					if(!s.hasClass("active")){
    					return false;
    					}


    				}
               })
           })
       }
    }(jQuery);

 function changeBackground(link,pos) {
   	 $(".multi-tabs .component-background:first").css('background-image', 'url(' + link + ')');

   	  if (window.matchMedia('(min-width: 768px)').matches)
                         {
                             $(".multi-tabs .component-background:first").css('background-position', pos);
                             $(".multi-tabs .component-background:first").css('background-size', 'cover');
                         }
   	}

    jQuery(document).ready(function(){
	$(".accordion-link.first").addClass("active"); 
    var position = $('#tab1').attr('data-value');
       var x=$('#tab1').attr('attr');
		if(x!=null  && x.length != 0 ){
                changeBackground(x,position);
		}
   });

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],37:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-navbar').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Navbar');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],38:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-page-list').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing PageList');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],39:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-promo').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing promo');


    $('.promo:has(.border)').css('border', '1px solid #ddd');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],40:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-quotes').length) {

}



}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],41:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-resource-logo').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Resourcelogo');


    $('.resource-logo:has(.border)').css('border', '1px solid #ddd');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],42:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-resource-card').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing ResourceCard');


    $('.resource-card:has(.border)').css('border', '1px solid #ddd');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],43:[function(require,module,exports){
'use strict';





require( 'datatables' )();


if ($('.component-grid-filter').length) {
    $(function() {
        init();
    });
}

function init(){
 	var eventListLimit = 12;
 	var activeFilters = [];

   	$('.agendaDay').hide();
 	$(document).ready(function(){
 		$('.date-btn').first().addClass('activeDateBtn'); 
 		$('.agendaDay').first().show();
	        $('.agenda-carousel').slick({
	            dots: true,
	            infinite: false,
	            speed: 300,
	            slidesToShow: 1,
	            variableWidth: false,
	            mobileFirst: true,
	            centerMode: true,
	            centerPadding: '0px',
	            adaptiveHeight: true
	        });
            if(window.location.href.split("#")[1]){
                activeFilters=window.location.href.split("#")[1].split("&");
            }
	        filterDisplay();

            $($(".select-dropdown").get().reverse()).each(function( index ) {
               $(this).css('zIndex', index);
            });    

            $(".reseller-content").each(function() {
                $(this).click(
                    function(event) {
                        event.stopImmediatePropagation();
                        event.preventDefault();
                        var url = $(this).attr('href')+"#";
                        for(var i=0;i < activeFilters.length;i++){
                            url=url+activeFilters[i];
                            if(i < activeFilters.length - 1){
                                url=url+"&";
                            }
                        }
                        window.location.href = url;
                    }
                ); 
            });    
            $('.zoomTitle').css('display','-webkit-box');
   	});


    $('.btn-line-back').click(
        function(event) {
            event.stopImmediatePropagation();
            event.preventDefault();
            var url = $(this).attr('href');
            if(window.location.href.split("#")[1]){
                url = $(this).attr('href')+"#"+window.location.href.split("#")[1];
            }
            window.location.href = url;
        }
    ); 

    $('.paramtest').click(
        function(event) {
            var url = window.location.href+"?location/north-america&type/breakfast";    
            window.location.href = url;
        }
    ); 

	$('.date-btn').click(
		function(ev) {
	   		$('.agendaDay').hide();
	   	 	$('.date-btn').removeClass('activeDateBtn');
	   	 	$(this).addClass('activeDateBtn');
			$("#"+$(this).data("daykey")).show();
		}
	); 

	$('.load-more-bar .btn').click(
		function(ev) {
			eventListLimit = eventListLimit + 12;
			filterDisplay();
		}
	); 

	$('.zero-results [data-component-name=cta-button] .btn').click(function(ev) {

		$( ".select-dropdown" ).each(function() {
			$(this).attr('data-selected-value', '');
			$(this).find('span').first().html($(this).attr('data-placeholder-text'));
			$(this).removeClass('value-selected');
		});

		activeFilters=[];
		filterDisplay();
	 });

        function SelectDropDown(el) {
            this.dd = el;
            this.placeholder = this.dd.children('span');
            this.opts = this.dd.find('ul.dropdown > li');
            this.val = '';
            this.index = -1;
            this.initEvents();
            this.placeholderText = '';
        }

        SelectDropDown.prototype = {
            initEvents : function() {
                var obj = this;

                obj.placeholder.html(obj.dd.attr('data-placeholder-text'));

                if(window.location.href.split("#")[1]){
                        $(".select-dropdown").each(function(index) {
                            var filterData = $(this).find(".dropdown li a").first().attr("data-value");
                            for(var i=0;i < activeFilters.length;i++){
                                if(filterData.split("/")[filterData.split("/").length - 2] == activeFilters[i].split("/")[filterData.split("/").length - 2]){
                                    var displayStr = activeFilters[i].split("/")[filterData.split("/").length - 1].replace("-", " ");
                                    $(this).find(".filter-label").html("All <strong>"+displayStr+"</strong>");
                                    $(this).attr('data-selected-value', activeFilters[i]);
                                    $(this).addClass('value-selected');
                                }
                            }
                        }); 
                    }

                                    obj.dd.on('click', 'ul.dropdown', function(e){
                    e.preventDefault();
                    $(this).parent('.select-dropdown').toggleClass('active');
                    return false;
                });

                obj.dd.on('click', '.open-dropdown', function(e){
                    e.preventDefault();
                    closeAllMenu();
                    $(this).parent('.select-dropdown').toggleClass('active');
                    return false;
                });

                obj.dd.on('click', '.close-dropdown', function(e){
                    e.preventDefault();
                    $(this).parent('.select-dropdown').toggleClass('active');
                    return false;
                });

                obj.dd.on('click', '.reset-value', function(e){
                    e.preventDefault();
                    $(this).parent('.select-dropdown').removeClass('value-selected');

                    obj.opts.removeClass('selected');
                    obj.placeholder.html(obj.dd.attr('data-placeholder-text'));
                    var filterToClear = $(this).parent('.select-dropdown').attr('data-selected-value');
                    activeFilters = [];
		    		var myHash ="";
					$( ".select-dropdown" ).each(function() {
		    			if($(this).attr('data-selected-value') != filterToClear && $(this).attr('data-selected-value') != ""){
		    				activeFilters.push($(this).attr('data-selected-value'));
                            myHash=myHash+$(this).attr('data-selected-value')+"&";
		    			}
					});
                    obj.dd.attr('data-selected-value', '');
                    window.location.hash = myHash;
					filterDisplay();
                    return false;
                });

		        obj.opts.on('click',function(){
		            var opt = $(this);
		            obj.val = opt.text();
		            obj.index = opt.index();
					obj.placeholder.html("All <strong>"+obj.val+"</strong>");
		           	$(obj.dd).attr('data-selected-value', $(opt).find('a').data('value'));
                    $(obj.dd).addClass('value-selected');
					activeFilters=[];
                    var myHash="";
					$( ".select-dropdown" ).each(function() {
						if($(this).attr('data-selected-value') != ""){
							activeFilters.push($(this).attr('data-selected-value'));
                            myHash=myHash+$(this).attr('data-selected-value')+"&";
						}
					});
                    window.location.hash = myHash;
					filterDisplay();
		        });
            },
            getValue : function() {
                return this.attr('data-value');
            },
            getIndex : function() {
                return this.index;
            }
        }

	$(function() {
		var dropDowns = [];
        $('.select-dropdown').each( function(){
            var filterDropDown = new SelectDropDown( $(this) );
        });

		$(document).click(function() {
			closeAllMenu();
		});		
	});

    function filterDisplay(){
    	closeAllMenu();
        $(".featured-primary, .featured-secondary").removeClass("not-filtered");
        if(activeFilters.length < 1 || activeFilters[0] == "/"){
            $(".featured-primary, .featured-secondary").addClass("not-filtered");
        }

        var showIndex = 0;
		$(".data-table-row, [class*='-results-cell']").hide();

    	$("[class*='-results-cell'], .data-table-row").each(function(){
    		var match = 0;
    		for(var i = 0; i < activeFilters.length; i++){
    			if($(this).attr('data-tags') && $(this).attr('data-tags').indexOf(activeFilters[i]) > -1){
    				match++;
    			}
    		}
    		if((match == activeFilters.length) && ((showIndex) < (eventListLimit))){
    			$(this).show();
    			showIndex++;
    		}



									    	});
    	showIndex = 0;
		var rcount =0;
    	$("[class*='-results-cell']").each(function(){
    		var match = 0;
    		for(var i = 0; i < activeFilters.length; i++){
    			if($(this).attr('data-tags') && $(this).attr('data-tags').indexOf(activeFilters[i]) > -1){
    				match++;
    			}
    		}
    		if((match == activeFilters.length) && ((showIndex) < (eventListLimit))){
    			$(this).show();
    			showIndex++;
    		}

						 if((match == activeFilters.length)){
              rcount++;
            }
    	});
    	if(showIndex == 0){
    		$('.zero-results').show();
    	}else{
    		$('.zero-results').hide();
    	}
		if(eventListLimit < ($("[class*='-results-cell']").length)&&eventListLimit < rcount){
			$('.load-more-bar').show();
		}else{
			$('.load-more-bar').hide();
		}
		  if(rcount==1)
            $('h2.count').text(rcount+' Resource');
          else
		    $('h2.count').text(rcount+' Resources');

		         setTimeout(closeAllMenu, 100);
    }	

 	function closeAllMenu(e){
 		$('.select-dropdown').removeClass('active');
 	}

 };

},{"datatables":69}],44:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"dup":41,"loglevel":70}],45:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-responsive-layout').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Responsive Layout');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],46:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');

if ($('.component-rss-feeds').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing RssFeeds');

      var datafeed = $("#divRss").attr("data-feed");

   var feedJSON = $.parseJSON(datafeed);
    $('#divRss').FeedEk({
    	FeedUrl:feedJSON['feedurl'],
    	MaxCount : feedJSON['feedcount'],
    	FeedColor : feedJSON['feedColor']
    	});
}

(function ($) {
    $.fn.FeedEk = function (opt) {
        var def = $.extend({
            MaxCount: 5,
            ShowDesc: true,
            ShowPubDate: true,
            DescCharacterLimit: 150,
            TitleLinkTarget: "_blank",
            DateFormat: "",
            DateFormatLang:"en"
        }, opt);

        var id = $(this).attr("id"), i, s = "", dt;
        $("#" + id).empty();
        if (def.FeedUrl == undefined)  return;



        $.ajax({
        			url: "/bin/gigamon/services/rss/rssFeedServlet.url-"+ def.FeedUrl + ".maxCount-" + def.MaxCount+".json",
        			dataType: "json",
        			success: function (result) {
        				$("#" + id).empty();
        				$.each(result, function (e, itm) {

        					s += '<li class="'+def.FeedColor+'">';
        					if (def.ShowPubDate) {
        						dt = new Date(itm.date);
        						s += '<div class="itemDate '+def.FeedColor+'">';
        						if ($.trim(def.DateFormat).length > 0) {
        							try {
        								moment.lang(def.DateFormatLang);
        								s += moment(dt).format(def.DateFormat);
        							}
        							catch (e) { s += dt.toLocaleDateString(); }
        						}
        						else {
        							s += dt.toLocaleDateString();
        						}
        						s += '</div>';
        					}
							s += '<div class="itemTitle"><a class="'+def.FeedColor+'" href="' + itm.link + '" target="' + def.TitleLinkTarget + '" >' + itm.title + '</a></div>';
        					if (def.ShowDesc) {
                           var completedesc = itm.description;
                            s += '<div class="itemContent '+def.FeedColor+'">';

        						if (def.DescCharacterLimit > 0 && itm.description.length > def.DescCharacterLimit) {
        							s += itm.description.substring(0, completedesc.indexOf("</p>")) + '</p>' ;
        						}
        						else {

        							s += itm.description;
        						}
        						s += '</div></li>';
        					}
        				});
        				$("#" + id).append('<ul class="feedEkList">' + s + '</ul>');
        			},
        			error: function() {
                    	$('#divRss').html('<h3>Not able to fetch Rss feed now</h3>');
                     }
        		});
        	};
        })(jQuery);

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],47:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-search').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Search');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],48:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-simple-navigation').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing SimpleNavigation');

        $(window).scroll(function() {
		if ($(this).scrollTop() > 200) {
		$('.component-simple-navigation').addClass('showbtn');
		}
		else if ($(this).scrollTop() < 200) {
			$('.component-simple-navigation').removeClass('showbtn');
			}
		});
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],49:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-sticky-footer').length) {
    $(function() {
        init();
    });
}


function init() {
    $(window).scroll(function() {

    			if ($(this).scrollTop() > 50) {
			$('.component-sticky-footer').addClass('show');
		} else if ($(this).scrollTop() < 50) {
			$('.component-sticky-footer').removeClass('show');
		}
		 if($(window).scrollTop()+ $(window).height() >= $(document).height())
			{
				$('.component-sticky-footer').removeClass('show');	
			}

			});
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],50:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-stickynav').length) {
    $(function() {
        init();

		    });
}
function stickyload(){
$( window ).load(function() {
var dataid = location.hash;
$('html, body').animate({
    scrollTop: ($('section[data-deeplink="' + dataid.substring(1) + '"]').offset().top- ($('.global-navigation.shrink,.global-navigation').height()+$(".sticky-header").height()+60))
},200);
});
}


function init() {   
 log.trace('Initializing Stickynav');
 if(location.hash.length>0){stickyload(); }

var y = $("#myHeader").offset().top ;
onScrollHandle();
 if( $(window).scrollTop() + $('.global-navigation.shrink,.global-navigation').height() >= y ) {
		$("#myHeader").addClass('sticky');
		if($('.stickynav li:first a').hasClass('active'))
                			$('.stickynav').css('margin-top',$(".sticky-header").height());
			}
   else {
   $("#myHeader").removeClass('sticky');
   if($('.stickynav li:first a').hasClass('active'))
      			$('.stickynav').css('margin-top','0');
			$("#sticky-magic-line").width($(".sticky-header ul li:first-child a").width());
  }

       $(".sticky-header li a").click(function(e){
         var current = $(this).attr("data-test");              
	var new_position = $('section[data-deeplink="' + current + '"]').offset();
		 $('html, body').stop().animate({ scrollTop: new_position.top-($('.global-navigation.shrink,.global-navigation').height()+$(".sticky-header").height())}, 400);
	e.preventDefault();
  });


	       $(window).scroll(function() {
		   onScrollHandle();
  if( $(window).scrollTop() + $('.global-navigation.shrink,.global-navigation').height()>= y ) {
		$("#myHeader").addClass('sticky');
		if($('.stickynav li:first a').hasClass('active'))
        			$('.stickynav').css('margin-top',$(".sticky-header").height());
	}
   else {
   $("#myHeader").removeClass('sticky');
   if($('.stickynav li:first a').hasClass('active'))
   			$('.stickynav').css('margin-top','0');
		$("#sticky-magic-line").width($(".sticky-header ul li:first-child a").width());
  }
});
$( window ).load(function() {
 $(".sticky-header ul li:first-child a").addClass("active");
    $("#sticky-magic-line").width($(".sticky-header ul li:first-child a").width());
	});
}

function onScrollHandle(){
	var scrollDistance = $(window).scrollTop();
	$('section[data-deeplink]').each(function(i) {		
		if ($(this).offset().top-($('.global-navigation.shrink,.global-navigation').height()+$(".sticky-header").height()+25) <= scrollDistance) {	
			$('.sticky-header ul li a.active').removeClass('active');	
			$('.sticky-header ul li a').eq(i).addClass('active');
            $('.sticky-header ul li').eq(i).parent().siblings("#sticky-magic-line").css('left', $('.sticky-header ul li a').eq(i).position().left).width($('.sticky-header ul li a').eq(i).width());
		}
		if(($(this).offset().top - $(window).scrollTop()) < 0) {
			$('.sticky-header ul li a').eq(i).addClass('top');	
		}
		if(($(this).offset().top - $(window).scrollTop()) > 0) {
			$('.sticky-header ul li a.top').eq(i).removeClass('top');	
		}
	});
}



}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],51:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-sub-menu-block').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing SubMenuBlock');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],52:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-sub-menu').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing SubMenu');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],53:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-text-image-two-column').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing TextImageTwoColumn');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],54:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-text-jumbo').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing TextJumbo');
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],55:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');
var wcmmode = require('../wcmmode');

if ($('.thin-blade-container').length) {
    if (!wcmmode.isEdit() && !wcmmode.isDesign() && !wcmmode.isPreview()) {
        $(function() {
            init();
        });
    }
}

function init() {
    log.trace('Initializing thinblade');
        $('.thin-blade-container').slick({
            prevArrow: '<button class="custom-prev" type="button"><svg height="40" viewBox="0 0 24 40" width="24" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><path d="m0 0 15.6498538 16-15.6498538 16" stroke="#121b1f" stroke-width="2" transform="matrix(-1 0 0 1 20 4)"/><path d="m0 0h24v40h-24z"/><path d="m0 0h24v40h-24z"/></g></svg></button>',
            nextArrow: '<button class="custom-next" type="button"><svg height="40" viewBox="0 0 24 40" width="24" xmlns="http://www.w3.org/2000/svg"><path d="m0 0 15.6498538 16-15.6498538 16" fill="none" stroke="#121b1f" stroke-width="2" transform="translate(4 4)"/></svg></button>',
             centerMode: true,
              variableWidth: false,
              centerPadding: '0px',
              responsive: [
                     {
                       breakpoint: 420,
                       settings: {
                         arrows: true,
                         centerPadding: '0px',
                         slidesToShow: 1,
                         slidesToScroll: 1,
                         dots: false
                       }
                     },
					 {
                      breakpoint: 769,
                      settings: {
                        arrows: true,
                        centerPadding: '0px',
                          slidesToShow: 1,
                        slidesToScroll: 1,
                        dots: false
                      }
                    }
                   ]
            });
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../wcmmode":64,"loglevel":70}],56:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-tiles').length) {
    $(function() {
        init();
    });
}

function init() {
    log.trace('Initializing Tiles');
    $('.component-tiles').parent().css({"padding-left": "0px", "padding-right": "0px"});
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],57:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-twitter-feed').length) {
    $(function() {
        loadTwitterFeed();
    });
}

function loadTwitterFeed() {

    !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = /^http:/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + "://platform.twitter.com/widgets.js"; fjs.parentNode.insertBefore(js, fjs); } } (document, "script", "twitter-wjs");
    log.debug( "twitter loaded." );
}


}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],58:[function(require,module,exports){
'use strict';



var log = require('loglevel');

if ($('.component-twitter-timeline').length) {
    loadTwitter();
}

function loadTwitter() {

    !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = /^http:/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + "://platform.twitter.com/widgets.js"; fjs.parentNode.insertBefore(js, fjs); } } (document, "script", "twitter-wjs");
    log.debug( "twitter loaded." );
}

},{"loglevel":70}],59:[function(require,module,exports){
(function (global){(function (){
'use strict';



var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');


if ($('.component-video-banner').length) {
    $(function() {
        init();
    });
}



function isInViewport(el){
var elementTop = $(el).offset().top;
var elementBottom = elementTop + $(el).outerHeight();
var viewportTop = $(window).scrollTop();
var viewportBottom = viewportTop + $(window).height();
return elementBottom > viewportTop && elementTop < viewportBottom;
}

function init() {
	$(window).on("scroll", function() {
  $( ".component-video-banner video" ).each(function() {
    if (isInViewport($(this)[0]) && $(this).attr("data-viewport")=="true") {
       $(this)[0].play();    
    }
    else {
    if($(this).attr("data-viewport")=="true"){
		$(this)[0].currentTime=0;
       $(this)[0].pause(); }
    }
  });
});


}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"loglevel":70}],60:[function(require,module,exports){
(function (global){(function (){


var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);
var log = require('loglevel');

var youtube = require('./youtube');
var vimeo = require('./vimeo');
var cssmodal = require( '../general-modal/general-modal' );

if ($('.component-video').length) {
    $(function() {


        $('.component-video').each(function() {
            var $videoComponent = $(this);

            if ($videoComponent.hasClass('youtube')) {
                var videoParms = youtube.gatherVideoParameters($videoComponent);
                log.debug('Creating YouTube player for ', videoParms);
                youtube.createPlayer(videoParms);

            } else if ($videoComponent.hasClass('vimeo')) {
                var videoParms = youtube.gatherVideoParameters($videoComponent);
                log.debug('Creating Vimeo player for ', videoParms);
                vimeo.createPlayer(videoParms);

            } else {
                log.warn('Missing video provider for ', $videoComponent);
            }
        });
    });
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../general-modal/general-modal":24,"./vimeo":62,"./youtube":63,"loglevel":70}],61:[function(require,module,exports){


module.exports = {
    gatherVideoParameters: gatherVideoParameters,
    addPlayer: addPlayer,
    getPlayer: getPlayer
};

var PLAYERS = {};


function gatherVideoParameters($videoElem) {
    if ($videoElem.hasClass('component-video')) {
        if ($videoElem.length) {
            var videoId = $videoElem.attr('data-video-id');
            var videoPlayerId = $videoElem.attr('data-player-id');
            var autoplay = $videoElem.hasClass('autoplay');
            var modal = $videoElem.attr('data-modal');

                        if (videoId && videoPlayerId) {
                return {
                    videoId: videoId,
                    videoPlayerId: videoPlayerId,
                    autoplay: autoplay,
                    modal: modal
                };
            }
        }
    }
    return null;
}


function addPlayer(key, player) {
    var videoPlayerId = (typeof key === 'object') ? key.videoPlayerId : key;

    if (PLAYERS[videoPlayerId]) return;
    PLAYERS[videoPlayerId] = player;
};


function getPlayer(key) {
    var videoPlayerId = (typeof key === 'object') ? key.videoPlayerId : key;

    return PLAYERS[videoPlayerId];
};

},{}],62:[function(require,module,exports){


var log = require('loglevel');

var videoMgr = require('./videoManager');

module.exports = {
    gatherVideoParameters: videoMgr.gatherVideoParameters,
    createPlayer: createPlayer
};


function createPlayer(videoParms) {
    if (!videoParms) return;

    if (videoMgr.getPlayer(videoParms)) return;

    vimeoLoadingThumb(videoParms.videoId);

    var options = {
        id: videoParms.videoId,
        loop: false,
        autoplay: videoParms.autoplay && videoParms.modal === 'false' ? 1 : 0
    };


    var player = new Vimeo.Player(videoParms.videoPlayerId, options);
    attachEvents(player, videoParms);

    videoMgr.addPlayer(videoParms, player);
}

function attachEvents(player, videoParms) {

    player.on('play', function(data) {
        log.debug('Playing video: ', data, videoParms);
    });

    player.on('pause', function(data) {
        log.debug('Pause video: ', data, videoParms);
    });

    player.on('ended', function(data) {
        log.debug('Ended video: ', data, videoParms);
    });

    player.on('loaded', function(data) {
        log.debug('Loaded video: ', data, videoParms);
    });
}

function vimeoLoadingThumb(id){
    $.ajax({
        url: 'http://www.vimeo.com/api/v2/video/' + id + '.json',
        dataType: 'jsonp',
        success: function(data)
        {
            thumbnail = data[0].thumbnail_large;
            var id_img = "#vimeo-" + id;
            $(id_img).attr('src',thumbnail);
        }
    });
}


},{"./videoManager":61,"loglevel":70}],63:[function(require,module,exports){


var Q = require('q');
var log = require('loglevel');

var videoMgr = require('./videoManager');

module.exports = {
    gatherVideoParameters: videoMgr.gatherVideoParameters,
    createPlayer: createPlayer
};

var YOUTUBE_API_URL = "https://www.youtube.com/player_api";
var youtubeReady = Q.defer();

window.onYouTubeIframeAPIReady = function() {
    youtubeReady.resolve();
};

function createPlayer(videoParms) {
    if (!videoParms) return;

    if (videoMgr.getPlayer(videoParms)) return;


    Q.all([loadYoutubeApi(), youtubeReady.promise]).done(function() {
        var player = new YT.Player(videoParms.videoPlayerId, {
            videoId: videoParms.videoId,
            playerApiId: videoParms.videoPlayerId,
            playerVars: {
                autoplay: videoParms.autoplay && videoParms.modal === 'false' ? 1 : 0,
                modestbranding: 1,
                controls: 1,
                showinfo: 0,
                autohide: 1,
				rel: 0,
                color: 'white'
            },
            events: {
                'onStateChange': onPlayerStateChange,
                'onReady': onPlayerReady
            }
        });


        videoMgr.addPlayer(videoParms, player);
    });
}

function onPlayerStateChange(event) {
    if (event && event.target && event.target.getVideoData) {


        if (event.data == 1) {
            log.debug('Playing video: ', event.target.getVideoData());
        }
        if (event.data == 2) {
            log.debug('Pause video: ', event.target.getVideoData());
        }
        if (event.data == 0) {
            log.debug('End video: ', event.target.getVideoData());
        }
    }
}

function onPlayerReady(event) {
    if (event && event.target && event.target.getVideoData) {


        log.debug('Video ready: ', event.target.getVideoData());
    }
}


function loadYoutubeApi() {
    options = {
        dataType: "script",
        cache: true,
        url: YOUTUBE_API_URL
    };
    return  Q(jQuery.ajax(options));
}

},{"./videoManager":61,"loglevel":70,"q":73}],64:[function(require,module,exports){
(function (global){(function (){

var $ = (typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null);

module.exports = {
    isEdit: function() {
        return $('body').hasClass('edit');
    },
    isPreview: function() {
        return $('body').hasClass('preview');
    },
    isDesign: function() {
        return $('body').hasClass('design');
    }
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],65:[function(require,module,exports){


+function ($) {
  'use strict';


  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.7'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') 

    return $(target)
  }



  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse



  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }



  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

},{}],66:[function(require,module,exports){


+function ($) {
  'use strict';


  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.7'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') 
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger($.Event('shown.bs.dropdown', relatedTarget))
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         
    if (e.which == 40 && index < $items.length - 1) index++         
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }



  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown



  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }



  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

},{}],67:[function(require,module,exports){


+function ($) {
  'use strict';


  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false 
  }

  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

},{}],68:[function(require,module,exports){

(function (global, $) {

	'use strict';

	var modal = {

		activeElement: undefined, 
		lastActive: undefined, 
		stackedElements: [], 

		tabbableElements: 'a[href], area[href], input:not([disabled]),' +
			'select:not([disabled]), textarea:not([disabled]),' +
			'button:not([disabled]), iframe, object, embed, [tabindex]:not([tabindex="-1"]),' +
			'[contenteditable]',

		on: function (event, elements, callback) {
			var i = 0;

			if (typeof event !== 'string') {
				throw new Error('Type error: `event` has to be a string');
			}

			if (typeof callback !== 'function') {
				throw new Error('Type error: `callback` has to be a function');
			}

			if (!elements) {
				return;
			}

			if (elements === global || !elements.length) {
				elements = [elements];
			}

			if ($) {
				$(elements).on(event, callback);
			} else {
				for (; i < elements.length; i++) {
					if (elements[i].addEventListener) {
						elements[i].addEventListener(event, callback, false);
					}
				}
			}
		},

		trigger: function (event, modal) {
			var eventTrigger;
			var eventParams = {
				detail: {
					'modal': modal
				}
			};

			if ($) {
				$(document).trigger(event, eventParams);

			} else if (document.createEvent) {
				eventTrigger = document.createEvent('CustomEvent');

				eventTrigger.initCustomEvent(event, false, false, {
					'modal': modal
				});

				document.dispatchEvent(eventTrigger);

			} else {
				eventTrigger = new CustomEvent(event, eventParams);

				document.dispatchEvent(eventTrigger);
			}
		},

		addClass: function (element, className) {
			if (element && !element.className.match(className)) {
				element.className += ' ' + className;
			}
		},

		removeClass: function (element, className) {
			element.className = element.className.replace(className, '').replace('  ', ' ');
		},

		hasClass: function (element, className) {
			return !!element.className.match(className);
		},

		setFocus: function () {
			if (modal.activeElement) {

				modal.lastActive = document.activeElement;

				modal.activeElement.focus();

				modal.keepFocus(modal.activeElement);
			}
		},

		removeFocus: function () {
			if (modal.lastActive) {
				modal.lastActive.focus();
			}
		},

		keepFocus: function (element) {
			var allTabbableElements = [];

			try {
				allTabbableElements = element.querySelectorAll(modal.tabbableElements);
			} catch (ex) {
				return;
			}

			var firstTabbableElement = modal.getFirstElementVisible(allTabbableElements);
			var lastTabbableElement = modal.getLastElementVisible(allTabbableElements);

			var focusHandler = function (event) {
				var keyCode = event.which || event.keyCode;

				if (keyCode !== 9) {
					return;
				}

				event.preventDefault = event.preventDefault || function () {
					event.returnValue = false;
				};

				if (event.target === lastTabbableElement && !event.shiftKey) {
					event.preventDefault();
					firstTabbableElement.focus();

				} else if (event.target === firstTabbableElement && event.shiftKey) {
					event.preventDefault();
					lastTabbableElement.focus();
				}
			};

			modal.on('keydown', element, focusHandler);
		},

		getFirstElementVisible: function (nodeList) {
			var nodeListLength = nodeList.length;

			if (!modal.isElementVisible(nodeList[0])) {
				for (var i = 1; i < nodeListLength - 1; i++) {

					if (modal.isElementVisible(nodeList[i])) {
						return nodeList[i];
					}
				}
			} else {
				return nodeList[0];
			}

			return null;
		},

		getLastElementVisible: function (nodeList) {
			var nodeListLength = nodeList.length;
			var lastTabbableElement = nodeList[nodeListLength - 1];

			if (!modal.isElementVisible(lastTabbableElement)) {
				for (var i = nodeListLength - 1; i >= 0; i--) {

					if (modal.isElementVisible(nodeList[i])) {
						return nodeList[i];
					}
				}
			} else {
				return lastTabbableElement;
			}

			return null;
		},

		isElementVisible: function (element) {
			return !(element.offsetWidth === 0 && element.offsetHeight === 0);
		},

		setActive: function (element) {
			modal.addClass(element, 'is-active');
			modal.activeElement = element;

			modal.activeElement.setAttribute('aria-hidden', 'false');

			modal.setFocus(element.id);

			modal.trigger('cssmodal:show', modal.activeElement);
		},

		unsetActive: function (isStacked, shouldNotBeStacked) {
			modal.removeClass(document.documentElement, 'has-overlay');

			if (modal.activeElement) {
				modal.removeClass(modal.activeElement, 'is-active');

				modal.trigger('cssmodal:hide', modal.activeElement);

				modal.activeElement.setAttribute('aria-hidden', 'true');

				modal.removeFocus();

				if (isStacked && !shouldNotBeStacked) {
					modal.stackModal(modal.activeElement);
				}

				if (!isStacked && modal.stackedElements.length > 0) {
					modal.unstackModal();
				}

				modal.activeElement = null;
			}
		},

		stackModal: function (stackableModal) {
			modal.addClass(stackableModal, 'is-stacked');

			modal.stackedElements.push(modal.activeElement);
		},

		unstackModal: function () {
			var stackedCount = modal.stackedElements.length;
			var lastStacked = modal.stackedElements[stackedCount - 1];

			modal.removeClass(lastStacked, 'is-stacked');

			global.location.hash = lastStacked.id;

			modal.stackedElements.splice(stackedCount - 1, 1);
		},

		mainHandler: function (event, noHash) {
			var hash = global.location.hash.replace('#', '');
			var index = 0;
			var tmp = [];
			var modalElement;
			var modalChild;

			if (noHash) {
				hash = event.currentTarget.getAttribute('href').replace('#', '');
			}

			modalElement = document.getElementById(hash);

			if (hash.indexOf('/') !== -1) {
				tmp = hash.split('/');
				index = tmp.pop();
				hash = tmp.join('/');

				modalElement = document.getElementById(hash);

				if (!modalElement) {
					throw new Error('ReferenceError: element "' + hash + '" does not exist!');
				}

				modalElement.index = (1 * index);
			}

			if (modalElement) {

				try {
					event.preventDefault();
				} catch (ex) {
					event.returnValue = false;
				}

				modalChild = modalElement.children[0];

				if (modalChild && modalChild.className.match(/modal-inner/)) {

					modal.unsetActive(
						!modal.hasClass(modalElement, 'is-active'),
						(modalElement.getAttribute('data-stackable') === 'false')
					);

					modal.addClass(document.documentElement, 'has-overlay');

					modal._currentScrollPositionY = global.scrollY;
					modal._currentScrollPositionX = global.scrollX;

					modal.setActive(modalElement);
					modal.activeElement._noHash = noHash;
				}
			} else {

				modal.unsetActive();
			}

			return true;
		},

		injectIframes: function () {
			var iframes = document.querySelectorAll('[data-iframe-src]');
			var iframe;
			var i = 0;

			for (; i < iframes.length; i++) {
				iframe = document.createElement('iframe');

				iframe.src = iframes[i].getAttribute('data-iframe-src');
				iframe.setAttribute('webkitallowfullscreen', true);
				iframe.setAttribute('mozallowfullscreen', true);
				iframe.setAttribute('allowfullscreen', true);

				iframes[i].appendChild(iframe);
			}
		},

		init: function () {

			this.on('keyup', document, function (event) {
				var hash = global.location.hash.replace('#', '');

				if (event.keyCode === 27) {
					if (modal.activeElement && hash === modal.activeElement.id) {
						global.location.hash = '!';
					} else {
						modal.unsetActive();
					}

					if (modal.lastActive) {
						return false;
					}

					modal.removeFocus();
				}
			}, false);

			this.on('click', document.querySelectorAll('[data-cssmodal-nohash]'), function (event) {
				modal.mainHandler(event, true);
			});

			this.on('click', document.querySelectorAll('.modal-close'), function (event) {
				if (modal.activeElement._noHash){
					modal.mainHandler(event, true);
				}
			});

			this.on('hashchange', global, modal.mainHandler);
			this.on('load', global, modal.mainHandler);

			global.onscroll = global.onmousewheel = function () {
				if (document.documentElement.className.match(/has-overlay/)) {
					global.scrollTo(modal._currentScrollPositionX, modal._currentScrollPositionY);
				}
			};

			modal.injectIframes();
		}
	};


	if (typeof module === 'object' && module && typeof module.exports === 'object') {
		module.exports = modal;

	} else if (typeof define === 'function' && define.amd) {
		define('CSSModal', [], function () {

			if (!global.CustomEvent && !$) {
				throw new Error('This browser doesn\'t support CustomEvent - please include jQuery.');
			}

			modal.init();

			return modal;
		});

	} else if (typeof global === 'object' && typeof global.document === 'object') {
		global.CSSModal = modal;
		modal.init();
	}

}(window, window.jQuery));

},{}],69:[function(require,module,exports){
(function (global){(function (){



(function( factory ) {
	"use strict";

	if ( typeof define === 'function' && define.amd ) {
		define( ['jquery'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ ) {
				$ = typeof window !== 'undefined' ? 
					(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null) :
					(typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null)( root );
			}

			return factory( $, root, root.document );
		};
	}
	else {
		factory( jQuery, window, document );
	}
}
(function( $, window, document, undefined ) {
	"use strict";

	var DataTable = function ( options )
	{
		this.$ = function ( sSelector, oOpts )
		{
			return this.api(true).$( sSelector, oOpts );
		};


		this._ = function ( sSelector, oOpts )
		{
			return this.api(true).rows( sSelector, oOpts ).data();
		};


		this.api = function ( traditional )
		{
			return traditional ?
				new _Api(
					_fnSettingsFromNode( this[ _ext.iApiIndex ] )
				) :
				new _Api( this );
		};


		this.fnAddData = function( data, redraw )
		{
			var api = this.api( true );

			var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?
				api.rows.add( data ) :
				api.row.add( data );

					if ( redraw === undefined || redraw ) {
				api.draw();
			}

					return rows.flatten().toArray();
		};


		this.fnAdjustColumnSizing = function ( bRedraw )
		{
			var api = this.api( true ).columns.adjust();
			var settings = api.settings()[0];
			var scroll = settings.oScroll;

					if ( bRedraw === undefined || bRedraw ) {
				api.draw( false );
			}
			else if ( scroll.sX !== "" || scroll.sY !== "" ) {
				_fnScrollDraw( settings );
			}
		};


		this.fnClearTable = function( bRedraw )
		{
			var api = this.api( true ).clear();

					if ( bRedraw === undefined || bRedraw ) {
				api.draw();
			}
		};


		this.fnClose = function( nTr )
		{
			this.api( true ).row( nTr ).child.hide();
		};


		this.fnDeleteRow = function( target, callback, redraw )
		{
			var api = this.api( true );
			var rows = api.rows( target );
			var settings = rows.settings()[0];
			var data = settings.aoData[ rows[0][0] ];

					rows.remove();

					if ( callback ) {
				callback.call( this, settings, data );
			}

					if ( redraw === undefined || redraw ) {
				api.draw();
			}

					return data;
		};


		this.fnDestroy = function ( remove )
		{
			this.api( true ).destroy( remove );
		};


		this.fnDraw = function( complete )
		{
			this.api( true ).draw( complete );
		};


		this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
		{
			var api = this.api( true );

					if ( iColumn === null || iColumn === undefined ) {
				api.search( sInput, bRegex, bSmart, bCaseInsensitive );
			}
			else {
				api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );
			}

					api.draw();
		};


		this.fnGetData = function( src, col )
		{
			var api = this.api( true );

					if ( src !== undefined ) {
				var type = src.nodeName ? src.nodeName.toLowerCase() : '';

						return col !== undefined || type == 'td' || type == 'th' ?
					api.cell( src, col ).data() :
					api.row( src ).data() || null;
			}

					return api.data().toArray();
		};


		this.fnGetNodes = function( iRow )
		{
			var api = this.api( true );

					return iRow !== undefined ?
				api.row( iRow ).node() :
				api.rows().nodes().flatten().toArray();
		};


		this.fnGetPosition = function( node )
		{
			var api = this.api( true );
			var nodeName = node.nodeName.toUpperCase();

					if ( nodeName == 'TR' ) {
				return api.row( node ).index();
			}
			else if ( nodeName == 'TD' || nodeName == 'TH' ) {
				var cell = api.cell( node ).index();

						return [
					cell.row,
					cell.columnVisible,
					cell.column
				];
			}
			return null;
		};


		this.fnIsOpen = function( nTr )
		{
			return this.api( true ).row( nTr ).child.isShown();
		};


		this.fnOpen = function( nTr, mHtml, sClass )
		{
			return this.api( true )
				.row( nTr )
				.child( mHtml, sClass )
				.show()
				.child()[0];
		};


		this.fnPageChange = function ( mAction, bRedraw )
		{
			var api = this.api( true ).page( mAction );

					if ( bRedraw === undefined || bRedraw ) {
				api.draw(false);
			}
		};


		this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
		{
			var api = this.api( true ).column( iCol ).visible( bShow );

					if ( bRedraw === undefined || bRedraw ) {
				api.columns.adjust().draw();
			}
		};


		this.fnSettings = function()
		{
			return _fnSettingsFromNode( this[_ext.iApiIndex] );
		};


		this.fnSort = function( aaSort )
		{
			this.api( true ).order( aaSort ).draw();
		};


		this.fnSortListener = function( nNode, iColumn, fnCallback )
		{
			this.api( true ).order.listener( nNode, iColumn, fnCallback );
		};


		this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
		{
			var api = this.api( true );

					if ( iColumn === undefined || iColumn === null ) {
				api.row( mRow ).data( mData );
			}
			else {
				api.cell( mRow, iColumn ).data( mData );
			}

					if ( bAction === undefined || bAction ) {
				api.columns.adjust();
			}

					if ( bRedraw === undefined || bRedraw ) {
				api.draw();
			}
			return 0;
		};


		this.fnVersionCheck = _ext.fnVersionCheck;


				var _that = this;
		var emptyInit = options === undefined;
		var len = this.length;

		if ( emptyInit ) {
			options = {};
		}

		this.oApi = this.internal = _ext.internal;

		for ( var fn in DataTable.ext.internal ) {
			if ( fn ) {
				this[fn] = _fnExternApiFunc(fn);
			}
		}

		this.each(function() {
			var o = {};
			var oInit = len > 1 ? 
				_fnExtend( o, options, true ) :
				options;

			var i=0, iLen, j, jLen, k, kLen;
			var sId = this.getAttribute( 'id' );
			var bInitHandedOff = false;
			var defaults = DataTable.defaults;
			var $this = $(this);


			if ( this.nodeName.toLowerCase() != 'table' )
			{
				_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );
				return;
			}

			_fnCompatOpts( defaults );
			_fnCompatCols( defaults.column );

			_fnCamelToHungarian( defaults, defaults, true );
			_fnCamelToHungarian( defaults.column, defaults.column, true );

			_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );



			var allSettings = DataTable.settings;
			for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )
			{
				var s = allSettings[i];

				if (
					s.nTable == this ||
					(s.nTHead && s.nTHead.parentNode == this) ||
					(s.nTFoot && s.nTFoot.parentNode == this)
				) {
					var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
					var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;

								if ( emptyInit || bRetrieve )
					{
						return s.oInstance;
					}
					else if ( bDestroy )
					{
						s.oInstance.fnDestroy();
						break;
					}
					else
					{
						_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );
						return;
					}
				}

				if ( s.sTableId == this.id )
				{
					allSettings.splice( i, 1 );
					break;
				}
			}

			if ( sId === null || sId === "" )
			{
				sId = "DataTables_Table_"+(DataTable.ext._unique++);
				this.id = sId;
			}

			var oSettings = $.extend( true, {}, DataTable.models.oSettings, {
				"sDestroyWidth": $this[0].style.width,
				"sInstance":     sId,
				"sTableId":      sId
			} );
			oSettings.nTable = this;
			oSettings.oApi   = _that.internal;
			oSettings.oInit  = oInit;

						allSettings.push( oSettings );

			oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();

			_fnCompatOpts( oInit );
			_fnLanguageCompat( oInit.oLanguage );

			if ( oInit.aLengthMenu && ! oInit.iDisplayLength )
			{
				oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?
					oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
			}

			oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );


			_fnMap( oSettings.oFeatures, oInit, [
				"bPaginate",
				"bLengthChange",
				"bFilter",
				"bSort",
				"bSortMulti",
				"bInfo",
				"bProcessing",
				"bAutoWidth",
				"bSortClasses",
				"bServerSide",
				"bDeferRender"
			] );
			_fnMap( oSettings, oInit, [
				"asStripeClasses",
				"ajax",
				"fnServerData",
				"fnFormatNumber",
				"sServerMethod",
				"aaSorting",
				"aaSortingFixed",
				"aLengthMenu",
				"sPaginationType",
				"sAjaxSource",
				"sAjaxDataProp",
				"iStateDuration",
				"sDom",
				"bSortCellsTop",
				"iTabIndex",
				"fnStateLoadCallback",
				"fnStateSaveCallback",
				"renderer",
				"searchDelay",
				"rowId",
				[ "iCookieDuration", "iStateDuration" ], 
				[ "oSearch", "oPreviousSearch" ],
				[ "aoSearchCols", "aoPreSearchCols" ],
				[ "iDisplayLength", "_iDisplayLength" ]
			] );
			_fnMap( oSettings.oScroll, oInit, [
				[ "sScrollX", "sX" ],
				[ "sScrollXInner", "sXInner" ],
				[ "sScrollY", "sY" ],
				[ "bScrollCollapse", "bCollapse" ]
			] );
			_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );

			_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
			_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
			_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
			_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
			_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
			_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
			_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
			_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
			_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
			_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
			_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );

						oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );

			_fnBrowserDetect( oSettings );

						var oClasses = oSettings.oClasses;

						$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );
			$this.addClass( oClasses.sTable );


									if ( oSettings.iInitDisplayStart === undefined )
			{
				oSettings.iInitDisplayStart = oInit.iDisplayStart;
				oSettings._iDisplayStart = oInit.iDisplayStart;
			}

						if ( oInit.iDeferLoading !== null )
			{
				oSettings.bDeferLoading = true;
				var tmp = $.isArray( oInit.iDeferLoading );
				oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
				oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
			}

			var oLanguage = oSettings.oLanguage;
			$.extend( true, oLanguage, oInit.oLanguage );

						if ( oLanguage.sUrl )
			{
				$.ajax( {
					dataType: 'json',
					url: oLanguage.sUrl,
					success: function ( json ) {
						_fnLanguageCompat( json );
						_fnCamelToHungarian( defaults.oLanguage, json );
						$.extend( true, oLanguage, json );
						_fnInitialise( oSettings );
					},
					error: function () {
						_fnInitialise( oSettings );
					}
				} );
				bInitHandedOff = true;
			}

			if ( oInit.asStripeClasses === null )
			{
				oSettings.asStripeClasses =[
					oClasses.sStripeOdd,
					oClasses.sStripeEven
				];
			}

			var stripeClasses = oSettings.asStripeClasses;
			var rowOne = $this.children('tbody').find('tr').eq(0);
			if ( $.inArray( true, $.map( stripeClasses, function(el, i) {
				return rowOne.hasClass(el);
			} ) ) !== -1 ) {
				$('tbody tr', this).removeClass( stripeClasses.join(' ') );
				oSettings.asDestroyStripes = stripeClasses.slice();
			}

			var anThs = [];
			var aoColumnsInit;
			var nThead = this.getElementsByTagName('thead');
			if ( nThead.length !== 0 )
			{
				_fnDetectHeader( oSettings.aoHeader, nThead[0] );
				anThs = _fnGetUniqueThs( oSettings );
			}

			if ( oInit.aoColumns === null )
			{
				aoColumnsInit = [];
				for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
				{
					aoColumnsInit.push( null );
				}
			}
			else
			{
				aoColumnsInit = oInit.aoColumns;
			}

			for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
			{
				_fnAddColumn( oSettings, anThs ? anThs[i] : null );
			}

			_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
				_fnColumnOptions( oSettings, iCol, oDef );
			} );

			if ( rowOne.length ) {
				var a = function ( cell, name ) {
					return cell.getAttribute( 'data-'+name ) !== null ? name : null;
				};

							$( rowOne[0] ).children('th, td').each( function (i, cell) {
					var col = oSettings.aoColumns[i];

								if ( col.mData === i ) {
						var sort = a( cell, 'sort' ) || a( cell, 'order' );
						var filter = a( cell, 'filter' ) || a( cell, 'search' );

									if ( sort !== null || filter !== null ) {
							col.mData = {
								_:      i+'.display',
								sort:   sort !== null   ? i+'.@data-'+sort   : undefined,
								type:   sort !== null   ? i+'.@data-'+sort   : undefined,
								filter: filter !== null ? i+'.@data-'+filter : undefined
							};

										_fnColumnOptions( oSettings, i );
						}
					}
				} );
			}

						var features = oSettings.oFeatures;
			var loadedInit = function () {

				if ( oInit.aaSorting === undefined ) {
					var sorting = oSettings.aaSorting;
					for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {
						sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];
					}
				}

				_fnSortingClasses( oSettings );

							if ( features.bSort ) {
					_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
						if ( oSettings.bSorted ) {
							var aSort = _fnSortFlatten( oSettings );
							var sortedColumns = {};

										$.each( aSort, function (i, val) {
								sortedColumns[ val.src ] = val.dir;
							} );

										_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );
							_fnSortAria( oSettings );
						}
					} );
				}

							_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
					if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {
						_fnSortingClasses( oSettings );
					}
				}, 'sc' );



				var captions = $this.children('caption').each( function () {
					this._captionSide = $(this).css('caption-side');
				} );

							var thead = $this.children('thead');
				if ( thead.length === 0 ) {
					thead = $('<thead/>').appendTo($this);
				}
				oSettings.nTHead = thead[0];

							var tbody = $this.children('tbody');
				if ( tbody.length === 0 ) {
					tbody = $('<tbody/>').appendTo($this);
				}
				oSettings.nTBody = tbody[0];

							var tfoot = $this.children('tfoot');
				if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") ) {
					tfoot = $('<tfoot/>').appendTo($this);
				}

							if ( tfoot.length === 0 || tfoot.children().length === 0 ) {
					$this.addClass( oClasses.sNoFooter );
				}
				else if ( tfoot.length > 0 ) {
					oSettings.nTFoot = tfoot[0];
					_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
				}

				if ( oInit.aaData ) {
					for ( i=0 ; i<oInit.aaData.length ; i++ ) {
						_fnAddData( oSettings, oInit.aaData[ i ] );
					}
				}
				else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {
					_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );
				}

				oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

				oSettings.bInitialised = true;

				if ( bInitHandedOff === false ) {
					_fnInitialise( oSettings );
				}
			};

			if ( oInit.bStateSave )
			{
				features.bStateSave = true;
				_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
				_fnLoadState( oSettings, oInit, loadedInit );
			}
			else {
				loadedInit();
			}

					} );
		_that = null;
		return this;
	};





		var _ext; 
	var _Api; 
	var _api_register; 
	var _api_registerPlural; 

		var _re_dic = {};
	var _re_new_lines = /[\r\n]/g;
	var _re_html = /<.*?>/g;

	var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;

	var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );

	var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi;


			var _empty = function ( d ) {
		return !d || d === true || d === '-' ? true : false;
	};


			var _intVal = function ( s ) {
		var integer = parseInt( s, 10 );
		return !isNaN(integer) && isFinite(s) ? integer : null;
	};

	var _numToDecimal = function ( num, decimalPoint ) {
		if ( ! _re_dic[ decimalPoint ] ) {
			_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );
		}
		return typeof num === 'string' && decimalPoint !== '.' ?
			num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :
			num;
	};


			var _isNumber = function ( d, decimalPoint, formatted ) {
		var strType = typeof d === 'string';

		if ( _empty( d ) ) {
			return true;
		}

			if ( decimalPoint && strType ) {
			d = _numToDecimal( d, decimalPoint );
		}

			if ( formatted && strType ) {
			d = d.replace( _re_formatted_numeric, '' );
		}

			return !isNaN( parseFloat(d) ) && isFinite( d );
	};


	var _isHtml = function ( d ) {
		return _empty( d ) || typeof d === 'string';
	};


			var _htmlNumeric = function ( d, decimalPoint, formatted ) {
		if ( _empty( d ) ) {
			return true;
		}

			var html = _isHtml( d );
		return ! html ?
			null :
			_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?
				true :
				null;
	};


			var _pluck = function ( a, prop, prop2 ) {
		var out = [];
		var i=0, ien=a.length;

		if ( prop2 !== undefined ) {
			for ( ; i<ien ; i++ ) {
				if ( a[i] && a[i][ prop ] ) {
					out.push( a[i][ prop ][ prop2 ] );
				}
			}
		}
		else {
			for ( ; i<ien ; i++ ) {
				if ( a[i] ) {
					out.push( a[i][ prop ] );
				}
			}
		}

			return out;
	};


	var _pluck_order = function ( a, order, prop, prop2 )
	{
		var out = [];
		var i=0, ien=order.length;

		if ( prop2 !== undefined ) {
			for ( ; i<ien ; i++ ) {
				if ( a[ order[i] ][ prop ] ) {
					out.push( a[ order[i] ][ prop ][ prop2 ] );
				}
			}
		}
		else {
			for ( ; i<ien ; i++ ) {
				out.push( a[ order[i] ][ prop ] );
			}
		}

			return out;
	};


			var _range = function ( len, start )
	{
		var out = [];
		var end;

			if ( start === undefined ) {
			start = 0;
			end = len;
		}
		else {
			end = start;
			start = len;
		}

			for ( var i=start ; i<end ; i++ ) {
			out.push( i );
		}

			return out;
	};


			var _removeEmpty = function ( a )
	{
		var out = [];

			for ( var i=0, ien=a.length ; i<ien ; i++ ) {
			if ( a[i] ) { 
				out.push( a[i] );
			}
		}

			return out;
	};


			var _stripHtml = function ( d ) {
		return d.replace( _re_html, '' );
	};


	var _areAllUnique = function ( src ) {
		if ( src.length < 2 ) {
			return true;
		}

			var sorted = src.slice().sort();
		var last = sorted[0];

			for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {
			if ( sorted[i] === last ) {
				return false;
			}

				last = sorted[i];
		}

			return true;
	};


	var _unique = function ( src )
	{
		if ( _areAllUnique( src ) ) {
			return src.slice();
		}

		var
			out = [],
			val,
			i, ien=src.length,
			j, k=0;

			again: for ( i=0 ; i<ien ; i++ ) {
			val = src[i];

				for ( j=0 ; j<k ; j++ ) {
				if ( out[j] === val ) {
					continue again;
				}
			}

				out.push( val );
			k++;
		}

			return out;
	};


	DataTable.util = {
		throttle: function ( fn, freq ) {
			var
				frequency = freq !== undefined ? freq : 200,
				last,
				timer;

				return function () {
				var
					that = this,
					now  = +new Date(),
					args = arguments;

					if ( last && now < last + frequency ) {
					clearTimeout( timer );

						timer = setTimeout( function () {
						last = undefined;
						fn.apply( that, args );
					}, frequency );
				}
				else {
					last = now;
					fn.apply( that, args );
				}
			};
		},


		escapeRegex: function ( val ) {
			return val.replace( _re_escape_regex, '\\$1' );
		}
	};



	function _fnHungarianMap ( o )
	{
		var
			hungarian = 'a aa ai ao as b fn i m o s ',
			match,
			newKey,
			map = {};

			$.each( o, function (key, val) {
			match = key.match(/^([^A-Z]+?)([A-Z])/);

				if ( match && hungarian.indexOf(match[1]+' ') !== -1 )
			{
				newKey = key.replace( match[0], match[2].toLowerCase() );
				map[ newKey ] = key;

					if ( match[1] === 'o' )
				{
					_fnHungarianMap( o[key] );
				}
			}
		} );

			o._hungarianMap = map;
	}


	function _fnCamelToHungarian ( src, user, force )
	{
		if ( ! src._hungarianMap ) {
			_fnHungarianMap( src );
		}

			var hungarianKey;

			$.each( user, function (key, val) {
			hungarianKey = src._hungarianMap[ key ];

				if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )
			{
				if ( hungarianKey.charAt(0) === 'o' )
				{
					if ( ! user[ hungarianKey ] ) {
						user[ hungarianKey ] = {};
					}
					$.extend( true, user[hungarianKey], user[key] );

						_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );
				}
				else {
					user[hungarianKey] = user[ key ];
				}
			}
		} );
	}


	function _fnLanguageCompat( lang )
	{
		var defaults = DataTable.defaults.oLanguage;

		var defaultDecimal = defaults.sDecimal;
		if ( defaultDecimal ) {
			_addNumericSort( defaultDecimal );
		}

			if ( lang ) {
			var zeroRecords = lang.sZeroRecords;

			if ( ! lang.sEmptyTable && zeroRecords &&
				defaults.sEmptyTable === "No data available in table" )
			{
				_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );
			}

			if ( ! lang.sLoadingRecords && zeroRecords &&
				defaults.sLoadingRecords === "Loading..." )
			{
				_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );
			}

			if ( lang.sInfoThousands ) {
				lang.sThousands = lang.sInfoThousands;
			}

				var decimal = lang.sDecimal;
			if ( decimal && defaultDecimal !== decimal ) {
				_addNumericSort( decimal );
			}
		}
	}


	var _fnCompatMap = function ( o, knew, old ) {
		if ( o[ knew ] !== undefined ) {
			o[ old ] = o[ knew ];
		}
	};


	function _fnCompatOpts ( init )
	{
		_fnCompatMap( init, 'ordering',      'bSort' );
		_fnCompatMap( init, 'orderMulti',    'bSortMulti' );
		_fnCompatMap( init, 'orderClasses',  'bSortClasses' );
		_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );
		_fnCompatMap( init, 'order',         'aaSorting' );
		_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );
		_fnCompatMap( init, 'paging',        'bPaginate' );
		_fnCompatMap( init, 'pagingType',    'sPaginationType' );
		_fnCompatMap( init, 'pageLength',    'iDisplayLength' );
		_fnCompatMap( init, 'searching',     'bFilter' );

		if ( typeof init.sScrollX === 'boolean' ) {
			init.sScrollX = init.sScrollX ? '100%' : '';
		}
		if ( typeof init.scrollX === 'boolean' ) {
			init.scrollX = init.scrollX ? '100%' : '';
		}

		var searchCols = init.aoSearchCols;

			if ( searchCols ) {
			for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {
				if ( searchCols[i] ) {
					_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );
				}
			}
		}
	}


	function _fnCompatCols ( init )
	{
		_fnCompatMap( init, 'orderable',     'bSortable' );
		_fnCompatMap( init, 'orderData',     'aDataSort' );
		_fnCompatMap( init, 'orderSequence', 'asSorting' );
		_fnCompatMap( init, 'orderDataType', 'sortDataType' );

		var dataSort = init.aDataSort;
		if ( typeof dataSort === 'number' && ! $.isArray( dataSort ) ) {
			init.aDataSort = [ dataSort ];
		}
	}


	function _fnBrowserDetect( settings )
	{
		if ( ! DataTable.__browser ) {
			var browser = {};
			DataTable.__browser = browser;

			var n = $('<div/>')
				.css( {
					position: 'fixed',
					top: 0,
					left: $(window).scrollLeft()*-1, 
					height: 1,
					width: 1,
					overflow: 'hidden'
				} )
				.append(
					$('<div/>')
						.css( {
							position: 'absolute',
							top: 1,
							left: 1,
							width: 100,
							overflow: 'scroll'
						} )
						.append(
							$('<div/>')
								.css( {
									width: '100%',
									height: 10
								} )
						)
				)
				.appendTo( 'body' );

				var outer = n.children();
			var inner = outer.children();


			browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;

			browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;

			browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;

			browser.bBounding = n[0].getBoundingClientRect().width ? true : false;

				n.remove();
		}

			$.extend( settings.oBrowser, DataTable.__browser );
		settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
	}


	function _fnReduce ( that, fn, init, start, end, inc )
	{
		var
			i = start,
			value,
			isSet = false;

			if ( init !== undefined ) {
			value = init;
			isSet = true;
		}

			while ( i !== end ) {
			if ( ! that.hasOwnProperty(i) ) {
				continue;
			}

				value = isSet ?
				fn( value, that[i], i, that ) :
				that[i];

				isSet = true;
			i += inc;
		}

			return value;
	}

	function _fnAddColumn( oSettings, nTh )
	{
		var oDefaults = DataTable.defaults.column;
		var iCol = oSettings.aoColumns.length;
		var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {
			"nTh": nTh ? nTh : document.createElement('th'),
			"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
			"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
			"mData": oDefaults.mData ? oDefaults.mData : iCol,
			idx: iCol
		} );
		oSettings.aoColumns.push( oCol );

		var searchCols = oSettings.aoPreSearchCols;
		searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );

		_fnColumnOptions( oSettings, iCol, $(nTh).data() );
	}


	function _fnColumnOptions( oSettings, iCol, oOptions )
	{
		var oCol = oSettings.aoColumns[ iCol ];
		var oClasses = oSettings.oClasses;
		var th = $(oCol.nTh);

		if ( ! oCol.sWidthOrig ) {
			oCol.sWidthOrig = th.attr('width') || null;

			var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
			if ( t ) {
				oCol.sWidthOrig = t[1];
			}
		}

		if ( oOptions !== undefined && oOptions !== null )
		{
			_fnCompatCols( oOptions );

			_fnCamelToHungarian( DataTable.defaults.column, oOptions );

			if ( oOptions.mDataProp !== undefined && !oOptions.mData )
			{
				oOptions.mData = oOptions.mDataProp;
			}

				if ( oOptions.sType )
			{
				oCol._sManualType = oOptions.sType;
			}

			if ( oOptions.className && ! oOptions.sClass )
			{
				oOptions.sClass = oOptions.className;
			}
			if ( oOptions.sClass ) {
				th.addClass( oOptions.sClass );
			}

				$.extend( oCol, oOptions );
			_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );

			if ( oOptions.iDataSort !== undefined )
			{
				oCol.aDataSort = [ oOptions.iDataSort ];
			}
			_fnMap( oCol, oOptions, "aDataSort" );
		}

		var mDataSrc = oCol.mData;
		var mData = _fnGetObjectDataFn( mDataSrc );
		var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;

			var attrTest = function( src ) {
			return typeof src === 'string' && src.indexOf('@') !== -1;
		};
		oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (
			attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
		);
		oCol._setter = null;

			oCol.fnGetData = function (rowData, type, meta) {
			var innerData = mData( rowData, type, undefined, meta );

				return mRender && type ?
				mRender( innerData, type, rowData, meta ) :
				innerData;
		};
		oCol.fnSetData = function ( rowData, val, meta ) {
			return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );
		};

		if ( typeof mDataSrc !== 'number' ) {
			oSettings._rowReadObject = true;
		}

		if ( !oSettings.oFeatures.bSort )
		{
			oCol.bSortable = false;
			th.addClass( oClasses.sSortableNone ); 
		}

		var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
		var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
		if ( !oCol.bSortable || (!bAsc && !bDesc) )
		{
			oCol.sSortingClass = oClasses.sSortableNone;
			oCol.sSortingClassJUI = "";
		}
		else if ( bAsc && !bDesc )
		{
			oCol.sSortingClass = oClasses.sSortableAsc;
			oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
		}
		else if ( !bAsc && bDesc )
		{
			oCol.sSortingClass = oClasses.sSortableDesc;
			oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
		}
		else
		{
			oCol.sSortingClass = oClasses.sSortable;
			oCol.sSortingClassJUI = oClasses.sSortJUI;
		}
	}


	function _fnAdjustColumnSizing ( settings )
	{
		if ( settings.oFeatures.bAutoWidth !== false )
		{
			var columns = settings.aoColumns;

				_fnCalculateColumnWidths( settings );
			for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )
			{
				columns[i].nTh.style.width = columns[i].sWidth;
			}
		}

			var scroll = settings.oScroll;
		if ( scroll.sY !== '' || scroll.sX !== '')
		{
			_fnScrollDraw( settings );
		}

			_fnCallbackFire( settings, null, 'column-sizing', [settings] );
	}


	function _fnVisibleToColumnIndex( oSettings, iMatch )
	{
		var aiVis = _fnGetColumns( oSettings, 'bVisible' );

			return typeof aiVis[iMatch] === 'number' ?
			aiVis[iMatch] :
			null;
	}


	function _fnColumnIndexToVisible( oSettings, iMatch )
	{
		var aiVis = _fnGetColumns( oSettings, 'bVisible' );
		var iPos = $.inArray( iMatch, aiVis );

			return iPos !== -1 ? iPos : null;
	}


	function _fnVisbleColumns( oSettings )
	{
		var vis = 0;

		$.each( oSettings.aoColumns, function ( i, col ) {
			if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {
				vis++;
			}
		} );

			return vis;
	}


	function _fnGetColumns( oSettings, sParam )
	{
		var a = [];

			$.map( oSettings.aoColumns, function(val, i) {
			if ( val[sParam] ) {
				a.push( i );
			}
		} );

			return a;
	}


	function _fnColumnTypes ( settings )
	{
		var columns = settings.aoColumns;
		var data = settings.aoData;
		var types = DataTable.ext.type.detect;
		var i, ien, j, jen, k, ken;
		var col, cell, detectedType, cache;

		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			col = columns[i];
			cache = [];

				if ( ! col.sType && col._sManualType ) {
				col.sType = col._sManualType;
			}
			else if ( ! col.sType ) {
				for ( j=0, jen=types.length ; j<jen ; j++ ) {
					for ( k=0, ken=data.length ; k<ken ; k++ ) {
						if ( cache[k] === undefined ) {
							cache[k] = _fnGetCellData( settings, k, i, 'type' );
						}

							detectedType = types[j]( cache[k], settings );

						if ( ! detectedType && j !== types.length-1 ) {
							break;
						}

						if ( detectedType === 'html' ) {
							break;
						}
					}

					if ( detectedType ) {
						col.sType = detectedType;
						break;
					}
				}

				if ( ! col.sType ) {
					col.sType = 'string';
				}
			}
		}
	}


	function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
	{
		var i, iLen, j, jLen, k, kLen, def;
		var columns = oSettings.aoColumns;

		if ( aoColDefs )
		{
			for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
			{
				def = aoColDefs[i];

				var aTargets = def.targets !== undefined ?
					def.targets :
					def.aTargets;

					if ( ! $.isArray( aTargets ) )
				{
					aTargets = [ aTargets ];
				}

					for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
				{
					if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
					{
						while( columns.length <= aTargets[j] )
						{
							_fnAddColumn( oSettings );
						}

						fn( aTargets[j], def );
					}
					else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
					{
						fn( columns.length+aTargets[j], def );
					}
					else if ( typeof aTargets[j] === 'string' )
					{
						for ( k=0, kLen=columns.length ; k<kLen ; k++ )
						{
							if ( aTargets[j] == "_all" ||
							     $(columns[k].nTh).hasClass( aTargets[j] ) )
							{
								fn( k, def );
							}
						}
					}
				}
			}
		}

		if ( aoCols )
		{
			for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
			{
				fn( i, aoCols[i] );
			}
		}
	}

	function _fnAddData ( oSettings, aDataIn, nTr, anTds )
	{
		var iRow = oSettings.aoData.length;
		var oData = $.extend( true, {}, DataTable.models.oRow, {
			src: nTr ? 'dom' : 'data',
			idx: iRow
		} );

			oData._aData = aDataIn;
		oSettings.aoData.push( oData );

		var nTd, sThisType;
		var columns = oSettings.aoColumns;

		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
		{
			columns[i].sType = null;
		}

		oSettings.aiDisplayMaster.push( iRow );

			var id = oSettings.rowIdFn( aDataIn );
		if ( id !== undefined ) {
			oSettings.aIds[ id ] = oData;
		}

		if ( nTr || ! oSettings.oFeatures.bDeferRender )
		{
			_fnCreateTr( oSettings, iRow, nTr, anTds );
		}

			return iRow;
	}


	function _fnAddTr( settings, trs )
	{
		var row;

		if ( ! (trs instanceof $) ) {
			trs = $(trs);
		}

			return trs.map( function (i, el) {
			row = _fnGetRowElements( settings, el );
			return _fnAddData( settings, row.data, el, row.cells );
		} );
	}


	function _fnNodeToDataIndex( oSettings, n )
	{
		return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;
	}


	function _fnNodeToColumnIndex( oSettings, iRow, n )
	{
		return $.inArray( n, oSettings.aoData[ iRow ].anCells );
	}


	function _fnGetCellData( settings, rowIdx, colIdx, type )
	{
		var draw           = settings.iDraw;
		var col            = settings.aoColumns[colIdx];
		var rowData        = settings.aoData[rowIdx]._aData;
		var defaultContent = col.sDefaultContent;
		var cellData       = col.fnGetData( rowData, type, {
			settings: settings,
			row:      rowIdx,
			col:      colIdx
		} );

			if ( cellData === undefined ) {
			if ( settings.iDrawError != draw && defaultContent === null ) {
				_fnLog( settings, 0, "Requested unknown parameter "+
					(typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+
					" for row "+rowIdx+", column "+colIdx, 4 );
				settings.iDrawError = draw;
			}
			return defaultContent;
		}

		if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {
			cellData = defaultContent;
		}
		else if ( typeof cellData === 'function' ) {
			return cellData.call( rowData );
		}

			if ( cellData === null && type == 'display' ) {
			return '';
		}
		return cellData;
	}


	function _fnSetCellData( settings, rowIdx, colIdx, val )
	{
		var col     = settings.aoColumns[colIdx];
		var rowData = settings.aoData[rowIdx]._aData;

			col.fnSetData( rowData, val, {
			settings: settings,
			row:      rowIdx,
			col:      colIdx
		}  );
	}


	var __reArray = /\[.*?\]$/;
	var __reFn = /\(\)$/;

	function _fnSplitObjNotation( str )
	{
		return $.map( str.match(/(\\.|[^\.])+/g) || [''], function ( s ) {
			return s.replace(/\\\./g, '.');
		} );
	}


	function _fnGetObjectDataFn( mSource )
	{
		if ( $.isPlainObject( mSource ) )
		{
			var o = {};
			$.each( mSource, function (key, val) {
				if ( val ) {
					o[key] = _fnGetObjectDataFn( val );
				}
			} );

				return function (data, type, row, meta) {
				var t = o[type] || o._;
				return t !== undefined ?
					t(data, type, row, meta) :
					data;
			};
		}
		else if ( mSource === null )
		{
			return function (data) { 
				return data;
			};
		}
		else if ( typeof mSource === 'function' )
		{
			return function (data, type, row, meta) {
				return mSource( data, type, row, meta );
			};
		}
		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
		{
			var fetchData = function (data, type, src) {
				var arrayNotation, funcNotation, out, innerSrc;

					if ( src !== "" )
				{
					var a = _fnSplitObjNotation( src );

						for ( var i=0, iLen=a.length ; i<iLen ; i++ )
					{
						arrayNotation = a[i].match(__reArray);
						funcNotation = a[i].match(__reFn);

							if ( arrayNotation )
						{
							a[i] = a[i].replace(__reArray, '');

							if ( a[i] !== "" ) {
								data = data[ a[i] ];
							}
							out = [];

							a.splice( 0, i+1 );
							innerSrc = a.join('.');

							if ( $.isArray( data ) ) {
								for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
									out.push( fetchData( data[j], type, innerSrc ) );
								}
							}

							var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
							data = (join==="") ? out : out.join(join);

							break;
						}
						else if ( funcNotation )
						{
							a[i] = a[i].replace(__reFn, '');
							data = data[ a[i] ]();
							continue;
						}

							if ( data === null || data[ a[i] ] === undefined )
						{
							return undefined;
						}
						data = data[ a[i] ];
					}
				}

					return data;
			};

				return function (data, type) { 
				return fetchData( data, type, mSource );
			};
		}
		else
		{
			return function (data, type) { 
				return data[mSource];
			};
		}
	}


	function _fnSetObjectDataFn( mSource )
	{
		if ( $.isPlainObject( mSource ) )
		{
			return _fnSetObjectDataFn( mSource._ );
		}
		else if ( mSource === null )
		{
			return function () {};
		}
		else if ( typeof mSource === 'function' )
		{
			return function (data, val, meta) {
				mSource( data, 'set', val, meta );
			};
		}
		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
		{
			var setData = function (data, val, src) {
				var a = _fnSplitObjNotation( src ), b;
				var aLast = a[a.length-1];
				var arrayNotation, funcNotation, o, innerSrc;

					for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )
				{
					arrayNotation = a[i].match(__reArray);
					funcNotation = a[i].match(__reFn);

						if ( arrayNotation )
					{
						a[i] = a[i].replace(__reArray, '');
						data[ a[i] ] = [];

						b = a.slice();
						b.splice( 0, i+1 );
						innerSrc = b.join('.');

						if ( $.isArray( val ) )
						{
							for ( var j=0, jLen=val.length ; j<jLen ; j++ )
							{
								o = {};
								setData( o, val[j], innerSrc );
								data[ a[i] ].push( o );
							}
						}
						else
						{
							data[ a[i] ] = val;
						}

						return;
					}
					else if ( funcNotation )
					{
						a[i] = a[i].replace(__reFn, '');
						data = data[ a[i] ]( val );
					}

					if ( data[ a[i] ] === null || data[ a[i] ] === undefined )
					{
						data[ a[i] ] = {};
					}
					data = data[ a[i] ];
				}

				if ( aLast.match(__reFn ) )
				{
					data = data[ aLast.replace(__reFn, '') ]( val );
				}
				else
				{
					data[ aLast.replace(__reArray, '') ] = val;
				}
			};

				return function (data, val) { 
				return setData( data, val, mSource );
			};
		}
		else
		{
			return function (data, val) { 
				data[mSource] = val;
			};
		}
	}


	function _fnGetDataMaster ( settings )
	{
		return _pluck( settings.aoData, '_aData' );
	}


	function _fnClearTable( settings )
	{
		settings.aoData.length = 0;
		settings.aiDisplayMaster.length = 0;
		settings.aiDisplay.length = 0;
		settings.aIds = {};
	}


	function _fnDeleteIndex( a, iTarget, splice )
	{
		var iTargetIndex = -1;

			for ( var i=0, iLen=a.length ; i<iLen ; i++ )
		{
			if ( a[i] == iTarget )
			{
				iTargetIndex = i;
			}
			else if ( a[i] > iTarget )
			{
				a[i]--;
			}
		}

			if ( iTargetIndex != -1 && splice === undefined )
		{
			a.splice( iTargetIndex, 1 );
		}
	}


	function _fnInvalidate( settings, rowIdx, src, colIdx )
	{
		var row = settings.aoData[ rowIdx ];
		var i, ien;
		var cellWrite = function ( cell, col ) {
			while ( cell.childNodes.length ) {
				cell.removeChild( cell.firstChild );
			}

				cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );
		};

		if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {
			row._aData = _fnGetRowElements(
					settings, row, colIdx, colIdx === undefined ? undefined : row._aData
				)
				.data;
		}
		else {
			var cells = row.anCells;

				if ( cells ) {
				if ( colIdx !== undefined ) {
					cellWrite( cells[colIdx], colIdx );
				}
				else {
					for ( i=0, ien=cells.length ; i<ien ; i++ ) {
						cellWrite( cells[i], i );
					}
				}
			}
		}

		row._aSortData = null;
		row._aFilterData = null;

		var cols = settings.aoColumns;
		if ( colIdx !== undefined ) {
			cols[ colIdx ].sType = null;
		}
		else {
			for ( i=0, ien=cols.length ; i<ien ; i++ ) {
				cols[i].sType = null;
			}

			_fnRowAttributes( settings, row );
		}
	}


	function _fnGetRowElements( settings, row, colIdx, d )
	{
		var
			tds = [],
			td = row.firstChild,
			name, col, o, i=0, contents,
			columns = settings.aoColumns,
			objectRead = settings._rowReadObject;

		d = d !== undefined ?
			d :
			objectRead ?
				{} :
				[];

			var attr = function ( str, td  ) {
			if ( typeof str === 'string' ) {
				var idx = str.indexOf('@');

					if ( idx !== -1 ) {
					var attr = str.substring( idx+1 );
					var setter = _fnSetObjectDataFn( str );
					setter( d, td.getAttribute( attr ) );
				}
			}
		};

		var cellProcess = function ( cell ) {
			if ( colIdx === undefined || colIdx === i ) {
				col = columns[i];
				contents = $.trim(cell.innerHTML);

					if ( col && col._bAttrSrc ) {
					var setter = _fnSetObjectDataFn( col.mData._ );
					setter( d, contents );

						attr( col.mData.sort, cell );
					attr( col.mData.type, cell );
					attr( col.mData.filter, cell );
				}
				else {
					if ( objectRead ) {
						if ( ! col._setter ) {
							col._setter = _fnSetObjectDataFn( col.mData );
						}
						col._setter( d, contents );
					}
					else {
						d[i] = contents;
					}
				}
			}

				i++;
		};

			if ( td ) {
			while ( td ) {
				name = td.nodeName.toUpperCase();

					if ( name == "TD" || name == "TH" ) {
					cellProcess( td );
					tds.push( td );
				}

					td = td.nextSibling;
			}
		}
		else {
			tds = row.anCells;

				for ( var j=0, jen=tds.length ; j<jen ; j++ ) {
				cellProcess( tds[j] );
			}
		}

		var rowNode = row.firstChild ? row : row.nTr;

			if ( rowNode ) {
			var id = rowNode.getAttribute( 'id' );

				if ( id ) {
				_fnSetObjectDataFn( settings.rowId )( d, id );
			}
		}

			return {
			data: d,
			cells: tds
		};
	}
	function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )
	{
		var
			row = oSettings.aoData[iRow],
			rowData = row._aData,
			cells = [],
			nTr, nTd, oCol,
			i, iLen;

			if ( row.nTr === null )
		{
			nTr = nTrIn || document.createElement('tr');

				row.nTr = nTr;
			row.anCells = cells;

			nTr._DT_RowIndex = iRow;

			_fnRowAttributes( oSettings, row );

			for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
			{
				oCol = oSettings.aoColumns[i];

					nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );
				nTd._DT_CellIndex = {
					row: iRow,
					column: i
				};

								cells.push( nTd );

				if ( (!nTrIn || oCol.mRender || oCol.mData !== i) &&
					 (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')
				) {
					nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
				}

				if ( oCol.sClass )
				{
					nTd.className += ' '+oCol.sClass;
				}

				if ( oCol.bVisible && ! nTrIn )
				{
					nTr.appendChild( nTd );
				}
				else if ( ! oCol.bVisible && nTrIn )
				{
					nTd.parentNode.removeChild( nTd );
				}

					if ( oCol.fnCreatedCell )
				{
					oCol.fnCreatedCell.call( oSettings.oInstance,
						nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i
					);
				}
			}

				_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );
		}

		row.nTr.setAttribute( 'role', 'row' );
	}


	function _fnRowAttributes( settings, row )
	{
		var tr = row.nTr;
		var data = row._aData;

			if ( tr ) {
			var id = settings.rowIdFn( data );

				if ( id ) {
				tr.id = id;
			}

				if ( data.DT_RowClass ) {
				var a = data.DT_RowClass.split(' ');
				row.__rowc = row.__rowc ?
					_unique( row.__rowc.concat( a ) ) :
					a;

					$(tr)
					.removeClass( row.__rowc.join(' ') )
					.addClass( data.DT_RowClass );
			}

				if ( data.DT_RowAttr ) {
				$(tr).attr( data.DT_RowAttr );
			}

				if ( data.DT_RowData ) {
				$(tr).data( data.DT_RowData );
			}
		}
	}


	function _fnBuildHead( oSettings )
	{
		var i, ien, cell, row, column;
		var thead = oSettings.nTHead;
		var tfoot = oSettings.nTFoot;
		var createHeader = $('th, td', thead).length === 0;
		var classes = oSettings.oClasses;
		var columns = oSettings.aoColumns;

			if ( createHeader ) {
			row = $('<tr/>').appendTo( thead );
		}

			for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			column = columns[i];
			cell = $( column.nTh ).addClass( column.sClass );

				if ( createHeader ) {
				cell.appendTo( row );
			}

			if ( oSettings.oFeatures.bSort ) {
				cell.addClass( column.sSortingClass );

					if ( column.bSortable !== false ) {
					cell
						.attr( 'tabindex', oSettings.iTabIndex )
						.attr( 'aria-controls', oSettings.sTableId );

						_fnSortAttachListener( oSettings, column.nTh, i );
				}
			}

				if ( column.sTitle != cell[0].innerHTML ) {
				cell.html( column.sTitle );
			}

				_fnRenderer( oSettings, 'header' )(
				oSettings, cell, column, classes
			);
		}

			if ( createHeader ) {
			_fnDetectHeader( oSettings.aoHeader, thead );
		}

	 	$(thead).find('>tr').attr('role', 'row');

		$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );
		$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );

		if ( tfoot !== null ) {
			var cells = oSettings.aoFooter[0];

				for ( i=0, ien=cells.length ; i<ien ; i++ ) {
				column = columns[i];
				column.nTf = cells[i].cell;

					if ( column.sClass ) {
					$(column.nTf).addClass( column.sClass );
				}
			}
		}
	}


	function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
	{
		var i, iLen, j, jLen, k, kLen, n, nLocalTr;
		var aoLocal = [];
		var aApplied = [];
		var iColumns = oSettings.aoColumns.length;
		var iRowspan, iColspan;

			if ( ! aoSource )
		{
			return;
		}

			if (  bIncludeHidden === undefined )
		{
			bIncludeHidden = false;
		}

		for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
		{
			aoLocal[i] = aoSource[i].slice();
			aoLocal[i].nTr = aoSource[i].nTr;

			for ( j=iColumns-1 ; j>=0 ; j-- )
			{
				if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
				{
					aoLocal[i].splice( j, 1 );
				}
			}

			aApplied.push( [] );
		}

			for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
		{
			nLocalTr = aoLocal[i].nTr;

			if ( nLocalTr )
			{
				while( (n = nLocalTr.firstChild) )
				{
					nLocalTr.removeChild( n );
				}
			}

				for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
			{
				iRowspan = 1;
				iColspan = 1;

				if ( aApplied[i][j] === undefined )
				{
					nLocalTr.appendChild( aoLocal[i][j].cell );
					aApplied[i][j] = 1;

					while ( aoLocal[i+iRowspan] !== undefined &&
					        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
					{
						aApplied[i+iRowspan][j] = 1;
						iRowspan++;
					}

					while ( aoLocal[i][j+iColspan] !== undefined &&
					        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
					{
						for ( k=0 ; k<iRowspan ; k++ )
						{
							aApplied[i+k][j+iColspan] = 1;
						}
						iColspan++;
					}

					$(aoLocal[i][j].cell)
						.attr('rowspan', iRowspan)
						.attr('colspan', iColspan);
				}
			}
		}
	}


	function _fnDraw( oSettings )
	{
		var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
		if ( $.inArray( false, aPreDraw ) !== -1 )
		{
			_fnProcessingDisplay( oSettings, false );
			return;
		}

			var i, iLen, n;
		var anRows = [];
		var iRowCount = 0;
		var asStripeClasses = oSettings.asStripeClasses;
		var iStripes = asStripeClasses.length;
		var iOpenRows = oSettings.aoOpenRows.length;
		var oLang = oSettings.oLanguage;
		var iInitDisplayStart = oSettings.iInitDisplayStart;
		var bServerSide = _fnDataSource( oSettings ) == 'ssp';
		var aiDisplay = oSettings.aiDisplay;

			oSettings.bDrawing = true;

		if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )
		{
			oSettings._iDisplayStart = bServerSide ?
				iInitDisplayStart :
				iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
					0 :
					iInitDisplayStart;

				oSettings.iInitDisplayStart = -1;
		}

			var iDisplayStart = oSettings._iDisplayStart;
		var iDisplayEnd = oSettings.fnDisplayEnd();

		if ( oSettings.bDeferLoading )
		{
			oSettings.bDeferLoading = false;
			oSettings.iDraw++;
			_fnProcessingDisplay( oSettings, false );
		}
		else if ( !bServerSide )
		{
			oSettings.iDraw++;
		}
		else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )
		{
			return;
		}

			if ( aiDisplay.length !== 0 )
		{
			var iStart = bServerSide ? 0 : iDisplayStart;
			var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;

				for ( var j=iStart ; j<iEnd ; j++ )
			{
				var iDataIndex = aiDisplay[j];
				var aoData = oSettings.aoData[ iDataIndex ];
				if ( aoData.nTr === null )
				{
					_fnCreateTr( oSettings, iDataIndex );
				}

					var nRow = aoData.nTr;

				if ( iStripes !== 0 )
				{
					var sStripe = asStripeClasses[ iRowCount % iStripes ];
					if ( aoData._sRowStripe != sStripe )
					{
						$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
						aoData._sRowStripe = sStripe;
					}
				}

				_fnCallbackFire( oSettings, 'aoRowCallback', null,
					[nRow, aoData._aData, iRowCount, j, iDataIndex] );

					anRows.push( nRow );
				iRowCount++;
			}
		}
		else
		{
			var sZero = oLang.sZeroRecords;
			if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )
			{
				sZero = oLang.sLoadingRecords;
			}
			else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
			{
				sZero = oLang.sEmptyTable;
			}

				anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )
				.append( $('<td />', {
					'valign':  'top',
					'colSpan': _fnVisbleColumns( oSettings ),
					'class':   oSettings.oClasses.sRowEmpty
				} ).html( sZero ) )[0];
		}

		_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],
			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );

			_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],
			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );

			var body = $(oSettings.nTBody);

			body.children().detach();
		body.append( $(anRows) );

		_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );

		oSettings.bSorted = false;
		oSettings.bFiltered = false;
		oSettings.bDrawing = false;
	}


	function _fnReDraw( settings, holdPosition )
	{
		var
			features = settings.oFeatures,
			sort     = features.bSort,
			filter   = features.bFilter;

			if ( sort ) {
			_fnSort( settings );
		}

			if ( filter ) {
			_fnFilterComplete( settings, settings.oPreviousSearch );
		}
		else {
			settings.aiDisplay = settings.aiDisplayMaster.slice();
		}

			if ( holdPosition !== true ) {
			settings._iDisplayStart = 0;
		}

		settings._drawHold = holdPosition;

			_fnDraw( settings );

			settings._drawHold = false;
	}


	function _fnAddOptionsHtml ( oSettings )
	{
		var classes = oSettings.oClasses;
		var table = $(oSettings.nTable);
		var holding = $('<div/>').insertBefore( table ); 
		var features = oSettings.oFeatures;

		var insert = $('<div/>', {
			id:      oSettings.sTableId+'_wrapper',
			'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)
		} );

			oSettings.nHolding = holding[0];
		oSettings.nTableWrapper = insert[0];
		oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;

		var aDom = oSettings.sDom.split('');
		var featureNode, cOption, nNewNode, cNext, sAttr, j;
		for ( var i=0 ; i<aDom.length ; i++ )
		{
			featureNode = null;
			cOption = aDom[i];

				if ( cOption == '<' )
			{
				nNewNode = $('<div/>')[0];

				cNext = aDom[i+1];
				if ( cNext == "'" || cNext == '"' )
				{
					sAttr = "";
					j = 2;
					while ( aDom[i+j] != cNext )
					{
						sAttr += aDom[i+j];
						j++;
					}

					if ( sAttr == "H" )
					{
						sAttr = classes.sJUIHeader;
					}
					else if ( sAttr == "F" )
					{
						sAttr = classes.sJUIFooter;
					}

					if ( sAttr.indexOf('.') != -1 )
					{
						var aSplit = sAttr.split('.');
						nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
						nNewNode.className = aSplit[1];
					}
					else if ( sAttr.charAt(0) == "#" )
					{
						nNewNode.id = sAttr.substr(1, sAttr.length-1);
					}
					else
					{
						nNewNode.className = sAttr;
					}

						i += j; 
				}

					insert.append( nNewNode );
				insert = $(nNewNode);
			}
			else if ( cOption == '>' )
			{
				insert = insert.parent();
			}
			else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )
			{
				featureNode = _fnFeatureHtmlLength( oSettings );
			}
			else if ( cOption == 'f' && features.bFilter )
			{
				featureNode = _fnFeatureHtmlFilter( oSettings );
			}
			else if ( cOption == 'r' && features.bProcessing )
			{
				featureNode = _fnFeatureHtmlProcessing( oSettings );
			}
			else if ( cOption == 't' )
			{
				featureNode = _fnFeatureHtmlTable( oSettings );
			}
			else if ( cOption ==  'i' && features.bInfo )
			{
				featureNode = _fnFeatureHtmlInfo( oSettings );
			}
			else if ( cOption == 'p' && features.bPaginate )
			{
				featureNode = _fnFeatureHtmlPaginate( oSettings );
			}
			else if ( DataTable.ext.feature.length !== 0 )
			{
				var aoFeatures = DataTable.ext.feature;
				for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
				{
					if ( cOption == aoFeatures[k].cFeature )
					{
						featureNode = aoFeatures[k].fnInit( oSettings );
						break;
					}
				}
			}

			if ( featureNode )
			{
				var aanFeatures = oSettings.aanFeatures;

					if ( ! aanFeatures[cOption] )
				{
					aanFeatures[cOption] = [];
				}

					aanFeatures[cOption].push( featureNode );
				insert.append( featureNode );
			}
		}

		holding.replaceWith( insert );
		oSettings.nHolding = null;
	}


	function _fnDetectHeader ( aLayout, nThead )
	{
		var nTrs = $(nThead).children('tr');
		var nTr, nCell;
		var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
		var bUnique;
		var fnShiftCol = function ( a, i, j ) {
			var k = a[i];
	                while ( k[j] ) {
				j++;
			}
			return j;
		};

			aLayout.splice( 0, aLayout.length );

		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
		{
			aLayout.push( [] );
		}

		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
		{
			nTr = nTrs[i];
			iColumn = 0;

			nCell = nTr.firstChild;
			while ( nCell ) {
				if ( nCell.nodeName.toUpperCase() == "TD" ||
				     nCell.nodeName.toUpperCase() == "TH" )
				{
					iColspan = nCell.getAttribute('colspan') * 1;
					iRowspan = nCell.getAttribute('rowspan') * 1;
					iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
					iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;

					iColShifted = fnShiftCol( aLayout, i, iColumn );

					bUnique = iColspan === 1 ? true : false;

					for ( l=0 ; l<iColspan ; l++ )
					{
						for ( k=0 ; k<iRowspan ; k++ )
						{
							aLayout[i+k][iColShifted+l] = {
								"cell": nCell,
								"unique": bUnique
							};
							aLayout[i+k].nTr = nTr;
						}
					}
				}
				nCell = nCell.nextSibling;
			}
		}
	}


	function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
	{
		var aReturn = [];
		if ( !aLayout )
		{
			aLayout = oSettings.aoHeader;
			if ( nHeader )
			{
				aLayout = [];
				_fnDetectHeader( aLayout, nHeader );
			}
		}

			for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
		{
			for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
			{
				if ( aLayout[i][j].unique &&
					 (!aReturn[j] || !oSettings.bSortCellsTop) )
				{
					aReturn[j] = aLayout[i][j].cell;
				}
			}
		}

			return aReturn;
	}

	function _fnBuildAjax( oSettings, data, fn )
	{
		_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );

		if ( data && $.isArray(data) ) {
			var tmp = {};
			var rbracket = /(.*?)\[\]$/;

				$.each( data, function (key, val) {
				var match = val.name.match(rbracket);

					if ( match ) {
					var name = match[0];

						if ( ! tmp[ name ] ) {
						tmp[ name ] = [];
					}
					tmp[ name ].push( val.value );
				}
				else {
					tmp[val.name] = val.value;
				}
			} );
			data = tmp;
		}

			var ajaxData;
		var ajax = oSettings.ajax;
		var instance = oSettings.oInstance;
		var callback = function ( json ) {
			_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );
			fn( json );
		};

			if ( $.isPlainObject( ajax ) && ajax.data )
		{
			ajaxData = ajax.data;

				var newData = typeof ajaxData === 'function' ?
				ajaxData( data, oSettings ) :  
				ajaxData;                      

			data = typeof ajaxData === 'function' && newData ?
				newData :
				$.extend( true, data, newData );

			delete ajax.data;
		}

			var baseAjax = {
			"data": data,
			"success": function (json) {
				var error = json.error || json.sError;
				if ( error ) {
					_fnLog( oSettings, 0, error );
				}

					oSettings.json = json;
				callback( json );
			},
			"dataType": "json",
			"cache": false,
			"type": oSettings.sServerMethod,
			"error": function (xhr, error, thrown) {
				var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );

					if ( $.inArray( true, ret ) === -1 ) {
					if ( error == "parsererror" ) {
						_fnLog( oSettings, 0, 'Invalid JSON response', 1 );
					}
					else if ( xhr.readyState === 4 ) {
						_fnLog( oSettings, 0, 'Ajax error', 7 );
					}
				}

					_fnProcessingDisplay( oSettings, false );
			}
		};

		oSettings.oAjaxData = data;

		_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );

			if ( oSettings.fnServerData )
		{
			oSettings.fnServerData.call( instance,
				oSettings.sAjaxSource,
				$.map( data, function (val, key) { 
					return { name: key, value: val };
				} ),
				callback,
				oSettings
			);
		}
		else if ( oSettings.sAjaxSource || typeof ajax === 'string' )
		{
			oSettings.jqXHR = $.ajax( $.extend( baseAjax, {
				url: ajax || oSettings.sAjaxSource
			} ) );
		}
		else if ( typeof ajax === 'function' )
		{
			oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );
		}
		else
		{
			oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );

			ajax.data = ajaxData;
		}
	}


	function _fnAjaxUpdate( settings )
	{
		if ( settings.bAjaxDataGet ) {
			settings.iDraw++;
			_fnProcessingDisplay( settings, true );

				_fnBuildAjax(
				settings,
				_fnAjaxParameters( settings ),
				function(json) {
					_fnAjaxUpdateDraw( settings, json );
				}
			);

				return false;
		}
		return true;
	}


	function _fnAjaxParameters( settings )
	{
		var
			columns = settings.aoColumns,
			columnCount = columns.length,
			features = settings.oFeatures,
			preSearch = settings.oPreviousSearch,
			preColSearch = settings.aoPreSearchCols,
			i, data = [], dataProp, column, columnSearch,
			sort = _fnSortFlatten( settings ),
			displayStart = settings._iDisplayStart,
			displayLength = features.bPaginate !== false ?
				settings._iDisplayLength :
				-1;

			var param = function ( name, value ) {
			data.push( { 'name': name, 'value': value } );
		};

		param( 'sEcho',          settings.iDraw );
		param( 'iColumns',       columnCount );
		param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );
		param( 'iDisplayStart',  displayStart );
		param( 'iDisplayLength', displayLength );

		var d = {
			draw:    settings.iDraw,
			columns: [],
			order:   [],
			start:   displayStart,
			length:  displayLength,
			search:  {
				value: preSearch.sSearch,
				regex: preSearch.bRegex
			}
		};

			for ( i=0 ; i<columnCount ; i++ ) {
			column = columns[i];
			columnSearch = preColSearch[i];
			dataProp = typeof column.mData=="function" ? 'function' : column.mData ;

				d.columns.push( {
				data:       dataProp,
				name:       column.sName,
				searchable: column.bSearchable,
				orderable:  column.bSortable,
				search:     {
					value: columnSearch.sSearch,
					regex: columnSearch.bRegex
				}
			} );

				param( "mDataProp_"+i, dataProp );

				if ( features.bFilter ) {
				param( 'sSearch_'+i,     columnSearch.sSearch );
				param( 'bRegex_'+i,      columnSearch.bRegex );
				param( 'bSearchable_'+i, column.bSearchable );
			}

				if ( features.bSort ) {
				param( 'bSortable_'+i, column.bSortable );
			}
		}

			if ( features.bFilter ) {
			param( 'sSearch', preSearch.sSearch );
			param( 'bRegex', preSearch.bRegex );
		}

			if ( features.bSort ) {
			$.each( sort, function ( i, val ) {
				d.order.push( { column: val.col, dir: val.dir } );

					param( 'iSortCol_'+i, val.col );
				param( 'sSortDir_'+i, val.dir );
			} );

				param( 'iSortingCols', sort.length );
		}

		var legacy = DataTable.ext.legacy.ajax;
		if ( legacy === null ) {
			return settings.sAjaxSource ? data : d;
		}

		return legacy ? data : d;
	}


	function _fnAjaxUpdateDraw ( settings, json )
	{
		var compat = function ( old, modern ) {
			return json[old] !== undefined ? json[old] : json[modern];
		};

			var data = _fnAjaxDataSrc( settings, json );
		var draw            = compat( 'sEcho',                'draw' );
		var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );
		var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );

			if ( draw ) {
			if ( draw*1 < settings.iDraw ) {
				return;
			}
			settings.iDraw = draw * 1;
		}

			_fnClearTable( settings );
		settings._iRecordsTotal   = parseInt(recordsTotal, 10);
		settings._iRecordsDisplay = parseInt(recordsFiltered, 10);

			for ( var i=0, ien=data.length ; i<ien ; i++ ) {
			_fnAddData( settings, data[i] );
		}
		settings.aiDisplay = settings.aiDisplayMaster.slice();

			settings.bAjaxDataGet = false;
		_fnDraw( settings );

			if ( ! settings._bInitComplete ) {
			_fnInitComplete( settings, json );
		}

			settings.bAjaxDataGet = true;
		_fnProcessingDisplay( settings, false );
	}


	function _fnAjaxDataSrc ( oSettings, json )
	{
		var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?
			oSettings.ajax.dataSrc :
			oSettings.sAjaxDataProp; 

		if ( dataSrc === 'data' ) {
			return json.aaData || json[dataSrc];
		}

			return dataSrc !== "" ?
			_fnGetObjectDataFn( dataSrc )( json ) :
			json;
	}

	function _fnFeatureHtmlFilter ( settings )
	{
		var classes = settings.oClasses;
		var tableId = settings.sTableId;
		var language = settings.oLanguage;
		var previousSearch = settings.oPreviousSearch;
		var features = settings.aanFeatures;
		var input = '<input type="search" class="'+classes.sFilterInput+'"/>';

			var str = language.sSearch;
		str = str.match(/_INPUT_/) ?
			str.replace('_INPUT_', input) :
			str+input;

			var filter = $('<div/>', {
				'id': ! features.f ? tableId+'_filter' : null,
				'class': classes.sFilter
			} )
			.append( $('<label/>' ).append( str ) );

			var searchFn = function() {
			var n = features.f;
			var val = !this.value ? "" : this.value; 

			if ( val != previousSearch.sSearch ) {
				_fnFilterComplete( settings, {
					"sSearch": val,
					"bRegex": previousSearch.bRegex,
					"bSmart": previousSearch.bSmart ,
					"bCaseInsensitive": previousSearch.bCaseInsensitive
				} );

				settings._iDisplayStart = 0;
				_fnDraw( settings );
			}
		};

			var searchDelay = settings.searchDelay !== null ?
			settings.searchDelay :
			_fnDataSource( settings ) === 'ssp' ?
				400 :
				0;

			var jqFilter = $('input', filter)
			.val( previousSearch.sSearch )
			.attr( 'placeholder', language.sSearchPlaceholder )
			.on(
				'keyup.DT search.DT input.DT paste.DT cut.DT',
				searchDelay ?
					_fnThrottle( searchFn, searchDelay ) :
					searchFn
			)
			.on( 'keypress.DT', function(e) {
				if ( e.keyCode == 13 ) {
					return false;
				}
			} )
			.attr('aria-controls', tableId);

		$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {
			if ( settings === s ) {
				try {
					if ( jqFilter[0] !== document.activeElement ) {
						jqFilter.val( previousSearch.sSearch );
					}
				}
				catch ( e ) {}
			}
		} );

			return filter[0];
	}


	function _fnFilterComplete ( oSettings, oInput, iForce )
	{
		var oPrevSearch = oSettings.oPreviousSearch;
		var aoPrevSearch = oSettings.aoPreSearchCols;
		var fnSaveFilter = function ( oFilter ) {
			oPrevSearch.sSearch = oFilter.sSearch;
			oPrevSearch.bRegex = oFilter.bRegex;
			oPrevSearch.bSmart = oFilter.bSmart;
			oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
		};
		var fnRegex = function ( o ) {
			return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
		};

		_fnColumnTypes( oSettings );

		if ( _fnDataSource( oSettings ) != 'ssp' )
		{
			_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );
			fnSaveFilter( oInput );

			for ( var i=0 ; i<aoPrevSearch.length ; i++ )
			{
				_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
					aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
			}

			_fnFilterCustom( oSettings );
		}
		else
		{
			fnSaveFilter( oInput );
		}

		oSettings.bFiltered = true;
		_fnCallbackFire( oSettings, null, 'search', [oSettings] );
	}


	function _fnFilterCustom( settings )
	{
		var filters = DataTable.ext.search;
		var displayRows = settings.aiDisplay;
		var row, rowIdx;

			for ( var i=0, ien=filters.length ; i<ien ; i++ ) {
			var rows = [];

			for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {
				rowIdx = displayRows[ j ];
				row = settings.aoData[ rowIdx ];

					if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {
					rows.push( rowIdx );
				}
			}

			displayRows.length = 0;
			$.merge( displayRows, rows );
		}
	}


	function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )
	{
		if ( searchStr === '' ) {
			return;
		}

			var data;
		var out = [];
		var display = settings.aiDisplay;
		var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );

			for ( var i=0 ; i<display.length ; i++ ) {
			data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];

				if ( rpSearch.test( data ) ) {
				out.push( display[i] );
			}
		}

			settings.aiDisplay = out;
	}


	function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
	{
		var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
		var prevSearch = settings.oPreviousSearch.sSearch;
		var displayMaster = settings.aiDisplayMaster;
		var display, invalidated, i;
		var filtered = [];

		if ( DataTable.ext.search.length !== 0 ) {
			force = true;
		}

		invalidated = _fnFilterData( settings );

		if ( input.length <= 0 ) {
			settings.aiDisplay = displayMaster.slice();
		}
		else {
			if ( invalidated ||
				 force ||
				 prevSearch.length > input.length ||
				 input.indexOf(prevSearch) !== 0 ||
				 settings.bSorted 
			) {
				settings.aiDisplay = displayMaster.slice();
			}

			display = settings.aiDisplay;

				for ( i=0 ; i<display.length ; i++ ) {
				if ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {
					filtered.push( display[i] );
				}
			}

				settings.aiDisplay = filtered;
		}
	}


	function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )
	{
		search = regex ?
			search :
			_fnEscapeRegex( search );

				if ( smart ) {
			var a = $.map( search.match( /"[^"]+"|[^ ]+/g ) || [''], function ( word ) {
				if ( word.charAt(0) === '"' ) {
					var m = word.match( /^"(.*)"$/ );
					word = m ? m[1] : word;
				}

					return word.replace('"', '');
			} );

				search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';
		}

			return new RegExp( search, caseInsensitive ? 'i' : '' );
	}


	var _fnEscapeRegex = DataTable.util.escapeRegex;

		var __filter_div = $('<div>')[0];
	var __filter_div_textContent = __filter_div.textContent !== undefined;

	function _fnFilterData ( settings )
	{
		var columns = settings.aoColumns;
		var column;
		var i, j, ien, jen, filterData, cellData, row;
		var fomatters = DataTable.ext.type.search;
		var wasInvalidated = false;

			for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			row = settings.aoData[i];

				if ( ! row._aFilterData ) {
				filterData = [];

					for ( j=0, jen=columns.length ; j<jen ; j++ ) {
					column = columns[j];

						if ( column.bSearchable ) {
						cellData = _fnGetCellData( settings, i, j, 'filter' );

							if ( fomatters[ column.sType ] ) {
							cellData = fomatters[ column.sType ]( cellData );
						}

						if ( cellData === null ) {
							cellData = '';
						}

							if ( typeof cellData !== 'string' && cellData.toString ) {
							cellData = cellData.toString();
						}
					}
					else {
						cellData = '';
					}

					if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {
						__filter_div.innerHTML = cellData;
						cellData = __filter_div_textContent ?
							__filter_div.textContent :
							__filter_div.innerText;
					}

						if ( cellData.replace ) {
						cellData = cellData.replace(/[\r\n]/g, '');
					}

						filterData.push( cellData );
				}

					row._aFilterData = filterData;
				row._sFilterRow = filterData.join('  ');
				wasInvalidated = true;
			}
		}

			return wasInvalidated;
	}


	function _fnSearchToCamel ( obj )
	{
		return {
			search:          obj.sSearch,
			smart:           obj.bSmart,
			regex:           obj.bRegex,
			caseInsensitive: obj.bCaseInsensitive
		};
	}



	function _fnSearchToHung ( obj )
	{
		return {
			sSearch:          obj.search,
			bSmart:           obj.smart,
			bRegex:           obj.regex,
			bCaseInsensitive: obj.caseInsensitive
		};
	}

	function _fnFeatureHtmlInfo ( settings )
	{
		var
			tid = settings.sTableId,
			nodes = settings.aanFeatures.i,
			n = $('<div/>', {
				'class': settings.oClasses.sInfo,
				'id': ! nodes ? tid+'_info' : null
			} );

			if ( ! nodes ) {
			settings.aoDrawCallback.push( {
				"fn": _fnUpdateInfo,
				"sName": "information"
			} );

				n
				.attr( 'role', 'status' )
				.attr( 'aria-live', 'polite' );

			$(settings.nTable).attr( 'aria-describedby', tid+'_info' );
		}

			return n[0];
	}


	function _fnUpdateInfo ( settings )
	{
		var nodes = settings.aanFeatures.i;
		if ( nodes.length === 0 ) {
			return;
		}

			var
			lang  = settings.oLanguage,
			start = settings._iDisplayStart+1,
			end   = settings.fnDisplayEnd(),
			max   = settings.fnRecordsTotal(),
			total = settings.fnRecordsDisplay(),
			out   = total ?
				lang.sInfo :
				lang.sInfoEmpty;

			if ( total !== max ) {
			out += ' ' + lang.sInfoFiltered;
		}

		out += lang.sInfoPostFix;
		out = _fnInfoMacros( settings, out );

			var callback = lang.fnInfoCallback;
		if ( callback !== null ) {
			out = callback.call( settings.oInstance,
				settings, start, end, max, total, out
			);
		}

			$(nodes).html( out );
	}


			function _fnInfoMacros ( settings, str )
	{
		var
			formatter  = settings.fnFormatNumber,
			start      = settings._iDisplayStart+1,
			len        = settings._iDisplayLength,
			vis        = settings.fnRecordsDisplay(),
			all        = len === -1;

			return str.
			replace(/_START_/g, formatter.call( settings, start ) ).
			replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).
			replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).
			replace(/_TOTAL_/g, formatter.call( settings, vis ) ).
			replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).
			replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );
	}



	function _fnInitialise ( settings )
	{
		var i, iLen, iAjaxStart=settings.iInitDisplayStart;
		var columns = settings.aoColumns, column;
		var features = settings.oFeatures;
		var deferLoading = settings.bDeferLoading; 

		if ( ! settings.bInitialised ) {
			setTimeout( function(){ _fnInitialise( settings ); }, 200 );
			return;
		}

		_fnAddOptionsHtml( settings );

		_fnBuildHead( settings );
		_fnDrawHead( settings, settings.aoHeader );
		_fnDrawHead( settings, settings.aoFooter );

		_fnProcessingDisplay( settings, true );

		if ( features.bAutoWidth ) {
			_fnCalculateColumnWidths( settings );
		}

			for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {
			column = columns[i];

				if ( column.sWidth ) {
				column.nTh.style.width = _fnStringToCss( column.sWidth );
			}
		}

			_fnCallbackFire( settings, null, 'preInit', [settings] );

		_fnReDraw( settings );

		var dataSrc = _fnDataSource( settings );
		if ( dataSrc != 'ssp' || deferLoading ) {
			if ( dataSrc == 'ajax' ) {
				_fnBuildAjax( settings, [], function(json) {
					var aData = _fnAjaxDataSrc( settings, json );

					for ( i=0 ; i<aData.length ; i++ ) {
						_fnAddData( settings, aData[i] );
					}

					settings.iInitDisplayStart = iAjaxStart;

						_fnReDraw( settings );

						_fnProcessingDisplay( settings, false );
					_fnInitComplete( settings, json );
				}, settings );
			}
			else {
				_fnProcessingDisplay( settings, false );
				_fnInitComplete( settings );
			}
		}
	}


	function _fnInitComplete ( settings, json )
	{
		settings._bInitComplete = true;

		if ( json || settings.oInit.aaData ) {
			_fnAdjustColumnSizing( settings );
		}

			_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );
		_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );
	}


			function _fnLengthChange ( settings, val )
	{
		var len = parseInt( val, 10 );
		settings._iDisplayLength = len;

			_fnLengthOverflow( settings );

		_fnCallbackFire( settings, null, 'length', [settings, len] );
	}


	function _fnFeatureHtmlLength ( settings )
	{
		var
			classes  = settings.oClasses,
			tableId  = settings.sTableId,
			menu     = settings.aLengthMenu,
			d2       = $.isArray( menu[0] ),
			lengths  = d2 ? menu[0] : menu,
			language = d2 ? menu[1] : menu;

			var select = $('<select/>', {
			'name':          tableId+'_length',
			'aria-controls': tableId,
			'class':         classes.sLengthSelect
		} );

			for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {
			select[0][ i ] = new Option(
				typeof language[i] === 'number' ?
					settings.fnFormatNumber( language[i] ) :
					language[i],
				lengths[i]
			);
		}

			var div = $('<div><label/></div>').addClass( classes.sLength );
		if ( ! settings.aanFeatures.l ) {
			div[0].id = tableId+'_length';
		}

			div.children().append(
			settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )
		);

		$('select', div)
			.val( settings._iDisplayLength )
			.on( 'change.DT', function(e) {
				_fnLengthChange( settings, $(this).val() );
				_fnDraw( settings );
			} );

		$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {
			if ( settings === s ) {
				$('select', div).val( len );
			}
		} );

			return div[0];
	}




	function _fnFeatureHtmlPaginate ( settings )
	{
		var
			type   = settings.sPaginationType,
			plugin = DataTable.ext.pager[ type ],
			modern = typeof plugin === 'function',
			redraw = function( settings ) {
				_fnDraw( settings );
			},
			node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],
			features = settings.aanFeatures;

			if ( ! modern ) {
			plugin.fnInit( settings, node, redraw );
		}

		if ( ! features.p )
		{
			node.id = settings.sTableId+'_paginate';

				settings.aoDrawCallback.push( {
				"fn": function( settings ) {
					if ( modern ) {
						var
							start      = settings._iDisplayStart,
							len        = settings._iDisplayLength,
							visRecords = settings.fnRecordsDisplay(),
							all        = len === -1,
							page = all ? 0 : Math.ceil( start / len ),
							pages = all ? 1 : Math.ceil( visRecords / len ),
							buttons = plugin(page, pages),
							i, ien;

							for ( i=0, ien=features.p.length ; i<ien ; i++ ) {
							_fnRenderer( settings, 'pageButton' )(
								settings, features.p[i], i, buttons, page, pages
							);
						}
					}
					else {
						plugin.fnUpdate( settings, redraw );
					}
				},
				"sName": "pagination"
			} );
		}

			return node;
	}


	function _fnPageChange ( settings, action, redraw )
	{
		var
			start     = settings._iDisplayStart,
			len       = settings._iDisplayLength,
			records   = settings.fnRecordsDisplay();

			if ( records === 0 || len === -1 )
		{
			start = 0;
		}
		else if ( typeof action === "number" )
		{
			start = action * len;

				if ( start > records )
			{
				start = 0;
			}
		}
		else if ( action == "first" )
		{
			start = 0;
		}
		else if ( action == "previous" )
		{
			start = len >= 0 ?
				start - len :
				0;

				if ( start < 0 )
			{
			  start = 0;
			}
		}
		else if ( action == "next" )
		{
			if ( start + len < records )
			{
				start += len;
			}
		}
		else if ( action == "last" )
		{
			start = Math.floor( (records-1) / len) * len;
		}
		else
		{
			_fnLog( settings, 0, "Unknown paging action: "+action, 5 );
		}

			var changed = settings._iDisplayStart !== start;
		settings._iDisplayStart = start;

			if ( changed ) {
			_fnCallbackFire( settings, null, 'page', [settings] );

				if ( redraw ) {
				_fnDraw( settings );
			}
		}

			return changed;
	}



	function _fnFeatureHtmlProcessing ( settings )
	{
		return $('<div/>', {
				'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,
				'class': settings.oClasses.sProcessing
			} )
			.html( settings.oLanguage.sProcessing )
			.insertBefore( settings.nTable )[0];
	}


	function _fnProcessingDisplay ( settings, show )
	{
		if ( settings.oFeatures.bProcessing ) {
			$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );
		}

			_fnCallbackFire( settings, null, 'processing', [settings, show] );
	}

	function _fnFeatureHtmlTable ( settings )
	{
		var table = $(settings.nTable);

		table.attr( 'role', 'grid' );

		var scroll = settings.oScroll;

			if ( scroll.sX === '' && scroll.sY === '' ) {
			return settings.nTable;
		}

			var scrollX = scroll.sX;
		var scrollY = scroll.sY;
		var classes = settings.oClasses;
		var caption = table.children('caption');
		var captionSide = caption.length ? caption[0]._captionSide : null;
		var headerClone = $( table[0].cloneNode(false) );
		var footerClone = $( table[0].cloneNode(false) );
		var footer = table.children('tfoot');
		var _div = '<div/>';
		var size = function ( s ) {
			return !s ? null : _fnStringToCss( s );
		};

			if ( ! footer.length ) {
			footer = null;
		}

		var scroller = $( _div, { 'class': classes.sScrollWrapper } )
			.append(
				$(_div, { 'class': classes.sScrollHead } )
					.css( {
						overflow: 'hidden',
						position: 'relative',
						border: 0,
						width: scrollX ? size(scrollX) : '100%'
					} )
					.append(
						$(_div, { 'class': classes.sScrollHeadInner } )
							.css( {
								'box-sizing': 'content-box',
								width: scroll.sXInner || '100%'
							} )
							.append(
								headerClone
									.removeAttr('id')
									.css( 'margin-left', 0 )
									.append( captionSide === 'top' ? caption : null )
									.append(
										table.children('thead')
									)
							)
					)
			)
			.append(
				$(_div, { 'class': classes.sScrollBody } )
					.css( {
						position: 'relative',
						overflow: 'auto',
						width: size( scrollX )
					} )
					.append( table )
			);

			if ( footer ) {
			scroller.append(
				$(_div, { 'class': classes.sScrollFoot } )
					.css( {
						overflow: 'hidden',
						border: 0,
						width: scrollX ? size(scrollX) : '100%'
					} )
					.append(
						$(_div, { 'class': classes.sScrollFootInner } )
							.append(
								footerClone
									.removeAttr('id')
									.css( 'margin-left', 0 )
									.append( captionSide === 'bottom' ? caption : null )
									.append(
										table.children('tfoot')
									)
							)
					)
			);
		}

			var children = scroller.children();
		var scrollHead = children[0];
		var scrollBody = children[1];
		var scrollFoot = footer ? children[2] : null;

		if ( scrollX ) {
			$(scrollBody).on( 'scroll.DT', function (e) {
				var scrollLeft = this.scrollLeft;

					scrollHead.scrollLeft = scrollLeft;

					if ( footer ) {
					scrollFoot.scrollLeft = scrollLeft;
				}
			} );
		}

			$(scrollBody).css(
			scrollY && scroll.bCollapse ? 'max-height' : 'height', 
			scrollY
		);

			settings.nScrollHead = scrollHead;
		settings.nScrollBody = scrollBody;
		settings.nScrollFoot = scrollFoot;

		settings.aoDrawCallback.push( {
			"fn": _fnScrollDraw,
			"sName": "scrolling"
		} );

			return scroller[0];
	}



	function _fnScrollDraw ( settings )
	{
		var
			scroll         = settings.oScroll,
			scrollX        = scroll.sX,
			scrollXInner   = scroll.sXInner,
			scrollY        = scroll.sY,
			barWidth       = scroll.iBarWidth,
			divHeader      = $(settings.nScrollHead),
			divHeaderStyle = divHeader[0].style,
			divHeaderInner = divHeader.children('div'),
			divHeaderInnerStyle = divHeaderInner[0].style,
			divHeaderTable = divHeaderInner.children('table'),
			divBodyEl      = settings.nScrollBody,
			divBody        = $(divBodyEl),
			divBodyStyle   = divBodyEl.style,
			divFooter      = $(settings.nScrollFoot),
			divFooterInner = divFooter.children('div'),
			divFooterTable = divFooterInner.children('table'),
			header         = $(settings.nTHead),
			table          = $(settings.nTable),
			tableEl        = table[0],
			tableStyle     = tableEl.style,
			footer         = settings.nTFoot ? $(settings.nTFoot) : null,
			browser        = settings.oBrowser,
			ie67           = browser.bScrollOversize,
			dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),
			headerTrgEls, footerTrgEls,
			headerSrcEls, footerSrcEls,
			headerCopy, footerCopy,
			headerWidths=[], footerWidths=[],
			headerContent=[], footerContent=[],
			idx, correction, sanityWidth,
			zeroOut = function(nSizer) {
				var style = nSizer.style;
				style.paddingTop = "0";
				style.paddingBottom = "0";
				style.borderTopWidth = "0";
				style.borderBottomWidth = "0";
				style.height = 0;
			};

		var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;

				if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {
			settings.scrollBarVis = scrollBarVis;
			_fnAdjustColumnSizing( settings );
			return; 
		}
		else {
			settings.scrollBarVis = scrollBarVis;
		}


		table.children('thead, tfoot').remove();

			if ( footer ) {
			footerCopy = footer.clone().prependTo( table );
			footerTrgEls = footer.find('tr'); 
			footerSrcEls = footerCopy.find('tr');
		}

		headerCopy = header.clone().prependTo( table );
		headerTrgEls = header.find('tr'); 
		headerSrcEls = headerCopy.find('tr');
		headerCopy.find('th, td').removeAttr('tabindex');



		if ( ! scrollX )
		{
			divBodyStyle.width = '100%';
			divHeader[0].style.width = '100%';
		}

			$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {
			idx = _fnVisibleToColumnIndex( settings, i );
			el.style.width = settings.aoColumns[idx].sWidth;
		} );

			if ( footer ) {
			_fnApplyToChildren( function(n) {
				n.style.width = "";
			}, footerSrcEls );
		}

		sanityWidth = table.outerWidth();
		if ( scrollX === "" ) {
			tableStyle.width = "100%";

			if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
				divBody.css('overflow-y') == "scroll")
			) {
				tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);
			}

			sanityWidth = table.outerWidth();
		}
		else if ( scrollXInner !== "" ) {
			tableStyle.width = _fnStringToCss(scrollXInner);

			sanityWidth = table.outerWidth();
		}


		_fnApplyToChildren( zeroOut, headerSrcEls );

		_fnApplyToChildren( function(nSizer) {
			headerContent.push( nSizer.innerHTML );
			headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
		}, headerSrcEls );

		_fnApplyToChildren( function(nToSize, i) {
			if ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {
				nToSize.style.width = headerWidths[i];
			}
		}, headerTrgEls );

			$(headerSrcEls).height(0);

		if ( footer )
		{
			_fnApplyToChildren( zeroOut, footerSrcEls );

				_fnApplyToChildren( function(nSizer) {
				footerContent.push( nSizer.innerHTML );
				footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
			}, footerSrcEls );

				_fnApplyToChildren( function(nToSize, i) {
				nToSize.style.width = footerWidths[i];
			}, footerTrgEls );

				$(footerSrcEls).height(0);
		}



		_fnApplyToChildren( function(nSizer, i) {
			nSizer.innerHTML = '<div class="dataTables_sizing">'+headerContent[i]+'</div>';
			nSizer.childNodes[0].style.height = "0";
			nSizer.childNodes[0].style.overflow = "hidden";
			nSizer.style.width = headerWidths[i];
		}, headerSrcEls );

			if ( footer )
		{
			_fnApplyToChildren( function(nSizer, i) {
				nSizer.innerHTML = '<div class="dataTables_sizing">'+footerContent[i]+'</div>';
				nSizer.childNodes[0].style.height = "0";
				nSizer.childNodes[0].style.overflow = "hidden";
				nSizer.style.width = footerWidths[i];
			}, footerSrcEls );
		}

		if ( table.outerWidth() < sanityWidth )
		{
			correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
				divBody.css('overflow-y') == "scroll")) ?
					sanityWidth+barWidth :
					sanityWidth;

			if ( ie67 && (divBodyEl.scrollHeight >
				divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
			) {
				tableStyle.width = _fnStringToCss( correction-barWidth );
			}

			if ( scrollX === "" || scrollXInner !== "" ) {
				_fnLog( settings, 1, 'Possible column misalignment', 6 );
			}
		}
		else
		{
			correction = '100%';
		}

		divBodyStyle.width = _fnStringToCss( correction );
		divHeaderStyle.width = _fnStringToCss( correction );

			if ( footer ) {
			settings.nScrollFoot.style.width = _fnStringToCss( correction );
		}


		if ( ! scrollY ) {
			if ( ie67 ) {
				divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );
			}
		}

		var iOuterWidth = table.outerWidth();
		divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );
		divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );

		var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
		var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );
		divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";

			if ( footer ) {
			divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );
			divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );
			divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";
		}

		table.children('colgroup').insertBefore( table.children('thead') );

		divBody.scroll();

		if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {
			divBodyEl.scrollTop = 0;
		}
	}



	function _fnApplyToChildren( fn, an1, an2 )
	{
		var index=0, i=0, iLen=an1.length;
		var nNode1, nNode2;

			while ( i < iLen ) {
			nNode1 = an1[i].firstChild;
			nNode2 = an2 ? an2[i].firstChild : null;

				while ( nNode1 ) {
				if ( nNode1.nodeType === 1 ) {
					if ( an2 ) {
						fn( nNode1, nNode2, index );
					}
					else {
						fn( nNode1, index );
					}

						index++;
				}

					nNode1 = nNode1.nextSibling;
				nNode2 = an2 ? nNode2.nextSibling : null;
			}

				i++;
		}
	}



				var __re_html_remove = /<.*?>/g;


	function _fnCalculateColumnWidths ( oSettings )
	{
		var
			table = oSettings.nTable,
			columns = oSettings.aoColumns,
			scroll = oSettings.oScroll,
			scrollY = scroll.sY,
			scrollX = scroll.sX,
			scrollXInner = scroll.sXInner,
			columnCount = columns.length,
			visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),
			headerCells = $('th', oSettings.nTHead),
			tableWidthAttr = table.getAttribute('width'), 
			tableContainer = table.parentNode,
			userInputs = false,
			i, column, columnIdx, width, outerWidth,
			browser = oSettings.oBrowser,
			ie67 = browser.bScrollOversize;

			var styleWidth = table.style.width;
		if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {
			tableWidthAttr = styleWidth;
		}

		for ( i=0 ; i<visibleColumns.length ; i++ ) {
			column = columns[ visibleColumns[i] ];

				if ( column.sWidth !== null ) {
				column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );

					userInputs = true;
			}
		}

		if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&
		     columnCount == _fnVisbleColumns( oSettings ) &&
		     columnCount == headerCells.length
		) {
			for ( i=0 ; i<columnCount ; i++ ) {
				var colIdx = _fnVisibleToColumnIndex( oSettings, i );

					if ( colIdx !== null ) {
					columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );
				}
			}
		}
		else
		{
			var tmpTable = $(table).clone() 
				.css( 'visibility', 'hidden' )
				.removeAttr( 'id' );

			tmpTable.find('tbody tr').remove();
			var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );

			tmpTable.find('thead, tfoot').remove();
			tmpTable
				.append( $(oSettings.nTHead).clone() )
				.append( $(oSettings.nTFoot).clone() );

			tmpTable.find('tfoot th, tfoot td').css('width', '');

			headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );

				for ( i=0 ; i<visibleColumns.length ; i++ ) {
				column = columns[ visibleColumns[i] ];

					headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
					_fnStringToCss( column.sWidthOrig ) :
					'';

				if ( column.sWidthOrig && scrollX ) {
					$( headerCells[i] ).append( $('<div/>').css( {
						width: column.sWidthOrig,
						margin: 0,
						padding: 0,
						border: 0,
						height: 1
					} ) );
				}
			}

			if ( oSettings.aoData.length ) {
				for ( i=0 ; i<visibleColumns.length ; i++ ) {
					columnIdx = visibleColumns[i];
					column = columns[ columnIdx ];

						$( _fnGetWidestNode( oSettings, columnIdx ) )
						.clone( false )
						.append( column.sContentPadding )
						.appendTo( tr );
				}
			}

			$('[name]', tmpTable).removeAttr('name');

			var holder = $('<div/>').css( scrollX || scrollY ?
					{
						position: 'absolute',
						top: 0,
						left: 0,
						height: 1,
						right: 0,
						overflow: 'hidden'
					} :
					{}
				)
				.append( tmpTable )
				.appendTo( tableContainer );

			if ( scrollX && scrollXInner ) {
				tmpTable.width( scrollXInner );
			}
			else if ( scrollX ) {
				tmpTable.css( 'width', 'auto' );
				tmpTable.removeAttr('width');

				if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {
					tmpTable.width( tableContainer.clientWidth );
				}
			}
			else if ( scrollY ) {
				tmpTable.width( tableContainer.clientWidth );
			}
			else if ( tableWidthAttr ) {
				tmpTable.width( tableWidthAttr );
			}

			var total = 0;
			for ( i=0 ; i<visibleColumns.length ; i++ ) {
				var cell = $(headerCells[i]);
				var border = cell.outerWidth() - cell.width();

				var bounding = browser.bBounding ?
					Math.ceil( headerCells[i].getBoundingClientRect().width ) :
					cell.outerWidth();

				total += bounding;

				columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );
			}

				table.style.width = _fnStringToCss( total );

			holder.remove();
		}

		if ( tableWidthAttr ) {
			table.style.width = _fnStringToCss( tableWidthAttr );
		}

			if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {
			var bindResize = function () {
				$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {
					_fnAdjustColumnSizing( oSettings );
				} ) );
			};

			if ( ie67 ) {
				setTimeout( bindResize, 1000 );
			}
			else {
				bindResize();
			}

				oSettings._reszEvt = true;
		}
	}


	var _fnThrottle = DataTable.util.throttle;


	function _fnConvertToWidth ( width, parent )
	{
		if ( ! width ) {
			return 0;
		}

			var n = $('<div/>')
			.css( 'width', _fnStringToCss( width ) )
			.appendTo( parent || document.body );

			var val = n[0].offsetWidth;
		n.remove();

			return val;
	}


	function _fnGetWidestNode( settings, colIdx )
	{
		var idx = _fnGetMaxLenString( settings, colIdx );
		if ( idx < 0 ) {
			return null;
		}

			var data = settings.aoData[ idx ];
		return ! data.nTr ? 
			$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :
			data.anCells[ colIdx ];
	}


	function _fnGetMaxLenString( settings, colIdx )
	{
		var s, max=-1, maxIdx = -1;

			for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			s = _fnGetCellData( settings, i, colIdx, 'display' )+'';
			s = s.replace( __re_html_remove, '' );
			s = s.replace( /&nbsp;/g, ' ' );

				if ( s.length > max ) {
				max = s.length;
				maxIdx = i;
			}
		}

			return maxIdx;
	}


	function _fnStringToCss( s )
	{
		if ( s === null ) {
			return '0px';
		}

			if ( typeof s == 'number' ) {
			return s < 0 ?
				'0px' :
				s+'px';
		}

		return s.match(/\d$/) ?
			s+'px' :
			s;
	}



				function _fnSortFlatten ( settings )
	{
		var
			i, iLen, k, kLen,
			aSort = [],
			aiOrig = [],
			aoColumns = settings.aoColumns,
			aDataSort, iCol, sType, srcCol,
			fixed = settings.aaSortingFixed,
			fixedObj = $.isPlainObject( fixed ),
			nestedSort = [],
			add = function ( a ) {
				if ( a.length && ! $.isArray( a[0] ) ) {
					nestedSort.push( a );
				}
				else {
					$.merge( nestedSort, a );
				}
			};

		if ( $.isArray( fixed ) ) {
			add( fixed );
		}

			if ( fixedObj && fixed.pre ) {
			add( fixed.pre );
		}

			add( settings.aaSorting );

			if (fixedObj && fixed.post ) {
			add( fixed.post );
		}

			for ( i=0 ; i<nestedSort.length ; i++ )
		{
			srcCol = nestedSort[i][0];
			aDataSort = aoColumns[ srcCol ].aDataSort;

				for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
			{
				iCol = aDataSort[k];
				sType = aoColumns[ iCol ].sType || 'string';

					if ( nestedSort[i]._idx === undefined ) {
					nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );
				}

					aSort.push( {
					src:       srcCol,
					col:       iCol,
					dir:       nestedSort[i][1],
					index:     nestedSort[i]._idx,
					type:      sType,
					formatter: DataTable.ext.type.order[ sType+"-pre" ]
				} );
			}
		}

			return aSort;
	}

	function _fnSort ( oSettings )
	{
		var
			i, ien, iLen, j, jLen, k, kLen,
			sDataType, nTh,
			aiOrig = [],
			oExtSort = DataTable.ext.type.order,
			aoData = oSettings.aoData,
			aoColumns = oSettings.aoColumns,
			aDataSort, data, iCol, sType, oSort,
			formatters = 0,
			sortCol,
			displayMaster = oSettings.aiDisplayMaster,
			aSort;

		_fnColumnTypes( oSettings );

			aSort = _fnSortFlatten( oSettings );

			for ( i=0, ien=aSort.length ; i<ien ; i++ ) {
			sortCol = aSort[i];

			if ( sortCol.formatter ) {
				formatters++;
			}

			_fnSortData( oSettings, sortCol.col );
		}

		if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )
		{
			for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {
				aiOrig[ displayMaster[i] ] = i;
			}

			if ( formatters === aSort.length ) {
				displayMaster.sort( function ( a, b ) {
					var
						x, y, k, test, sort,
						len=aSort.length,
						dataA = aoData[a]._aSortData,
						dataB = aoData[b]._aSortData;

						for ( k=0 ; k<len ; k++ ) {
						sort = aSort[k];

							x = dataA[ sort.col ];
						y = dataB[ sort.col ];

							test = x<y ? -1 : x>y ? 1 : 0;
						if ( test !== 0 ) {
							return sort.dir === 'asc' ? test : -test;
						}
					}

						x = aiOrig[a];
					y = aiOrig[b];
					return x<y ? -1 : x>y ? 1 : 0;
				} );
			}
			else {
				displayMaster.sort( function ( a, b ) {
					var
						x, y, k, l, test, sort, fn,
						len=aSort.length,
						dataA = aoData[a]._aSortData,
						dataB = aoData[b]._aSortData;

						for ( k=0 ; k<len ; k++ ) {
						sort = aSort[k];

							x = dataA[ sort.col ];
						y = dataB[ sort.col ];

							fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];
						test = fn( x, y );
						if ( test !== 0 ) {
							return test;
						}
					}

						x = aiOrig[a];
					y = aiOrig[b];
					return x<y ? -1 : x>y ? 1 : 0;
				} );
			}
		}

		oSettings.bSorted = true;
	}


			function _fnSortAria ( settings )
	{
		var label;
		var nextSort;
		var columns = settings.aoColumns;
		var aSort = _fnSortFlatten( settings );
		var oAria = settings.oLanguage.oAria;

		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
		{
			var col = columns[i];
			var asSorting = col.asSorting;
			var sTitle = col.sTitle.replace( /<.*?>/g, "" );
			var th = col.nTh;

			th.removeAttribute('aria-sort');

			if ( col.bSortable ) {
				if ( aSort.length > 0 && aSort[0].col == i ) {
					th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );
					nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];
				}
				else {
					nextSort = asSorting[0];
				}

					label = sTitle + ( nextSort === "asc" ?
					oAria.sSortAscending :
					oAria.sSortDescending
				);
			}
			else {
				label = sTitle;
			}

				th.setAttribute('aria-label', label);
		}
	}


	function _fnSortListener ( settings, colIdx, append, callback )
	{
		var col = settings.aoColumns[ colIdx ];
		var sorting = settings.aaSorting;
		var asSorting = col.asSorting;
		var nextSortIdx;
		var next = function ( a, overflow ) {
			var idx = a._idx;
			if ( idx === undefined ) {
				idx = $.inArray( a[1], asSorting );
			}

				return idx+1 < asSorting.length ?
				idx+1 :
				overflow ?
					null :
					0;
		};

		if ( typeof sorting[0] === 'number' ) {
			sorting = settings.aaSorting = [ sorting ];
		}

		if ( append && settings.oFeatures.bSortMulti ) {
			var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );

				if ( sortIdx !== -1 ) {
				nextSortIdx = next( sorting[sortIdx], true );

					if ( nextSortIdx === null && sorting.length === 1 ) {
					nextSortIdx = 0; 
				}

					if ( nextSortIdx === null ) {
					sorting.splice( sortIdx, 1 );
				}
				else {
					sorting[sortIdx][1] = asSorting[ nextSortIdx ];
					sorting[sortIdx]._idx = nextSortIdx;
				}
			}
			else {
				sorting.push( [ colIdx, asSorting[0], 0 ] );
				sorting[sorting.length-1]._idx = 0;
			}
		}
		else if ( sorting.length && sorting[0][0] == colIdx ) {
			nextSortIdx = next( sorting[0] );

				sorting.length = 1;
			sorting[0][1] = asSorting[ nextSortIdx ];
			sorting[0]._idx = nextSortIdx;
		}
		else {
			sorting.length = 0;
			sorting.push( [ colIdx, asSorting[0] ] );
			sorting[0]._idx = 0;
		}

		_fnReDraw( settings );

		if ( typeof callback == 'function' ) {
			callback( settings );
		}
	}


	function _fnSortAttachListener ( settings, attachTo, colIdx, callback )
	{
		var col = settings.aoColumns[ colIdx ];

			_fnBindAction( attachTo, {}, function (e) {
			if ( col.bSortable === false ) {
				return;
			}

			if ( settings.oFeatures.bProcessing ) {
				_fnProcessingDisplay( settings, true );

					setTimeout( function() {
					_fnSortListener( settings, colIdx, e.shiftKey, callback );

					if ( _fnDataSource( settings ) !== 'ssp' ) {
						_fnProcessingDisplay( settings, false );
					}
				}, 0 );
			}
			else {
				_fnSortListener( settings, colIdx, e.shiftKey, callback );
			}
		} );
	}


	function _fnSortingClasses( settings )
	{
		var oldSort = settings.aLastSort;
		var sortClass = settings.oClasses.sSortColumn;
		var sort = _fnSortFlatten( settings );
		var features = settings.oFeatures;
		var i, ien, colIdx;

			if ( features.bSort && features.bSortClasses ) {
			for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {
				colIdx = oldSort[i].src;

				$( _pluck( settings.aoData, 'anCells', colIdx ) )
					.removeClass( sortClass + (i<2 ? i+1 : 3) );
			}

			for ( i=0, ien=sort.length ; i<ien ; i++ ) {
				colIdx = sort[i].src;

					$( _pluck( settings.aoData, 'anCells', colIdx ) )
					.addClass( sortClass + (i<2 ? i+1 : 3) );
			}
		}

			settings.aLastSort = sort;
	}


	function _fnSortData( settings, idx )
	{
		var column = settings.aoColumns[ idx ];
		var customSort = DataTable.ext.order[ column.sSortDataType ];
		var customData;

			if ( customSort ) {
			customData = customSort.call( settings.oInstance, settings, idx,
				_fnColumnIndexToVisible( settings, idx )
			);
		}

		var row, cellData;
		var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];

			for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			row = settings.aoData[i];

				if ( ! row._aSortData ) {
				row._aSortData = [];
			}

				if ( ! row._aSortData[idx] || customSort ) {
				cellData = customSort ?
					customData[i] : 
					_fnGetCellData( settings, i, idx, 'sort' );

					row._aSortData[ idx ] = formatter ?
					formatter( cellData ) :
					cellData;
			}
		}
	}



	function _fnSaveState ( settings )
	{
		if ( !settings.oFeatures.bStateSave || settings.bDestroying )
		{
			return;
		}

		var state = {
			time:    +new Date(),
			start:   settings._iDisplayStart,
			length:  settings._iDisplayLength,
			order:   $.extend( true, [], settings.aaSorting ),
			search:  _fnSearchToCamel( settings.oPreviousSearch ),
			columns: $.map( settings.aoColumns, function ( col, i ) {
				return {
					visible: col.bVisible,
					search: _fnSearchToCamel( settings.aoPreSearchCols[i] )
				};
			} )
		};

			_fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );

			settings.oSavedState = state;
		settings.fnStateSaveCallback.call( settings.oInstance, settings, state );
	}


	function _fnLoadState ( settings, oInit, callback )
	{
		var i, ien;
		var columns = settings.aoColumns;
		var loaded = function ( s ) {
			if ( ! s || ! s.time ) {
				callback();
				return;
			}

			var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );
			if ( $.inArray( false, abStateLoad ) !== -1 ) {
				callback();
				return;
			}

			var duration = settings.iStateDuration;
			if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {
				callback();
				return;
			}

			if ( s.columns && columns.length !== s.columns.length ) {
				callback();
				return;
			}

			settings.oLoadedState = $.extend( true, {}, s );

			if ( s.start !== undefined ) {
				settings._iDisplayStart    = s.start;
				settings.iInitDisplayStart = s.start;
			}
			if ( s.length !== undefined ) {
				settings._iDisplayLength   = s.length;
			}

			if ( s.order !== undefined ) {
				settings.aaSorting = [];
				$.each( s.order, function ( i, col ) {
					settings.aaSorting.push( col[0] >= columns.length ?
						[ 0, col[1] ] :
						col
					);
				} );
			}

			if ( s.search !== undefined ) {
				$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );
			}

			if ( s.columns ) {
				for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {
					var col = s.columns[i];

					if ( col.visible !== undefined ) {
						columns[i].bVisible = col.visible;
					}

					if ( col.search !== undefined ) {
						$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );
					}
				}
			}

				_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );
			callback();
		}

			if ( ! settings.oFeatures.bStateSave ) {
			callback();
			return;
		}

			var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );

			if ( state !== undefined ) {
			loaded( state );
		}
	}


	function _fnSettingsFromNode ( table )
	{
		var settings = DataTable.settings;
		var idx = $.inArray( table, _pluck( settings, 'nTable' ) );

			return idx !== -1 ?
			settings[ idx ] :
			null;
	}


	function _fnLog( settings, level, msg, tn )
	{
		msg = 'DataTables warning: '+
			(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;

			if ( tn ) {
			msg += '. For more information about this error, please see '+
			'http://datatables.net/tn/'+tn;
		}

			if ( ! level  ) {
			var ext = DataTable.ext;
			var type = ext.sErrMode || ext.errMode;

				if ( settings ) {
				_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );
			}

				if ( type == 'alert' ) {
				alert( msg );
			}
			else if ( type == 'throw' ) {
				throw new Error(msg);
			}
			else if ( typeof type == 'function' ) {
				type( settings, tn, msg );
			}
		}
		else if ( window.console && console.log ) {
			console.log( msg );
		}
	}


	function _fnMap( ret, src, name, mappedName )
	{
		if ( $.isArray( name ) ) {
			$.each( name, function (i, val) {
				if ( $.isArray( val ) ) {
					_fnMap( ret, src, val[0], val[1] );
				}
				else {
					_fnMap( ret, src, val );
				}
			} );

				return;
		}

			if ( mappedName === undefined ) {
			mappedName = name;
		}

			if ( src[name] !== undefined ) {
			ret[mappedName] = src[name];
		}
	}


	function _fnExtend( out, extender, breakRefs )
	{
		var val;

			for ( var prop in extender ) {
			if ( extender.hasOwnProperty(prop) ) {
				val = extender[prop];

					if ( $.isPlainObject( val ) ) {
					if ( ! $.isPlainObject( out[prop] ) ) {
						out[prop] = {};
					}
					$.extend( true, out[prop], val );
				}
				else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {
					out[prop] = val.slice();
				}
				else {
					out[prop] = val;
				}
			}
		}

			return out;
	}


	function _fnBindAction( n, oData, fn )
	{
		$(n)
			.on( 'click.DT', oData, function (e) {
					$(n).blur(); 
					fn(e);
				} )
			.on( 'keypress.DT', oData, function (e){
					if ( e.which === 13 ) {
						e.preventDefault();
						fn(e);
					}
				} )
			.on( 'selectstart.DT', function () {
					return false;
				} );
	}


	function _fnCallbackReg( oSettings, sStore, fn, sName )
	{
		if ( fn )
		{
			oSettings[sStore].push( {
				"fn": fn,
				"sName": sName
			} );
		}
	}


	function _fnCallbackFire( settings, callbackArr, eventName, args )
	{
		var ret = [];

			if ( callbackArr ) {
			ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {
				return val.fn.apply( settings.oInstance, args );
			} );
		}

			if ( eventName !== null ) {
			var e = $.Event( eventName+'.dt' );

				$(settings.nTable).trigger( e, args );

				ret.push( e.result );
		}

			return ret;
	}


			function _fnLengthOverflow ( settings )
	{
		var
			start = settings._iDisplayStart,
			end = settings.fnDisplayEnd(),
			len = settings._iDisplayLength;

		if ( start >= end )
		{
			start = end - len;
		}

		start -= (start % len);

			if ( len === -1 || start < 0 )
		{
			start = 0;
		}

			settings._iDisplayStart = start;
	}


			function _fnRenderer( settings, type )
	{
		var renderer = settings.renderer;
		var host = DataTable.ext.renderer[type];

			if ( $.isPlainObject( renderer ) && renderer[type] ) {
			return host[renderer[type]] || host._;
		}
		else if ( typeof renderer === 'string' ) {
			return host[renderer] || host._;
		}

		return host._;
	}


	function _fnDataSource ( settings )
	{
		if ( settings.oFeatures.bServerSide ) {
			return 'ssp';
		}
		else if ( settings.ajax || settings.sAjaxSource ) {
			return 'ajax';
		}
		return 'dom';
	}




	var __apiStruct = [];


	var __arrayProto = Array.prototype;


	var _toSettings = function ( mixed )
	{
		var idx, jq;
		var settings = DataTable.settings;
		var tables = $.map( settings, function (el, i) {
			return el.nTable;
		} );

			if ( ! mixed ) {
			return [];
		}
		else if ( mixed.nTable && mixed.oApi ) {
			return [ mixed ];
		}
		else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {
			idx = $.inArray( mixed, tables );
			return idx !== -1 ? [ settings[idx] ] : null;
		}
		else if ( mixed && typeof mixed.settings === 'function' ) {
			return mixed.settings().toArray();
		}
		else if ( typeof mixed === 'string' ) {
			jq = $(mixed);
		}
		else if ( mixed instanceof $ ) {
			jq = mixed;
		}

			if ( jq ) {
			return jq.map( function(i) {
				idx = $.inArray( this, tables );
				return idx !== -1 ? settings[idx] : null;
			} ).toArray();
		}
	};


	_Api = function ( context, data )
	{
		if ( ! (this instanceof _Api) ) {
			return new _Api( context, data );
		}

			var settings = [];
		var ctxSettings = function ( o ) {
			var a = _toSettings( o );
			if ( a ) {
				settings = settings.concat( a );
			}
		};

			if ( $.isArray( context ) ) {
			for ( var i=0, ien=context.length ; i<ien ; i++ ) {
				ctxSettings( context[i] );
			}
		}
		else {
			ctxSettings( context );
		}

		this.context = _unique( settings );

		if ( data ) {
			$.merge( this, data );
		}

		this.selector = {
			rows: null,
			cols: null,
			opts: null
		};

			_Api.extend( this, this, __apiStruct );
	};

		DataTable.Api = _Api;

	$.extend( _Api.prototype, {
		any: function ()
		{
			return this.count() !== 0;
		},


				concat:  __arrayProto.concat,


				context: [], 


				count: function ()
		{
			return this.flatten().length;
		},


				each: function ( fn )
		{
			for ( var i=0, ien=this.length ; i<ien; i++ ) {
				fn.call( this, this[i], i, this );
			}

				return this;
		},


				eq: function ( idx )
		{
			var ctx = this.context;

				return ctx.length > idx ?
				new _Api( ctx[idx], this[idx] ) :
				null;
		},


				filter: function ( fn )
		{
			var a = [];

				if ( __arrayProto.filter ) {
				a = __arrayProto.filter.call( this, fn, this );
			}
			else {
				for ( var i=0, ien=this.length ; i<ien ; i++ ) {
					if ( fn.call( this, this[i], i, this ) ) {
						a.push( this[i] );
					}
				}
			}

				return new _Api( this.context, a );
		},


				flatten: function ()
		{
			var a = [];
			return new _Api( this.context, a.concat.apply( a, this.toArray() ) );
		},


				join:    __arrayProto.join,


				indexOf: __arrayProto.indexOf || function (obj, start)
		{
			for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {
				if ( this[i] === obj ) {
					return i;
				}
			}
			return -1;
		},

			iterator: function ( flatten, type, fn, alwaysNew ) {
			var
				a = [], ret,
				i, ien, j, jen,
				context = this.context,
				rows, items, item,
				selector = this.selector;

			if ( typeof flatten === 'string' ) {
				alwaysNew = fn;
				fn = type;
				type = flatten;
				flatten = false;
			}

				for ( i=0, ien=context.length ; i<ien ; i++ ) {
				var apiInst = new _Api( context[i] );

					if ( type === 'table' ) {
					ret = fn.call( apiInst, context[i], i );

						if ( ret !== undefined ) {
						a.push( ret );
					}
				}
				else if ( type === 'columns' || type === 'rows' ) {
					ret = fn.call( apiInst, context[i], this[i], i );

						if ( ret !== undefined ) {
						a.push( ret );
					}
				}
				else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {
					items = this[i];

						if ( type === 'column-rows' ) {
						rows = _selector_row_indexes( context[i], selector.opts );
					}

						for ( j=0, jen=items.length ; j<jen ; j++ ) {
						item = items[j];

							if ( type === 'cell' ) {
							ret = fn.call( apiInst, context[i], item.row, item.column, i, j );
						}
						else {
							ret = fn.call( apiInst, context[i], item, i, j, rows );
						}

							if ( ret !== undefined ) {
							a.push( ret );
						}
					}
				}
			}

				if ( a.length || alwaysNew ) {
				var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );
				var apiSelector = api.selector;
				apiSelector.rows = selector.rows;
				apiSelector.cols = selector.cols;
				apiSelector.opts = selector.opts;
				return api;
			}
			return this;
		},


				lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)
		{
			return this.indexOf.apply( this.toArray.reverse(), arguments );
		},


				length:  0,


				map: function ( fn )
		{
			var a = [];

				if ( __arrayProto.map ) {
				a = __arrayProto.map.call( this, fn, this );
			}
			else {
				for ( var i=0, ien=this.length ; i<ien ; i++ ) {
					a.push( fn.call( this, this[i], i ) );
				}
			}

				return new _Api( this.context, a );
		},


				pluck: function ( prop )
		{
			return this.map( function ( el ) {
				return el[ prop ];
			} );
		},

			pop:     __arrayProto.pop,


				push:    __arrayProto.push,


		reduce: __arrayProto.reduce || function ( fn, init )
		{
			return _fnReduce( this, fn, init, 0, this.length, 1 );
		},


				reduceRight: __arrayProto.reduceRight || function ( fn, init )
		{
			return _fnReduce( this, fn, init, this.length-1, -1, -1 );
		},


				reverse: __arrayProto.reverse,


		selector: null,


				shift:   __arrayProto.shift,


				slice: function () {
			return new _Api( this.context, this );
		},


				sort:    __arrayProto.sort, 


				splice:  __arrayProto.splice,


				toArray: function ()
		{
			return __arrayProto.slice.call( this );
		},


				to$: function ()
		{
			return $( this );
		},


				toJQuery: function ()
		{
			return $( this );
		},


				unique: function ()
		{
			return new _Api( this.context, _unique(this) );
		},


				unshift: __arrayProto.unshift
	} );


			_Api.extend = function ( scope, obj, ext )
	{
		if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {
			return;
		}

			var
			i, ien,
			j, jen,
			struct, inner,
			methodScoping = function ( scope, fn, struc ) {
				return function () {
					var ret = fn.apply( scope, arguments );

					_Api.extend( ret, ret, struc.methodExt );
					return ret;
				};
			};

			for ( i=0, ien=ext.length ; i<ien ; i++ ) {
			struct = ext[i];

			obj[ struct.name ] = typeof struct.val === 'function' ?
				methodScoping( scope, struct.val, struct ) :
				$.isPlainObject( struct.val ) ?
					{} :
					struct.val;

				obj[ struct.name ].__dt_wrapper = true;

			_Api.extend( scope, obj[ struct.name ], struct.propExt );
		}
	};






		_Api.register = _api_register = function ( name, val )
	{
		if ( $.isArray( name ) ) {
			for ( var j=0, jen=name.length ; j<jen ; j++ ) {
				_Api.register( name[j], val );
			}
			return;
		}

			var
			i, ien,
			heir = name.split('.'),
			struct = __apiStruct,
			key, method;

			var find = function ( src, name ) {
			for ( var i=0, ien=src.length ; i<ien ; i++ ) {
				if ( src[i].name === name ) {
					return src[i];
				}
			}
			return null;
		};

			for ( i=0, ien=heir.length ; i<ien ; i++ ) {
			method = heir[i].indexOf('()') !== -1;
			key = method ?
				heir[i].replace('()', '') :
				heir[i];

				var src = find( struct, key );
			if ( ! src ) {
				src = {
					name:      key,
					val:       {},
					methodExt: [],
					propExt:   []
				};
				struct.push( src );
			}

				if ( i === ien-1 ) {
				src.val = val;
			}
			else {
				struct = method ?
					src.methodExt :
					src.propExt;
			}
		}
	};


			_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {
		_Api.register( pluralName, val );

			_Api.register( singularName, function () {
			var ret = val.apply( this, arguments );

				if ( ret === this ) {
				return this;
			}
			else if ( ret instanceof _Api ) {
				return ret.length ?
					$.isArray( ret[0] ) ?
						new _Api( ret.context, ret[0] ) : 
						ret[0] :
					undefined;
			}

			return ret;
		} );
	};


	var __table_selector = function ( selector, a )
	{
		if ( typeof selector === 'number' ) {
			return [ a[ selector ] ];
		}

		var nodes = $.map( a, function (el, i) {
			return el.nTable;
		} );

			return $(nodes)
			.filter( selector )
			.map( function (i) {
				var idx = $.inArray( this, nodes );
				return a[ idx ];
			} )
			.toArray();
	};



	_api_register( 'tables()', function ( selector ) {
		return selector ?
			new _Api( __table_selector( selector, this.context ) ) :
			this;
	} );


			_api_register( 'table()', function ( selector ) {
		var tables = this.tables( selector );
		var ctx = tables.context;

		return ctx.length ?
			new _Api( ctx[0] ) :
			tables;
	} );


			_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTable;
		}, 1 );
	} );


			_api_registerPlural( 'tables().body()', 'table().body()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTBody;
		}, 1 );
	} );


			_api_registerPlural( 'tables().header()', 'table().header()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTHead;
		}, 1 );
	} );


			_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTFoot;
		}, 1 );
	} );


			_api_registerPlural( 'tables().containers()', 'table().container()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTableWrapper;
		}, 1 );
	} );



	_api_register( 'draw()', function ( paging ) {
		return this.iterator( 'table', function ( settings ) {
			if ( paging === 'page' ) {
				_fnDraw( settings );
			}
			else {
				if ( typeof paging === 'string' ) {
					paging = paging === 'full-hold' ?
						false :
						true;
				}

					_fnReDraw( settings, paging===false );
			}
		} );
	} );



	_api_register( 'page()', function ( action ) {
		if ( action === undefined ) {
			return this.page.info().page; 
		}

		return this.iterator( 'table', function ( settings ) {
			_fnPageChange( settings, action );
		} );
	} );


	_api_register( 'page.info()', function ( action ) {
		if ( this.context.length === 0 ) {
			return undefined;
		}

			var
			settings   = this.context[0],
			start      = settings._iDisplayStart,
			len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
			visRecords = settings.fnRecordsDisplay(),
			all        = len === -1;

			return {
			"page":           all ? 0 : Math.floor( start / len ),
			"pages":          all ? 1 : Math.ceil( visRecords / len ),
			"start":          start,
			"end":            settings.fnDisplayEnd(),
			"length":         len,
			"recordsTotal":   settings.fnRecordsTotal(),
			"recordsDisplay": visRecords,
			"serverSide":     _fnDataSource( settings ) === 'ssp'
		};
	} );


	_api_register( 'page.len()', function ( len ) {
		if ( len === undefined ) {
			return this.context.length !== 0 ?
				this.context[0]._iDisplayLength :
				undefined;
		}

		return this.iterator( 'table', function ( settings ) {
			_fnLengthChange( settings, len );
		} );
	} );



				var __reload = function ( settings, holdPosition, callback ) {
		if ( callback ) {
			var api = new _Api( settings );

				api.one( 'draw', function () {
				callback( api.ajax.json() );
			} );
		}

			if ( _fnDataSource( settings ) == 'ssp' ) {
			_fnReDraw( settings, holdPosition );
		}
		else {
			_fnProcessingDisplay( settings, true );

			var xhr = settings.jqXHR;
			if ( xhr && xhr.readyState !== 4 ) {
				xhr.abort();
			}

			_fnBuildAjax( settings, [], function( json ) {
				_fnClearTable( settings );

					var data = _fnAjaxDataSrc( settings, json );
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					_fnAddData( settings, data[i] );
				}

					_fnReDraw( settings, holdPosition );
				_fnProcessingDisplay( settings, false );
			} );
		}
	};


	_api_register( 'ajax.json()', function () {
		var ctx = this.context;

			if ( ctx.length > 0 ) {
			return ctx[0].json;
		}

	} );


	_api_register( 'ajax.params()', function () {
		var ctx = this.context;

			if ( ctx.length > 0 ) {
			return ctx[0].oAjaxData;
		}

	} );


	_api_register( 'ajax.reload()', function ( callback, resetPaging ) {
		return this.iterator( 'table', function (settings) {
			__reload( settings, resetPaging===false, callback );
		} );
	} );


	_api_register( 'ajax.url()', function ( url ) {
		var ctx = this.context;

			if ( url === undefined ) {
			if ( ctx.length === 0 ) {
				return undefined;
			}
			ctx = ctx[0];

				return ctx.ajax ?
				$.isPlainObject( ctx.ajax ) ?
					ctx.ajax.url :
					ctx.ajax :
				ctx.sAjaxSource;
		}

		return this.iterator( 'table', function ( settings ) {
			if ( $.isPlainObject( settings.ajax ) ) {
				settings.ajax.url = url;
			}
			else {
				settings.ajax = url;
			}
		} );
	} );


	_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {
		return this.iterator( 'table', function ( ctx ) {
			__reload( ctx, resetPaging===false, callback );
		} );
	} );




					var _selector_run = function ( type, selector, selectFn, settings, opts )
	{
		var
			out = [], res,
			a, i, ien, j, jen,
			selectorType = typeof selector;

		if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {
			selector = [ selector ];
		}

			for ( i=0, ien=selector.length ; i<ien ; i++ ) {
			a = selector[i] && selector[i].split && ! selector[i].match(/[\[\(:]/) ?
				selector[i].split(',') :
				[ selector[i] ];

				for ( j=0, jen=a.length ; j<jen ; j++ ) {
				res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );

					if ( res && res.length ) {
					out = out.concat( res );
				}
			}
		}

		var ext = _ext.selector[ type ];
		if ( ext.length ) {
			for ( i=0, ien=ext.length ; i<ien ; i++ ) {
				out = ext[i]( settings, opts, out );
			}
		}

			return _unique( out );
	};


			var _selector_opts = function ( opts )
	{
		if ( ! opts ) {
			opts = {};
		}

		if ( opts.filter && opts.search === undefined ) {
			opts.search = opts.filter;
		}

			return $.extend( {
			search: 'none',
			order: 'current',
			page: 'all'
		}, opts );
	};


			var _selector_first = function ( inst )
	{
		for ( var i=0, ien=inst.length ; i<ien ; i++ ) {
			if ( inst[i].length > 0 ) {
				inst[0] = inst[i];
				inst[0].length = 1;
				inst.length = 1;
				inst.context = [ inst.context[i] ];

					return inst;
			}
		}

		inst.length = 0;
		return inst;
	};


			var _selector_row_indexes = function ( settings, opts )
	{
		var
			i, ien, tmp, a=[],
			displayFiltered = settings.aiDisplay,
			displayMaster = settings.aiDisplayMaster;

			var
			search = opts.search,  
			order  = opts.order,   
			page   = opts.page;    

			if ( _fnDataSource( settings ) == 'ssp' ) {
			return search === 'removed' ?
				[] :
				_range( 0, displayMaster.length );
		}
		else if ( page == 'current' ) {
			for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {
				a.push( displayFiltered[i] );
			}
		}
		else if ( order == 'current' || order == 'applied' ) {
			if ( search == 'none') {
				a = displayMaster.slice();
			}
			else if ( search == 'applied' ) {
				a = displayFiltered.slice();
			}
			else if ( search == 'removed' ) {
				var displayFilteredMap = {};

					for ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {
					displayFilteredMap[displayFiltered[i]] = null;
				}

					a = $.map( displayMaster, function (el) {
					return ! displayFilteredMap.hasOwnProperty(el) ?
						el :
						null;
				} );
			}
		}
		else if ( order == 'index' || order == 'original' ) {
			for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				if ( search == 'none' ) {
					a.push( i );
				}
				else { 
					tmp = $.inArray( i, displayFiltered );

						if ((tmp === -1 && search == 'removed') ||
						(tmp >= 0   && search == 'applied') )
					{
						a.push( i );
					}
				}
			}
		}

			return a;
	};


	var __row_selector = function ( settings, selector, opts )
	{
		var rows;
		var run = function ( sel ) {
			var selInt = _intVal( sel );
			var i, ien;
			var aoData = settings.aoData;

			if ( selInt !== null && ! opts ) {
				return [ selInt ];
			}

				if ( ! rows ) {
				rows = _selector_row_indexes( settings, opts );
			}

				if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {
				return [ selInt ];
			}
			else if ( sel === null || sel === undefined || sel === '' ) {
				return rows;
			}

			if ( typeof sel === 'function' ) {
				return $.map( rows, function (idx) {
					var row = aoData[ idx ];
					return sel( idx, row._aData, row.nTr ) ? idx : null;
				} );
			}

			if ( sel.nodeName ) {
				var rowIdx = sel._DT_RowIndex;  
				var cellIdx = sel._DT_CellIndex;

					if ( rowIdx !== undefined ) {
					return aoData[ rowIdx ] && aoData[ rowIdx ].nTr === sel ?
						[ rowIdx ] :
						[];
				}
				else if ( cellIdx ) {
					return aoData[ cellIdx.row ] && aoData[ cellIdx.row ].nTr === sel ?
						[ cellIdx.row ] :
						[];
				}
				else {
					var host = $(sel).closest('*[data-dt-row]');
					return host.length ?
						[ host.data('dt-row') ] :
						[];
				}
			}

			if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {
				var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];
				if ( rowObj !== undefined ) {
					return [ rowObj.idx ];
				}

			}

			var nodes = _removeEmpty(
				_pluck_order( settings.aoData, rows, 'nTr' )
			);

			return $(nodes)
				.filter( sel )
				.map( function () {
					return this._DT_RowIndex;
				} )
				.toArray();
		};

			return _selector_run( 'row', selector, run, settings, opts );
	};


			_api_register( 'rows()', function ( selector, opts ) {
		if ( selector === undefined ) {
			selector = '';
		}
		else if ( $.isPlainObject( selector ) ) {
			opts = selector;
			selector = '';
		}

			opts = _selector_opts( opts );

			var inst = this.iterator( 'table', function ( settings ) {
			return __row_selector( settings, selector, opts );
		}, 1 );

		inst.selector.rows = selector;
		inst.selector.opts = opts;

			return inst;
	} );

		_api_register( 'rows().nodes()', function () {
		return this.iterator( 'row', function ( settings, row ) {
			return settings.aoData[ row ].nTr || undefined;
		}, 1 );
	} );

		_api_register( 'rows().data()', function () {
		return this.iterator( true, 'rows', function ( settings, rows ) {
			return _pluck_order( settings.aoData, rows, '_aData' );
		}, 1 );
	} );

		_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {
		return this.iterator( 'row', function ( settings, row ) {
			var r = settings.aoData[ row ];
			return type === 'search' ? r._aFilterData : r._aSortData;
		}, 1 );
	} );

		_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {
		return this.iterator( 'row', function ( settings, row ) {
			_fnInvalidate( settings, row, src );
		} );
	} );

		_api_registerPlural( 'rows().indexes()', 'row().index()', function () {
		return this.iterator( 'row', function ( settings, row ) {
			return row;
		}, 1 );
	} );

		_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {
		var a = [];
		var context = this.context;

		for ( var i=0, ien=context.length ; i<ien ; i++ ) {
			for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {
				var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );
				a.push( (hash === true ? '#' : '' )+ id );
			}
		}

			return new _Api( context, a );
	} );

		_api_registerPlural( 'rows().remove()', 'row().remove()', function () {
		var that = this;

			this.iterator( 'row', function ( settings, row, thatIdx ) {
			var data = settings.aoData;
			var rowData = data[ row ];
			var i, ien, j, jen;
			var loopRow, loopCells;

				data.splice( row, 1 );

			for ( i=0, ien=data.length ; i<ien ; i++ ) {
				loopRow = data[i];
				loopCells = loopRow.anCells;

				if ( loopRow.nTr !== null ) {
					loopRow.nTr._DT_RowIndex = i;
				}

				if ( loopCells !== null ) {
					for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {
						loopCells[j]._DT_CellIndex.row = i;
					}
				}
			}

			_fnDeleteIndex( settings.aiDisplayMaster, row );
			_fnDeleteIndex( settings.aiDisplay, row );
			_fnDeleteIndex( that[ thatIdx ], row, false ); 

			if ( settings._iRecordsDisplay > 0 ) {
				settings._iRecordsDisplay--;
			}

			_fnLengthOverflow( settings );

			var id = settings.rowIdFn( rowData._aData );
			if ( id !== undefined ) {
				delete settings.aIds[ id ];
			}
		} );

			this.iterator( 'table', function ( settings ) {
			for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				settings.aoData[i].idx = i;
			}
		} );

			return this;
	} );


			_api_register( 'rows.add()', function ( rows ) {
		var newRows = this.iterator( 'table', function ( settings ) {
				var row, i, ien;
				var out = [];

					for ( i=0, ien=rows.length ; i<ien ; i++ ) {
					row = rows[i];

						if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
						out.push( _fnAddTr( settings, row )[0] );
					}
					else {
						out.push( _fnAddData( settings, row ) );
					}
				}

					return out;
			}, 1 );

		var modRows = this.rows( -1 );
		modRows.pop();
		$.merge( modRows, newRows );

			return modRows;
	} );





	_api_register( 'row()', function ( selector, opts ) {
		return _selector_first( this.rows( selector, opts ) );
	} );


			_api_register( 'row().data()', function ( data ) {
		var ctx = this.context;

			if ( data === undefined ) {
			return ctx.length && this.length ?
				ctx[0].aoData[ this[0] ]._aData :
				undefined;
		}

		var row = ctx[0].aoData[ this[0] ];
		row._aData = data;

		if ( $.isArray( data ) && row.nTr.id ) {
			_fnSetObjectDataFn( ctx[0].rowId )( data, row.nTr.id );
		}

		_fnInvalidate( ctx[0], this[0], 'data' );

			return this;
	} );


			_api_register( 'row().node()', function () {
		var ctx = this.context;

			return ctx.length && this.length ?
			ctx[0].aoData[ this[0] ].nTr || null :
			null;
	} );


			_api_register( 'row.add()', function ( row ) {
		if ( row instanceof $ && row.length ) {
			row = row[0];
		}

			var rows = this.iterator( 'table', function ( settings ) {
			if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
				return _fnAddTr( settings, row )[0];
			}
			return _fnAddData( settings, row );
		} );

		return this.row( rows[0] );
	} );



				var __details_add = function ( ctx, row, data, klass )
	{
		var rows = [];
		var addRow = function ( r, k ) {
			if ( $.isArray( r ) || r instanceof $ ) {
				for ( var i=0, ien=r.length ; i<ien ; i++ ) {
					addRow( r[i], k );
				}
				return;
			}

			if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {
				rows.push( r );
			}
			else {
				var created = $('<tr><td/></tr>').addClass( k );
				$('td', created)
					.addClass( k )
					.html( r )
					[0].colSpan = _fnVisbleColumns( ctx );

					rows.push( created[0] );
			}
		};

			addRow( data, klass );

			if ( row._details ) {
			row._details.detach();
		}

			row._details = $(rows);

		if ( row._detailsShow ) {
			row._details.insertAfter( row.nTr );
		}
	};


			var __details_remove = function ( api, idx )
	{
		var ctx = api.context;

			if ( ctx.length ) {
			var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];

				if ( row && row._details ) {
				row._details.remove();

					row._detailsShow = undefined;
				row._details = undefined;
			}
		}
	};


			var __details_display = function ( api, show ) {
		var ctx = api.context;

			if ( ctx.length && api.length ) {
			var row = ctx[0].aoData[ api[0] ];

				if ( row._details ) {
				row._detailsShow = show;

					if ( show ) {
					row._details.insertAfter( row.nTr );
				}
				else {
					row._details.detach();
				}

					__details_events( ctx[0] );
			}
		}
	};


			var __details_events = function ( settings )
	{
		var api = new _Api( settings );
		var namespace = '.dt.DT_details';
		var drawEvent = 'draw'+namespace;
		var colvisEvent = 'column-visibility'+namespace;
		var destroyEvent = 'destroy'+namespace;
		var data = settings.aoData;

			api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );

			if ( _pluck( data, '_details' ).length > 0 ) {
			api.on( drawEvent, function ( e, ctx ) {
				if ( settings !== ctx ) {
					return;
				}

					api.rows( {page:'current'} ).eq(0).each( function (idx) {
					var row = data[ idx ];

						if ( row._detailsShow ) {
						row._details.insertAfter( row.nTr );
					}
				} );
			} );

			api.on( colvisEvent, function ( e, ctx, idx, vis ) {
				if ( settings !== ctx ) {
					return;
				}

				var row, visible = _fnVisbleColumns( ctx );

					for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					row = data[i];

						if ( row._details ) {
						row._details.children('td[colspan]').attr('colspan', visible );
					}
				}
			} );

			api.on( destroyEvent, function ( e, ctx ) {
				if ( settings !== ctx ) {
					return;
				}

					for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					if ( data[i]._details ) {
						__details_remove( api, i );
					}
				}
			} );
		}
	};

	var _emp = '';
	var _child_obj = _emp+'row().child';
	var _child_mth = _child_obj+'()';

	_api_register( _child_mth, function ( data, klass ) {
		var ctx = this.context;

			if ( data === undefined ) {
			return ctx.length && this.length ?
				ctx[0].aoData[ this[0] ]._details :
				undefined;
		}
		else if ( data === true ) {
			this.child.show();
		}
		else if ( data === false ) {
			__details_remove( this );
		}
		else if ( ctx.length && this.length ) {
			__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );
		}

			return this;
	} );


			_api_register( [
		_child_obj+'.show()',
		_child_mth+'.show()' 
	], function ( show ) {   
		__details_display( this, true );
		return this;
	} );


			_api_register( [
		_child_obj+'.hide()',
		_child_mth+'.hide()' 
	], function () {         
		__details_display( this, false );
		return this;
	} );


			_api_register( [
		_child_obj+'.remove()',
		_child_mth+'.remove()' 
	], function () {           
		__details_remove( this );
		return this;
	} );


			_api_register( _child_obj+'.isShown()', function () {
		var ctx = this.context;

			if ( ctx.length && this.length ) {
			return ctx[0].aoData[ this[0] ]._detailsShow || false;
		}
		return false;
	} );





		var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;


	var __columnData = function ( settings, column, r1, r2, rows ) {
		var a = [];
		for ( var row=0, ien=rows.length ; row<ien ; row++ ) {
			a.push( _fnGetCellData( settings, rows[row], column ) );
		}
		return a;
	};


			var __column_selector = function ( settings, selector, opts )
	{
		var
			columns = settings.aoColumns,
			names = _pluck( columns, 'sName' ),
			nodes = _pluck( columns, 'nTh' );

			var run = function ( s ) {
			var selInt = _intVal( s );

			if ( s === '' ) {
				return _range( columns.length );
			}

			if ( selInt !== null ) {
				return [ selInt >= 0 ?
					selInt : 
					columns.length + selInt 
				];
			}

			if ( typeof s === 'function' ) {
				var rows = _selector_row_indexes( settings, opts );

					return $.map( columns, function (col, idx) {
					return s(
							idx,
							__columnData( settings, idx, 0, 0, rows ),
							nodes[ idx ]
						) ? idx : null;
				} );
			}

			var match = typeof s === 'string' ?
				s.match( __re_column_selector ) :
				'';

				if ( match ) {
				switch( match[2] ) {
					case 'visIdx':
					case 'visible':
						var idx = parseInt( match[1], 10 );
						if ( idx < 0 ) {
							var visColumns = $.map( columns, function (col,i) {
								return col.bVisible ? i : null;
							} );
							return [ visColumns[ visColumns.length + idx ] ];
						}
						return [ _fnVisibleToColumnIndex( settings, idx ) ];

						case 'name':
						return $.map( names, function (name, i) {
							return name === match[1] ? i : null;
						} );

						default:
						return [];
				}
			}

			if ( s.nodeName && s._DT_CellIndex ) {
				return [ s._DT_CellIndex.column ];
			}

			var jqResult = $( nodes )
				.filter( s )
				.map( function () {
					return $.inArray( this, nodes ); 
				} )
				.toArray();

				if ( jqResult.length || ! s.nodeName ) {
				return jqResult;
			}

			var host = $(s).closest('*[data-dt-column]');
			return host.length ?
				[ host.data('dt-column') ] :
				[];
		};

			return _selector_run( 'column', selector, run, settings, opts );
	};


			var __setColumnVis = function ( settings, column, vis ) {
		var
			cols = settings.aoColumns,
			col  = cols[ column ],
			data = settings.aoData,
			row, cells, i, ien, tr;

		if ( vis === undefined ) {
			return col.bVisible;
		}

		if ( col.bVisible === vis ) {
			return;
		}

			if ( vis ) {
			var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );

				for ( i=0, ien=data.length ; i<ien ; i++ ) {
				tr = data[i].nTr;
				cells = data[i].anCells;

					if ( tr ) {
					tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );
				}
			}
		}
		else {
			$( _pluck( settings.aoData, 'anCells', column ) ).detach();
		}

		col.bVisible = vis;
		_fnDrawHead( settings, settings.aoHeader );
		_fnDrawHead( settings, settings.aoFooter );

		if ( ! settings.aiDisplay.length ) {
			$(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));
		}

			_fnSaveState( settings );
	};


			_api_register( 'columns()', function ( selector, opts ) {
		if ( selector === undefined ) {
			selector = '';
		}
		else if ( $.isPlainObject( selector ) ) {
			opts = selector;
			selector = '';
		}

			opts = _selector_opts( opts );

			var inst = this.iterator( 'table', function ( settings ) {
			return __column_selector( settings, selector, opts );
		}, 1 );

		inst.selector.cols = selector;
		inst.selector.opts = opts;

			return inst;
	} );

		_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].nTh;
		}, 1 );
	} );

		_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].nTf;
		}, 1 );
	} );

		_api_registerPlural( 'columns().data()', 'column().data()', function () {
		return this.iterator( 'column-rows', __columnData, 1 );
	} );

		_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].mData;
		}, 1 );
	} );

		_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {
		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
			return _pluck_order( settings.aoData, rows,
				type === 'search' ? '_aFilterData' : '_aSortData', column
			);
		}, 1 );
	} );

		_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {
		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
			return _pluck_order( settings.aoData, rows, 'anCells', column ) ;
		}, 1 );
	} );

		_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {
		var ret = this.iterator( 'column', function ( settings, column ) {
			if ( vis === undefined ) {
				return settings.aoColumns[ column ].bVisible;
			} 
			__setColumnVis( settings, column, vis );
		} );

		if ( vis !== undefined ) {
			this.iterator( 'column', function ( settings, column ) {
				_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );
			} );

				if ( calc === undefined || calc ) {
				this.columns.adjust();
			}
		}

			return ret;
	} );

		_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {
		return this.iterator( 'column', function ( settings, column ) {
			return type === 'visible' ?
				_fnColumnIndexToVisible( settings, column ) :
				column;
		}, 1 );
	} );

		_api_register( 'columns.adjust()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnAdjustColumnSizing( settings );
		}, 1 );
	} );

		_api_register( 'column.index()', function ( type, idx ) {
		if ( this.context.length !== 0 ) {
			var ctx = this.context[0];

				if ( type === 'fromVisible' || type === 'toData' ) {
				return _fnVisibleToColumnIndex( ctx, idx );
			}
			else if ( type === 'fromData' || type === 'toVisible' ) {
				return _fnColumnIndexToVisible( ctx, idx );
			}
		}
	} );

		_api_register( 'column()', function ( selector, opts ) {
		return _selector_first( this.columns( selector, opts ) );
	} );



				var __cell_selector = function ( settings, selector, opts )
	{
		var data = settings.aoData;
		var rows = _selector_row_indexes( settings, opts );
		var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );
		var allCells = $( [].concat.apply([], cells) );
		var row;
		var columns = settings.aoColumns.length;
		var a, i, ien, j, o, host;

			var run = function ( s ) {
			var fnSelector = typeof s === 'function';

				if ( s === null || s === undefined || fnSelector ) {
				a = [];

					for ( i=0, ien=rows.length ; i<ien ; i++ ) {
					row = rows[i];

						for ( j=0 ; j<columns ; j++ ) {
						o = {
							row: row,
							column: j
						};

							if ( fnSelector ) {
							host = data[ row ];

								if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {
								a.push( o );
							}
						}
						else {
							a.push( o );
						}
					}
				}

					return a;
			}

			if ( $.isPlainObject( s ) ) {
				return s.column !== undefined && s.row !== undefined && $.inArray( s.row, rows ) !== -1 ?
					[s] :
					[];
			}

			var jqResult = allCells
				.filter( s )
				.map( function (i, el) {
					return { 
						row:    el._DT_CellIndex.row,
						column: el._DT_CellIndex.column
	 				};
				} )
				.toArray();

				if ( jqResult.length || ! s.nodeName ) {
				return jqResult;
			}

			host = $(s).closest('*[data-dt-row]');
			return host.length ?
				[ {
					row: host.data('dt-row'),
					column: host.data('dt-column')
				} ] :
				[];
		};

			return _selector_run( 'cell', selector, run, settings, opts );
	};




					_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {
		if ( $.isPlainObject( rowSelector ) ) {
			if ( rowSelector.row === undefined ) {
				opts = rowSelector;
				rowSelector = null;
			}
			else {
				opts = columnSelector;
				columnSelector = null;
			}
		}
		if ( $.isPlainObject( columnSelector ) ) {
			opts = columnSelector;
			columnSelector = null;
		}

		if ( columnSelector === null || columnSelector === undefined ) {
			return this.iterator( 'table', function ( settings ) {
				return __cell_selector( settings, rowSelector, _selector_opts( opts ) );
			} );
		}

		var columns = this.columns( columnSelector );
		var rows = this.rows( rowSelector );
		var a, i, ien, j, jen;

			this.iterator( 'table', function ( settings, idx ) {
			a = [];

				for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {
				for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {
					a.push( {
						row:    rows[idx][i],
						column: columns[idx][j]
					} );
				}
			}
		}, 1 );

	    var cells = this.cells( a, opts );

			$.extend( cells.selector, {
			cols: columnSelector,
			rows: rowSelector,
			opts: opts
		} );

			return cells;
	} );


			_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			var data = settings.aoData[ row ];

				return data && data.anCells ?
				data.anCells[ column ] :
				undefined;
		}, 1 );
	} );


			_api_register( 'cells().data()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return _fnGetCellData( settings, row, column );
		}, 1 );
	} );


			_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {
		type = type === 'search' ? '_aFilterData' : '_aSortData';

			return this.iterator( 'cell', function ( settings, row, column ) {
			return settings.aoData[ row ][ type ][ column ];
		}, 1 );
	} );


			_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return _fnGetCellData( settings, row, column, type );
		}, 1 );
	} );


			_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return {
				row: row,
				column: column,
				columnVisible: _fnColumnIndexToVisible( settings, column )
			};
		}, 1 );
	} );


			_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {
		return this.iterator( 'cell', function ( settings, row, column ) {
			_fnInvalidate( settings, row, src, column );
		} );
	} );



				_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {
		return _selector_first( this.cells( rowSelector, columnSelector, opts ) );
	} );


			_api_register( 'cell().data()', function ( data ) {
		var ctx = this.context;
		var cell = this[0];

			if ( data === undefined ) {
			return ctx.length && cell.length ?
				_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :
				undefined;
		}

		_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );
		_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );

			return this;
	} );



	_api_register( 'order()', function ( order, dir ) {
		var ctx = this.context;

			if ( order === undefined ) {
			return ctx.length !== 0 ?
				ctx[0].aaSorting :
				undefined;
		}

		if ( typeof order === 'number' ) {
			order = [ [ order, dir ] ];
		}
		else if ( order.length && ! $.isArray( order[0] ) ) {
			order = Array.prototype.slice.call( arguments );
		}

			return this.iterator( 'table', function ( settings ) {
			settings.aaSorting = order.slice();
		} );
	} );


	_api_register( 'order.listener()', function ( node, column, callback ) {
		return this.iterator( 'table', function ( settings ) {
			_fnSortAttachListener( settings, node, column, callback );
		} );
	} );


			_api_register( 'order.fixed()', function ( set ) {
		if ( ! set ) {
			var ctx = this.context;
			var fixed = ctx.length ?
				ctx[0].aaSortingFixed :
				undefined;

				return $.isArray( fixed ) ?
				{ pre: fixed } :
				fixed;
		}

			return this.iterator( 'table', function ( settings ) {
			settings.aaSortingFixed = $.extend( true, {}, set );
		} );
	} );


	_api_register( [
		'columns().order()',
		'column().order()'
	], function ( dir ) {
		var that = this;

			return this.iterator( 'table', function ( settings, i ) {
			var sort = [];

				$.each( that[i], function (j, col) {
				sort.push( [ col, dir ] );
			} );

				settings.aaSorting = sort;
		} );
	} );



				_api_register( 'search()', function ( input, regex, smart, caseInsen ) {
		var ctx = this.context;

			if ( input === undefined ) {
			return ctx.length !== 0 ?
				ctx[0].oPreviousSearch.sSearch :
				undefined;
		}

		return this.iterator( 'table', function ( settings ) {
			if ( ! settings.oFeatures.bFilter ) {
				return;
			}

				_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {
				"sSearch": input+"",
				"bRegex":  regex === null ? false : regex,
				"bSmart":  smart === null ? true  : smart,
				"bCaseInsensitive": caseInsen === null ? true : caseInsen
			} ), 1 );
		} );
	} );


			_api_registerPlural(
		'columns().search()',
		'column().search()',
		function ( input, regex, smart, caseInsen ) {
			return this.iterator( 'column', function ( settings, column ) {
				var preSearch = settings.aoPreSearchCols;

					if ( input === undefined ) {
					return preSearch[ column ].sSearch;
				}

				if ( ! settings.oFeatures.bFilter ) {
					return;
				}

					$.extend( preSearch[ column ], {
					"sSearch": input+"",
					"bRegex":  regex === null ? false : regex,
					"bSmart":  smart === null ? true  : smart,
					"bCaseInsensitive": caseInsen === null ? true : caseInsen
				} );

					_fnFilterComplete( settings, settings.oPreviousSearch, 1 );
			} );
		}
	);


		_api_register( 'state()', function () {
		return this.context.length ?
			this.context[0].oSavedState :
			null;
	} );


			_api_register( 'state.clear()', function () {
		return this.iterator( 'table', function ( settings ) {
			settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );
		} );
	} );


			_api_register( 'state.loaded()', function () {
		return this.context.length ?
			this.context[0].oLoadedState :
			null;
	} );


			_api_register( 'state.save()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnSaveState( settings );
		} );
	} );



	DataTable.versionCheck = DataTable.fnVersionCheck = function( version )
	{
		var aThis = DataTable.version.split('.');
		var aThat = version.split('.');
		var iThis, iThat;

			for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {
			iThis = parseInt( aThis[i], 10 ) || 0;
			iThat = parseInt( aThat[i], 10 ) || 0;

			if (iThis === iThat) {
				continue;
			}

			return iThis > iThat;
		}

			return true;
	};


	DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )
	{
		var t = $(table).get(0);
		var is = false;

			if ( table instanceof DataTable.Api ) {
			return true;
		}

			$.each( DataTable.settings, function (i, o) {
			var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
			var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;

				if ( o.nTable === t || head === t || foot === t ) {
				is = true;
			}
		} );

			return is;
	};


	DataTable.tables = DataTable.fnTables = function ( visible )
	{
		var api = false;

			if ( $.isPlainObject( visible ) ) {
			api = visible.api;
			visible = visible.visible;
		}

			var a = $.map( DataTable.settings, function (o) {
			if ( !visible || (visible && $(o.nTable).is(':visible')) ) {
				return o.nTable;
			}
		} );

			return api ?
			new _Api( a ) :
			a;
	};


	DataTable.camelToHungarian = _fnCamelToHungarian;



	_api_register( '$()', function ( selector, opts ) {
		var
			rows   = this.rows( opts ).nodes(), 
			jqRows = $(rows);

			return $( [].concat(
			jqRows.filter( selector ).toArray(),
			jqRows.find( selector ).toArray()
		) );
	} );


	$.each( [ 'on', 'one', 'off' ], function (i, key) {
		_api_register( key+'()', function (  ) {
			var args = Array.prototype.slice.call(arguments);

			args[0] = $.map( args[0].split( /\s/ ), function ( e ) {
				return ! e.match(/\.dt\b/) ?
					e+'.dt' :
					e;
				} ).join( ' ' );

				var inst = $( this.tables().nodes() );
			inst[key].apply( inst, args );
			return this;
		} );
	} );


			_api_register( 'clear()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnClearTable( settings );
		} );
	} );


			_api_register( 'settings()', function () {
		return new _Api( this.context, this.context );
	} );


			_api_register( 'init()', function () {
		var ctx = this.context;
		return ctx.length ? ctx[0].oInit : null;
	} );


			_api_register( 'data()', function () {
		return this.iterator( 'table', function ( settings ) {
			return _pluck( settings.aoData, '_aData' );
		} ).flatten();
	} );


			_api_register( 'destroy()', function ( remove ) {
		remove = remove || false;

			return this.iterator( 'table', function ( settings ) {
			var orig      = settings.nTableWrapper.parentNode;
			var classes   = settings.oClasses;
			var table     = settings.nTable;
			var tbody     = settings.nTBody;
			var thead     = settings.nTHead;
			var tfoot     = settings.nTFoot;
			var jqTable   = $(table);
			var jqTbody   = $(tbody);
			var jqWrapper = $(settings.nTableWrapper);
			var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );
			var i, ien;

			settings.bDestroying = true;

			_fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );

			if ( ! remove ) {
				new _Api( settings ).columns().visible( true );
			}

			jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
			$(window).off('.DT-'+settings.sInstance);

			if ( table != thead.parentNode ) {
				jqTable.children('thead').detach();
				jqTable.append( thead );
			}

				if ( tfoot && table != tfoot.parentNode ) {
				jqTable.children('tfoot').detach();
				jqTable.append( tfoot );
			}

				settings.aaSorting = [];
			settings.aaSortingFixed = [];
			_fnSortingClasses( settings );

				$( rows ).removeClass( settings.asStripeClasses.join(' ') );

				$('th, td', thead).removeClass( classes.sSortable+' '+
				classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone
			);

			jqTbody.children().detach();
			jqTbody.append( rows );

			var removedMethod = remove ? 'remove' : 'detach';
			jqTable[ removedMethod ]();
			jqWrapper[ removedMethod ]();

			if ( ! remove && orig ) {
				orig.insertBefore( table, settings.nTableReinsertBefore );

				jqTable
					.css( 'width', settings.sDestroyWidth )
					.removeClass( classes.sTable );

				ien = settings.asDestroyStripes.length;

					if ( ien ) {
					jqTbody.children().each( function (i) {
						$(this).addClass( settings.asDestroyStripes[i % ien] );
					} );
				}
			}

			var idx = $.inArray( settings, DataTable.settings );
			if ( idx !== -1 ) {
				DataTable.settings.splice( idx, 1 );
			}
		} );
	} );


	$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {
		_api_register( type+'s().every()', function ( fn ) {
			var opts = this.selector.opts;
			var api = this;

				return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {
				fn.call(
					api[ type ](
						arg1,
						type==='cell' ? arg2 : opts,
						type==='cell' ? opts : undefined
					),
					arg1, arg2, arg3, arg4
				);
			} );
		} );
	} );


	_api_register( 'i18n()', function ( token, def, plural ) {
		var ctx = this.context[0];
		var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );

			if ( resolved === undefined ) {
			resolved = def;
		}

			if ( plural !== undefined && $.isPlainObject( resolved ) ) {
			resolved = resolved[ plural ] !== undefined ?
				resolved[ plural ] :
				resolved._;
		}

			return resolved.replace( '%d', plural ); 
	} );

	DataTable.version = "1.10.18";

	DataTable.settings = [];

	DataTable.models = {};



	DataTable.models.oSearch = {
		"bCaseInsensitive": true,

		"sSearch": "",

		"bRegex": false,

		"bSmart": true
	};




	DataTable.models.oRow = {
		"nTr": null,

		"anCells": null,

		"_aData": [],

		"_aSortData": null,

		"_aFilterData": null,

		"_sFilterRow": null,

		"_sRowStripe": "",

		"src": null,

		"idx": -1
	};


	DataTable.models.oColumn = {
		"idx": null,

		"aDataSort": null,

		"asSorting": null,

		"bSearchable": null,

		"bSortable": null,

		"bVisible": null,

		"_sManualType": null,

		"_bAttrSrc": false,

		"fnCreatedCell": null,

		"fnGetData": null,

		"fnSetData": null,

		"mData": null,

		"mRender": null,

		"nTh": null,

		"nTf": null,

		"sClass": null,

		"sContentPadding": null,

		"sDefaultContent": null,

		"sName": null,

		"sSortDataType": 'std',

		"sSortingClass": null,

		"sSortingClassJUI": null,

		"sTitle": null,

		"sType": null,

		"sWidth": null,

		"sWidthOrig": null
	};



	DataTable.defaults = {
		"aaData": null,


		"aaSorting": [[0,'asc']],


		"aaSortingFixed": [],


		"ajax": null,


		"aLengthMenu": [ 10, 25, 50, 100 ],


		"aoColumns": null,

		"aoColumnDefs": null,


		"aoSearchCols": [],


		"asStripeClasses": null,


		"bAutoWidth": true,


		"bDeferRender": false,


		"bDestroy": false,


		"bFilter": true,


		"bInfo": true,


		"bLengthChange": true,


		"bPaginate": true,


		"bProcessing": false,


		"bRetrieve": false,


		"bScrollCollapse": false,


		"bServerSide": false,


		"bSort": true,


		"bSortMulti": true,


		"bSortCellsTop": false,


		"bSortClasses": true,


		"bStateSave": false,


		"fnCreatedRow": null,


		"fnDrawCallback": null,


		"fnFooterCallback": null,


		"fnFormatNumber": function ( toFormat ) {
			return toFormat.toString().replace(
				/\B(?=(\d{3})+(?!\d))/g,
				this.oLanguage.sThousands
			);
		},


		"fnHeaderCallback": null,


		"fnInfoCallback": null,


		"fnInitComplete": null,


		"fnPreDrawCallback": null,


		"fnRowCallback": null,


		"fnServerData": null,


		"fnServerParams": null,


		"fnStateLoadCallback": function ( settings ) {
			try {
				return JSON.parse(
					(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
						'DataTables_'+settings.sInstance+'_'+location.pathname
					)
				);
			} catch (e) {}
		},


		"fnStateLoadParams": null,


		"fnStateLoaded": null,


		"fnStateSaveCallback": function ( settings, data ) {
			try {
				(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
					'DataTables_'+settings.sInstance+'_'+location.pathname,
					JSON.stringify( data )
				);
			} catch (e) {}
		},


		"fnStateSaveParams": null,


		"iStateDuration": 7200,


		"iDeferLoading": null,


		"iDisplayLength": 10,


		"iDisplayStart": 0,


		"iTabIndex": 0,


		"oClasses": {},


		"oLanguage": {
			"oAria": {
				"sSortAscending": ": activate to sort column ascending",

				"sSortDescending": ": activate to sort column descending"
			},

			"oPaginate": {
				"sFirst": "First",


				"sLast": "Last",


				"sNext": "Next",


				"sPrevious": "Previous"
			},

			"sEmptyTable": "No data available in table",


			"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",


			"sInfoEmpty": "Showing 0 to 0 of 0 entries",


			"sInfoFiltered": "(filtered from _MAX_ total entries)",


			"sInfoPostFix": "",


			"sDecimal": "",


			"sThousands": ",",


			"sLengthMenu": "Show _MENU_ entries",


			"sLoadingRecords": "Loading...",


			"sProcessing": "Processing...",


			"sSearch": "Search:",


			"sSearchPlaceholder": "",


			"sUrl": "",


			"sZeroRecords": "No matching records found"
		},


		"oSearch": $.extend( {}, DataTable.models.oSearch ),


		"sAjaxDataProp": "data",


		"sAjaxSource": null,


		"sDom": "lfrtip",


		"searchDelay": null,


		"sPaginationType": "simple_numbers",


		"sScrollX": "",


		"sScrollXInner": "",


		"sScrollY": "",


		"sServerMethod": "GET",


		"renderer": null,


		"rowId": "DT_RowId"
	};

		_fnHungarianMap( DataTable.defaults );




	DataTable.defaults.column = {
		"aDataSort": null,
		"iDataSort": -1,


		"asSorting": [ 'asc', 'desc' ],


		"bSearchable": true,


		"bSortable": true,


		"bVisible": true,


		"fnCreatedCell": null,




		"mData": null,


		"mRender": null,


		"sCellType": "td",


		"sClass": "",

		"sContentPadding": "",


		"sDefaultContent": null,


		"sName": "",


		"sSortDataType": "std",


		"sTitle": null,


		"sType": null,


		"sWidth": null
	};

		_fnHungarianMap( DataTable.defaults.column );



	DataTable.models.oSettings = {
		"oFeatures": {

			"bAutoWidth": null,

			"bDeferRender": null,

			"bFilter": null,

			"bInfo": null,

			"bLengthChange": null,

			"bPaginate": null,

			"bProcessing": null,

			"bServerSide": null,

			"bSort": null,

			"bSortMulti": null,

			"bSortClasses": null,

			"bStateSave": null
		},


		"oScroll": {
			"bCollapse": null,

			"iBarWidth": 0,

			"sX": null,

			"sXInner": null,

			"sY": null
		},

		"oLanguage": {
			"fnInfoCallback": null
		},

		"oBrowser": {
			"bScrollOversize": false,

			"bScrollbarLeft": false,

			"bBounding": false,

			"barWidth": 0
		},


				"ajax": null,


		"aanFeatures": [],

		"aoData": [],

		"aiDisplay": [],

		"aiDisplayMaster": [],

		"aIds": {},

		"aoColumns": [],

		"aoHeader": [],

		"aoFooter": [],

		"oPreviousSearch": {},

		"aoPreSearchCols": [],

		"aaSorting": null,

		"aaSortingFixed": [],

		"asStripeClasses": null,

		"asDestroyStripes": [],

		"sDestroyWidth": 0,

		"aoRowCallback": [],

		"aoHeaderCallback": [],

		"aoFooterCallback": [],

		"aoDrawCallback": [],

		"aoRowCreatedCallback": [],

		"aoPreDrawCallback": [],

		"aoInitComplete": [],


		"aoStateSaveParams": [],

		"aoStateLoadParams": [],

		"aoStateLoaded": [],

		"sTableId": "",

		"nTable": null,

		"nTHead": null,

		"nTFoot": null,

		"nTBody": null,

		"nTableWrapper": null,

		"bDeferLoading": false,

		"bInitialised": false,

		"aoOpenRows": [],

		"sDom": null,

		"searchDelay": null,

		"sPaginationType": "two_button",

		"iStateDuration": 0,

		"aoStateSave": [],

		"aoStateLoad": [],

		"oSavedState": null,

		"oLoadedState": null,

		"sAjaxSource": null,

		"sAjaxDataProp": null,

		"bAjaxDataGet": true,

		"jqXHR": null,

		"json": undefined,

		"oAjaxData": undefined,

		"fnServerData": null,

		"aoServerParams": [],

		"sServerMethod": null,

		"fnFormatNumber": null,

		"aLengthMenu": null,

		"iDraw": 0,

		"bDrawing": false,

		"iDrawError": -1,

		"_iDisplayLength": 10,

		"_iDisplayStart": 0,

		"_iRecordsTotal": 0,

		"_iRecordsDisplay": 0,

		"oClasses": {},

		"bFiltered": false,

		"bSorted": false,

		"bSortCellsTop": null,

		"oInit": null,

		"aoDestroyCallback": [],


		"fnRecordsTotal": function ()
		{
			return _fnDataSource( this ) == 'ssp' ?
				this._iRecordsTotal * 1 :
				this.aiDisplayMaster.length;
		},

		"fnRecordsDisplay": function ()
		{
			return _fnDataSource( this ) == 'ssp' ?
				this._iRecordsDisplay * 1 :
				this.aiDisplay.length;
		},

		"fnDisplayEnd": function ()
		{
			var
				len      = this._iDisplayLength,
				start    = this._iDisplayStart,
				calc     = start + len,
				records  = this.aiDisplay.length,
				features = this.oFeatures,
				paginate = features.bPaginate;

				if ( features.bServerSide ) {
				return paginate === false || len === -1 ?
					start + records :
					Math.min( start+len, this._iRecordsDisplay );
			}
			else {
				return ! paginate || calc>records || len===-1 ?
					records :
					calc;
			}
		},

		"oInstance": null,

		"sInstance": null,

		"iTabIndex": 0,

		"nScrollHead": null,

		"nScrollFoot": null,

		"aLastSort": [],

		"oPlugins": {},

		"rowIdFn": null,

		"rowId": null
	};



	DataTable.ext = _ext = {
		buttons: {},


		classes: {},


		builder: "-source-",


		errMode: "alert",


		feature: [],


		search: [],


		selector: {
			cell: [],
			column: [],
			row: []
		},


		internal: {},


		legacy: {
			ajax: null
		},


		pager: {},


				renderer: {
			pageButton: {},
			header: {}
		},


		order: {},


		type: {
			detect: [],


			search: {},


			order: {}
		},

		_unique: 0,



		fnVersionCheck: DataTable.fnVersionCheck,


		iApiIndex: 0,


		oJUIClasses: {},


		sVersion: DataTable.version
	};


	$.extend( _ext, {
		afnFiltering: _ext.search,
		aTypes:       _ext.type.detect,
		ofnSearch:    _ext.type.search,
		oSort:        _ext.type.order,
		afnSortData:  _ext.order,
		aoFeatures:   _ext.feature,
		oApi:         _ext.internal,
		oStdClasses:  _ext.classes,
		oPagination:  _ext.pager
	} );


			$.extend( DataTable.ext.classes, {
		"sTable": "dataTable",
		"sNoFooter": "no-footer",

		"sPageButton": "paginate_button",
		"sPageButtonActive": "current",
		"sPageButtonDisabled": "disabled",

		"sStripeOdd": "odd",
		"sStripeEven": "even",

		"sRowEmpty": "dataTables_empty",

		"sWrapper": "dataTables_wrapper",
		"sFilter": "dataTables_filter",
		"sInfo": "dataTables_info",
		"sPaging": "dataTables_paginate paging_", 
		"sLength": "dataTables_length",
		"sProcessing": "dataTables_processing",

		"sSortAsc": "sorting_asc",
		"sSortDesc": "sorting_desc",
		"sSortable": "sorting", 
		"sSortableAsc": "sorting_asc_disabled",
		"sSortableDesc": "sorting_desc_disabled",
		"sSortableNone": "sorting_disabled",
		"sSortColumn": "sorting_", 

		"sFilterInput": "",

		"sLengthSelect": "",

		"sScrollWrapper": "dataTables_scroll",
		"sScrollHead": "dataTables_scrollHead",
		"sScrollHeadInner": "dataTables_scrollHeadInner",
		"sScrollBody": "dataTables_scrollBody",
		"sScrollFoot": "dataTables_scrollFoot",
		"sScrollFootInner": "dataTables_scrollFootInner",

		"sHeaderTH": "",
		"sFooterTH": "",

		"sSortJUIAsc": "",
		"sSortJUIDesc": "",
		"sSortJUI": "",
		"sSortJUIAscAllowed": "",
		"sSortJUIDescAllowed": "",
		"sSortJUIWrapper": "",
		"sSortIcon": "",
		"sJUIHeader": "",
		"sJUIFooter": ""
	} );


			var extPagination = DataTable.ext.pager;

		function _numbers ( page, pages ) {
		var
			numbers = [],
			buttons = extPagination.numbers_length,
			half = Math.floor( buttons / 2 ),
			i = 1;

			if ( pages <= buttons ) {
			numbers = _range( 0, pages );
		}
		else if ( page <= half ) {
			numbers = _range( 0, buttons-2 );
			numbers.push( 'ellipsis' );
			numbers.push( pages-1 );
		}
		else if ( page >= pages - 1 - half ) {
			numbers = _range( pages-(buttons-2), pages );
			numbers.splice( 0, 0, 'ellipsis' ); 
			numbers.splice( 0, 0, 0 );
		}
		else {
			numbers = _range( page-half+2, page+half-1 );
			numbers.push( 'ellipsis' );
			numbers.push( pages-1 );
			numbers.splice( 0, 0, 'ellipsis' );
			numbers.splice( 0, 0, 0 );
		}

			numbers.DT_el = 'span';
		return numbers;
	}


			$.extend( extPagination, {
		simple: function ( page, pages ) {
			return [ 'previous', 'next' ];
		},

			full: function ( page, pages ) {
			return [  'first', 'previous', 'next', 'last' ];
		},

			numbers: function ( page, pages ) {
			return [ _numbers(page, pages) ];
		},

			simple_numbers: function ( page, pages ) {
			return [ 'previous', _numbers(page, pages), 'next' ];
		},

			full_numbers: function ( page, pages ) {
			return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];
		},

				first_last_numbers: function (page, pages) {
	 		return ['first', _numbers(page, pages), 'last'];
	 	},

		_numbers: _numbers,

		numbers_length: 7
	} );


			$.extend( true, DataTable.ext.renderer, {
		pageButton: {
			_: function ( settings, host, idx, buttons, page, pages ) {
				var classes = settings.oClasses;
				var lang = settings.oLanguage.oPaginate;
				var aria = settings.oLanguage.oAria.paginate || {};
				var btnDisplay, btnClass, counter=0;

					var attach = function( container, buttons ) {
					var i, ien, node, button;
					var clickHandler = function ( e ) {
						_fnPageChange( settings, e.data.action, true );
					};

						for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
						button = buttons[i];

							if ( $.isArray( button ) ) {
							var inner = $( '<'+(button.DT_el || 'div')+'/>' )
								.appendTo( container );
							attach( inner, button );
						}
						else {
							btnDisplay = null;
							btnClass = '';

								switch ( button ) {
								case 'ellipsis':
									container.append('<span class="ellipsis">&#x2026;</span>');
									break;

									case 'first':
									btnDisplay = lang.sFirst;
									btnClass = button + (page > 0 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;

									case 'previous':
									btnDisplay = lang.sPrevious;
									btnClass = button + (page > 0 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;

									case 'next':
									btnDisplay = lang.sNext;
									btnClass = button + (page < pages-1 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;

									case 'last':
									btnDisplay = lang.sLast;
									btnClass = button + (page < pages-1 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;

									default:
									btnDisplay = button + 1;
									btnClass = page === button ?
										classes.sPageButtonActive : '';
									break;
							}

								if ( btnDisplay !== null ) {
								node = $('<a>', {
										'class': classes.sPageButton+' '+btnClass,
										'aria-controls': settings.sTableId,
										'aria-label': aria[ button ],
										'data-dt-idx': counter,
										'tabindex': settings.iTabIndex,
										'id': idx === 0 && typeof button === 'string' ?
											settings.sTableId +'_'+ button :
											null
									} )
									.html( btnDisplay )
									.appendTo( container );

									_fnBindAction(
									node, {action: button}, clickHandler
								);

									counter++;
							}
						}
					}
				};

				var activeEl;

					try {
					activeEl = $(host).find(document.activeElement).data('dt-idx');
				}
				catch (e) {}

					attach( $(host).empty(), buttons );

					if ( activeEl !== undefined ) {
					$(host).find( '[data-dt-idx='+activeEl+']' ).focus();
				}
			}
		}
	} );



	$.extend( DataTable.ext.type.detect, [
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _isNumber( d, decimal ) ? 'num'+decimal : null;
		},

		function ( d, settings )
		{
			if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {
				return null;
			}
			var parsed = Date.parse(d);
			return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
		},

		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;
		},

		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;
		},

		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;
		},

		function ( d, settings )
		{
			return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
				'html' : null;
		}
	] );





			$.extend( DataTable.ext.type.search, {
		html: function ( data ) {
			return _empty(data) ?
				data :
				typeof data === 'string' ?
					data
						.replace( _re_new_lines, " " )
						.replace( _re_html, "" ) :
					'';
		},

			string: function ( data ) {
			return _empty(data) ?
				data :
				typeof data === 'string' ?
					data.replace( _re_new_lines, " " ) :
					data;
		}
	} );



				var __numericReplace = function ( d, decimalPlace, re1, re2 ) {
		if ( d !== 0 && (!d || d === '-') ) {
			return -Infinity;
		}

		if ( decimalPlace ) {
			d = _numToDecimal( d, decimalPlace );
		}

			if ( d.replace ) {
			if ( re1 ) {
				d = d.replace( re1, '' );
			}

				if ( re2 ) {
				d = d.replace( re2, '' );
			}
		}

			return d * 1;
	};


	function _addNumericSort ( decimalPlace ) {
		$.each(
			{
				"num": function ( d ) {
					return __numericReplace( d, decimalPlace );
				},

				"num-fmt": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_formatted_numeric );
				},

				"html-num": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_html );
				},

				"html-num-fmt": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );
				}
			},
			function ( key, fn ) {
				_ext.type.order[ key+decimalPlace+'-pre' ] = fn;

				if ( key.match(/^html\-/) ) {
					_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;
				}
			}
		);
	}


	$.extend( _ext.type.order, {
		"date-pre": function ( d ) {
			var ts = Date.parse( d );
			return isNaN(ts) ? -Infinity : ts;
		},

		"html-pre": function ( a ) {
			return _empty(a) ?
				'' :
				a.replace ?
					a.replace( /<.*?>/g, "" ).toLowerCase() :
					a+'';
		},

		"string-pre": function ( a ) {
			return _empty(a) ?
				'' :
				typeof a === 'string' ?
					a.toLowerCase() :
					! a.toString ?
						'' :
						a.toString();
		},

		"string-asc": function ( x, y ) {
			return ((x < y) ? -1 : ((x > y) ? 1 : 0));
		},

			"string-desc": function ( x, y ) {
			return ((x < y) ? 1 : ((x > y) ? -1 : 0));
		}
	} );


	_addNumericSort( '' );


			$.extend( true, DataTable.ext.renderer, {
		header: {
			_: function ( settings, cell, column, classes ) {
				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
					if ( settings !== ctx ) { 
						return;               
					}

						var colIdx = column.idx;

						cell
						.removeClass(
							column.sSortingClass +' '+
							classes.sSortAsc +' '+
							classes.sSortDesc
						)
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortDesc :
								column.sSortingClass
						);
				} );
			},

				jqueryui: function ( settings, cell, column, classes ) {
				$('<div/>')
					.addClass( classes.sSortJUIWrapper )
					.append( cell.contents() )
					.append( $('<span/>')
						.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )
					)
					.appendTo( cell );

				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
					if ( settings !== ctx ) {
						return;
					}

						var colIdx = column.idx;

						cell
						.removeClass( classes.sSortAsc +" "+classes.sSortDesc )
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortDesc :
								column.sSortingClass
						);

						cell
						.find( 'span.'+classes.sSortIcon )
						.removeClass(
							classes.sSortJUIAsc +" "+
							classes.sSortJUIDesc +" "+
							classes.sSortJUI +" "+
							classes.sSortJUIAscAllowed +" "+
							classes.sSortJUIDescAllowed
						)
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortJUIDesc :
								column.sSortingClassJUI
						);
				} );
			}
		}
	} );


		var __htmlEscapeEntities = function ( d ) {
		return typeof d === 'string' ?
			d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') :
			d;
	};

	DataTable.render = {
		number: function ( thousands, decimal, precision, prefix, postfix ) {
			return {
				display: function ( d ) {
					if ( typeof d !== 'number' && typeof d !== 'string' ) {
						return d;
					}

						var negative = d < 0 ? '-' : '';
					var flo = parseFloat( d );

					if ( isNaN( flo ) ) {
						return __htmlEscapeEntities( d );
					}

						flo = flo.toFixed( precision );
					d = Math.abs( flo );

						var intPart = parseInt( d, 10 );
					var floatPart = precision ?
						decimal+(d - intPart).toFixed( precision ).substring( 2 ):
						'';

						return negative + (prefix||'') +
						intPart.toString().replace(
							/\B(?=(\d{3})+(?!\d))/g, thousands
						) +
						floatPart +
						(postfix||'');
				}
			};
		},

			text: function () {
			return {
				display: __htmlEscapeEntities
			};
		}
	};




	function _fnExternApiFunc (fn)
	{
		return function() {
			var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(
				Array.prototype.slice.call(arguments)
			);
			return DataTable.ext.internal[fn].apply( this, args );
		};
	}


	$.extend( DataTable.ext.internal, {
		_fnExternApiFunc: _fnExternApiFunc,
		_fnBuildAjax: _fnBuildAjax,
		_fnAjaxUpdate: _fnAjaxUpdate,
		_fnAjaxParameters: _fnAjaxParameters,
		_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
		_fnAjaxDataSrc: _fnAjaxDataSrc,
		_fnAddColumn: _fnAddColumn,
		_fnColumnOptions: _fnColumnOptions,
		_fnAdjustColumnSizing: _fnAdjustColumnSizing,
		_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
		_fnColumnIndexToVisible: _fnColumnIndexToVisible,
		_fnVisbleColumns: _fnVisbleColumns,
		_fnGetColumns: _fnGetColumns,
		_fnColumnTypes: _fnColumnTypes,
		_fnApplyColumnDefs: _fnApplyColumnDefs,
		_fnHungarianMap: _fnHungarianMap,
		_fnCamelToHungarian: _fnCamelToHungarian,
		_fnLanguageCompat: _fnLanguageCompat,
		_fnBrowserDetect: _fnBrowserDetect,
		_fnAddData: _fnAddData,
		_fnAddTr: _fnAddTr,
		_fnNodeToDataIndex: _fnNodeToDataIndex,
		_fnNodeToColumnIndex: _fnNodeToColumnIndex,
		_fnGetCellData: _fnGetCellData,
		_fnSetCellData: _fnSetCellData,
		_fnSplitObjNotation: _fnSplitObjNotation,
		_fnGetObjectDataFn: _fnGetObjectDataFn,
		_fnSetObjectDataFn: _fnSetObjectDataFn,
		_fnGetDataMaster: _fnGetDataMaster,
		_fnClearTable: _fnClearTable,
		_fnDeleteIndex: _fnDeleteIndex,
		_fnInvalidate: _fnInvalidate,
		_fnGetRowElements: _fnGetRowElements,
		_fnCreateTr: _fnCreateTr,
		_fnBuildHead: _fnBuildHead,
		_fnDrawHead: _fnDrawHead,
		_fnDraw: _fnDraw,
		_fnReDraw: _fnReDraw,
		_fnAddOptionsHtml: _fnAddOptionsHtml,
		_fnDetectHeader: _fnDetectHeader,
		_fnGetUniqueThs: _fnGetUniqueThs,
		_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
		_fnFilterComplete: _fnFilterComplete,
		_fnFilterCustom: _fnFilterCustom,
		_fnFilterColumn: _fnFilterColumn,
		_fnFilter: _fnFilter,
		_fnFilterCreateSearch: _fnFilterCreateSearch,
		_fnEscapeRegex: _fnEscapeRegex,
		_fnFilterData: _fnFilterData,
		_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
		_fnUpdateInfo: _fnUpdateInfo,
		_fnInfoMacros: _fnInfoMacros,
		_fnInitialise: _fnInitialise,
		_fnInitComplete: _fnInitComplete,
		_fnLengthChange: _fnLengthChange,
		_fnFeatureHtmlLength: _fnFeatureHtmlLength,
		_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
		_fnPageChange: _fnPageChange,
		_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
		_fnProcessingDisplay: _fnProcessingDisplay,
		_fnFeatureHtmlTable: _fnFeatureHtmlTable,
		_fnScrollDraw: _fnScrollDraw,
		_fnApplyToChildren: _fnApplyToChildren,
		_fnCalculateColumnWidths: _fnCalculateColumnWidths,
		_fnThrottle: _fnThrottle,
		_fnConvertToWidth: _fnConvertToWidth,
		_fnGetWidestNode: _fnGetWidestNode,
		_fnGetMaxLenString: _fnGetMaxLenString,
		_fnStringToCss: _fnStringToCss,
		_fnSortFlatten: _fnSortFlatten,
		_fnSort: _fnSort,
		_fnSortAria: _fnSortAria,
		_fnSortListener: _fnSortListener,
		_fnSortAttachListener: _fnSortAttachListener,
		_fnSortingClasses: _fnSortingClasses,
		_fnSortData: _fnSortData,
		_fnSaveState: _fnSaveState,
		_fnLoadState: _fnLoadState,
		_fnSettingsFromNode: _fnSettingsFromNode,
		_fnLog: _fnLog,
		_fnMap: _fnMap,
		_fnBindAction: _fnBindAction,
		_fnCallbackReg: _fnCallbackReg,
		_fnCallbackFire: _fnCallbackFire,
		_fnLengthOverflow: _fnLengthOverflow,
		_fnRenderer: _fnRenderer,
		_fnDataSource: _fnDataSource,
		_fnRowAttributes: _fnRowAttributes,
		_fnExtend: _fnExtend,
		_fnCalculateEnd: function () {} 
	} );


	$.fn.dataTable = DataTable;

	DataTable.$ = $;

	$.fn.dataTableSettings = DataTable.settings;
	$.fn.dataTableExt = DataTable.ext;

	$.fn.DataTable = function ( opts ) {
		return $(this).dataTable( opts ).api();
	};

	$.each( DataTable, function ( prop, val ) {
		$.fn.DataTable[ prop ] = val;
	} );
















	return $.fn.dataTable;
}));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],70:[function(require,module,exports){
(function (root, definition) {
    "use strict";
    if (typeof define === 'function' && define.amd) {
        define(definition);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = definition();
    } else {
        root.log = definition();
    }
}(this, function () {
    "use strict";

    var noop = function() {};
    var undefinedType = "undefined";
    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (
        /Trident\/|MSIE /.test(window.navigator.userAgent)
    );

    var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
    ];

    function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === 'function') {
            return method.bind(obj);
        } else {
            try {
                return Function.prototype.bind.call(method, obj);
            } catch (e) {
                return function() {
                    return Function.prototype.apply.apply(method, [obj, arguments]);
                };
            }
        }
    }

    function traceForIE() {
        if (console.log) {
            if (console.log.apply) {
                console.log.apply(console, arguments);
            } else {
                Function.prototype.apply.apply(console.log, [console, arguments]);
            }
        }
        if (console.trace) console.trace();
    }

    function realMethod(methodName) {
        if (methodName === 'debug') {
            methodName = 'log';
        }

        if (typeof console === undefinedType) {
            return false; 
        } else if (methodName === 'trace' && isIE) {
            return traceForIE;
        } else if (console[methodName] !== undefined) {
            return bindMethod(console, methodName);
        } else if (console.log !== undefined) {
            return bindMethod(console, 'log');
        } else {
            return noop;
        }
    }


    function replaceLoggingMethods(level, loggerName) {
        for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            this[methodName] = (i < level) ?
                noop :
                this.methodFactory(methodName, level, loggerName);
        }

        this.log = this.debug;
    }

    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function () {
            if (typeof console !== undefinedType) {
                replaceLoggingMethods.call(this, level, loggerName);
                this[methodName].apply(this, arguments);
            }
        };
    }

    function defaultMethodFactory(methodName, level, loggerName) {
        return realMethod(methodName) ||
               enableLoggingWhenConsoleArrives.apply(this, arguments);
    }

    function Logger(name, defaultLevel, factory) {
      var self = this;
      var currentLevel;

      var storageKey = "loglevel";
      if (typeof name === "string") {
        storageKey += ":" + name;
      } else if (typeof name === "symbol") {
        storageKey = undefined;
      }

      function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

          if (typeof window === undefinedType || !storageKey) return;

          try {
              window.localStorage[storageKey] = levelName;
              return;
          } catch (ignore) {}

          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {}
      }

      function getPersistedLevel() {
          var storedLevel;

          if (typeof window === undefinedType || !storageKey) return;

          try {
              storedLevel = window.localStorage[storageKey];
          } catch (ignore) {}

          if (typeof storedLevel === undefinedType) {
              try {
                  var cookie = window.document.cookie;
                  var location = cookie.indexOf(
                      encodeURIComponent(storageKey) + "=");
                  if (location !== -1) {
                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
                  }
              } catch (ignore) {}
          }

          if (self.levels[storedLevel] === undefined) {
              storedLevel = undefined;
          }

          return storedLevel;
      }


      self.name = name;

      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
          "ERROR": 4, "SILENT": 5};

      self.methodFactory = factory || defaultMethodFactory;

      self.getLevel = function () {
          return currentLevel;
      };

      self.setLevel = function (level, persist) {
          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
              level = self.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
              currentLevel = level;
              if (persist !== false) {  
                  persistLevelIfPossible(level);
              }
              replaceLoggingMethods.call(self, level, name);
              if (typeof console === undefinedType && level < self.levels.SILENT) {
                  return "No console available for logging";
              }
          } else {
              throw "log.setLevel() called with invalid level: " + level;
          }
      };

      self.setDefaultLevel = function (level) {
          if (!getPersistedLevel()) {
              self.setLevel(level, false);
          }
      };

      self.enableAll = function(persist) {
          self.setLevel(self.levels.TRACE, persist);
      };

      self.disableAll = function(persist) {
          self.setLevel(self.levels.SILENT, persist);
      };

      var initialLevel = getPersistedLevel();
      if (initialLevel == null) {
          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
      }
      self.setLevel(initialLevel, false);
    }


    var defaultLogger = new Logger();

    var _loggersByName = {};
    defaultLogger.getLogger = function getLogger(name) {
        if ((typeof name !== "symbol" && typeof name !== "string") || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }

        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
        }
        return logger;
    };

    var _log = (typeof window !== undefinedType) ? window.log : undefined;
    defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType &&
               window.log === defaultLogger) {
            window.log = _log;
        }

        return defaultLogger;
    };

    defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
    };

    defaultLogger['default'] = defaultLogger;

    return defaultLogger;
}));

},{}],71:[function(require,module,exports){

'use strict';
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}


		var test1 = new String('abc');  
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],72:[function(require,module,exports){
var process = module.exports = {};


var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        return setTimeout(fun, 0);
    }
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        return clearTimeout(marker);
    }
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; 
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],73:[function(require,module,exports){
(function (process,setImmediate){(function (){

(function (definition) {
    "use strict";


    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    } else if (typeof exports === "object" && typeof module === "object") {
        module.exports = definition();

    } else if (typeof define === "function" && define.amd) {
        define(definition);

    } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
            return;
        } else {
            ses.makeQ = definition;
        }

    } else if (typeof window !== "undefined" || typeof self !== "undefined") {
        var global = typeof window !== "undefined" ? window : self;

        var previousQ = global.Q;
        global.Q = definition();

        global.Q.noConflict = function () {
            global.Q = previousQ;
            return this;
        };

    } else {
        throw new Error("This environment was not anticipated by Q. Please file a bug.");
    }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

var qStartingLine = captureLine();
var qFileName;


var noop = function () {};

var nextTick =(function () {
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;
    var laterQueue = [];

    function flush() {
        var task, domain;

        while (head.next) {
            head = head.next;
            task = head.task;
            head.task = void 0;
            domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }
            runSingle(task, domain);

        }
        while (laterQueue.length) {
            task = laterQueue.pop();
            runSingle(task);
        }
        flushing = false;
    }
    function runSingle(task, domain) {
        try {
            task();

        } catch (e) {
            if (isNodeJS) {

                if (domain) {
                    domain.exit();
                }
                setTimeout(flush, 0);
                if (domain) {
                    domain.enter();
                }

                throw e;

            } else {
                setTimeout(function () {
                    throw e;
                }, 0);
            }
        }

        if (domain) {
            domain.exit();
        }
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process === "object" &&
        process.toString() === "[object process]" && process.nextTick) {
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        var channel = new MessageChannel();
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }
    nextTick.runAfter = function (task) {
        laterQueue.push(task);
        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };
    return nextTick;
})();

var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        if (arguments.length === 1) {
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        for (; index < length; index++) {
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {
    obj[prop] = descriptor.value;
    return obj;
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}


function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}


var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
                object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        var stack = filterStackString(concatedStacks);
        object_defineProperty(error, "stack", {value: stack, configurable: true});
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}


function Q(value) {
    if (value instanceof Promise) {
        return value;
    }

    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

Q.nextTick = nextTick;

Q.longStackSupport = false;

var longStackCounter = 1;

if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
    Q.longStackSupport = true;
}

Q.defer = defer;
function defer() {
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { 
                progressListeners.push(operands[1]);
            }
        } else {
            Q.nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; 
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
            promise.stackCounter = longStackCounter++;
        }
    }


    function become(newPromise) {
        resolvedPromise = newPromise;

        if (Q.longStackSupport && hasStacks) {
            promise.source = newPromise;
        }

        array_reduce(messages, function (undefined, message) {
            Q.nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            Q.nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

Q.Promise = promise; 
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; 
promise.all = all; 
promise.reject = reject; 
promise.resolve = Q; 

Q.passByCopy = function (object) {
    return object;
};

Promise.prototype.passByCopy = function () {
    return this;
};

Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            return x;
        } else {
            throw new Error("Q can't join: not the same: " + x + " " + y);
        }
    });
};

Q.race = race;
function race(answerPs) {
    return promise(function (resolve, reject) {
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    Q.nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

Q.tap = function (promise, callback) {
    return Q(promise).tap(callback);
};

Promise.prototype.tap = function (callback) {
    callback = Q(callback);

    return this.then(function (value) {
        return callback.fcall(value).thenResolve(value);
    });
};

Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};


Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

Q.isPromise = isPromise;
function isPromise(object) {
    return object instanceof Promise;
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};


var unhandledReasons = [];
var unhandledRejections = [];
var reportedUnhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }
    if (typeof process === "object" && typeof process.emit === "function") {
        Q.nextTick.runAfter(function () {
            if (array_indexOf(unhandledRejections, promise) !== -1) {
                process.emit("unhandledRejection", reason, promise);
                reportedUnhandledRejections.push(promise);
            }
        });
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        if (typeof process === "object" && typeof process.emit === "function") {
            Q.nextTick.runAfter(function () {
                var atReport = array_indexOf(reportedUnhandledRejections, promise);
                if (atReport !== -1) {
                    process.emit("rejectionHandled", unhandledReasons[at], promise);
                    reportedUnhandledRejections.splice(atReport, 1);
                }
            });
        }
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();


Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    trackRejection(rejection, reason);

    return rejection;
}

Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

function coerce(promise) {
    var deferred = defer();
    Q.nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

Q.async = async;
function async(makeGenerator) {
    return function () {
        function continuer(verb, arg) {
            var result;


            if (typeof StopIteration === "undefined") {
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return Q(result.value);
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return Q(exception.value);
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    Q.nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

Q.del = 
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = 
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

Q.mapply = 
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = 
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

Q.send = 
Q.mcall = 
Q.invoke = function (object, name ) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = 
Promise.prototype.mcall = 
Promise.prototype.invoke = function (name ) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

Q["try"] =
Q.fcall = function (object ) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function () {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

Q.fbind = function (object ) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function () {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var pendingCount = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++pendingCount;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--pendingCount === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (pendingCount === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

Q.any = any;

function any(promises) {
    if (promises.length === 0) {
        return Q.resolve();
    }

    var deferred = Q.defer();
    var pendingCount = 0;
    array_reduce(promises, function (prev, current, index) {
        var promise = promises[index];

        pendingCount++;

        when(promise, onFulfilled, onRejected, onProgress);
        function onFulfilled(result) {
            deferred.resolve(result);
        }
        function onRejected(err) {
            pendingCount--;
            if (pendingCount === 0) {
                var rejection = err || new Error("" + err);

                rejection.message = ("Q can't get fulfillment value from any promise, all " +
                    "promises were rejected. Last error message: " + rejection.message);

                deferred.reject(rejection);
            }
        }
        function onProgress(progress) {
            deferred.notify({
                index: index,
                value: progress
            });
        }
    }, undefined);

    return deferred.promise;
}

Promise.prototype.any = function () {
    return any(this);
};

Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

Q.fail = 
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = 
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

Q.fin = 
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = 
Promise.prototype["finally"] = function (callback) {
    if (!callback || typeof callback.apply !== "function") {
        throw new Error("Q can't apply finally callback");
    }
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        Q.nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

Q.timeout = function (object, ms, error) {
    return Q(object).timeout(ms, error);
};

Promise.prototype.timeout = function (ms, error) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        if (!error || "string" === typeof error) {
            error = new Error(error || "Timed out after " + ms + " ms");
            error.code = "ETIMEDOUT";
        }
        deferred.reject(error);
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

Q.nfcall = function (callback ) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function () {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

Q.nfbind =
Q.denodeify = function (callback ) {
    if (callback === undefined) {
        throw new Error("Q can't wrap an undefined function");
    }
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function () {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp ) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function () {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

Q.nmapply = 
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = 
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Q.nsend = 
Q.nmcall = 
Q.ninvoke = function (object, name ) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = 
Promise.prototype.nmcall = 
Promise.prototype.ninvoke = function (name ) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            Q.nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            Q.nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

Q.noConflict = function() {
    throw new Error("Q.noConflict only works when Q is used as a global");
};

var qEndingLine = captureLine();

return Q;

});

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":72,"timers":77}],74:[function(require,module,exports){
'use strict';
var strictUriEncode = require('strict-uri-encode');
var objectAssign = require('object-assign');

function encoderForArrayFormat(opts) {
	switch (opts.arrayFormat) {
		case 'index':
			return function (key, value, index) {
				return value === null ? [
					encode(key, opts),
					'[',
					index,
					']'
				].join('') : [
					encode(key, opts),
					'[',
					encode(index, opts),
					']=',
					encode(value, opts)
				].join('');
			};

		case 'bracket':
			return function (key, value) {
				return value === null ? encode(key, opts) : [
					encode(key, opts),
					'[]=',
					encode(value, opts)
				].join('');
			};

		default:
			return function (key, value) {
				return value === null ? encode(key, opts) : [
					encode(key, opts),
					'=',
					encode(value, opts)
				].join('');
			};
	}
}

function parserForArrayFormat(opts) {
	var result;

	switch (opts.arrayFormat) {
		case 'index':
			return function (key, value, accumulator) {
				result = /\[(\d*)\]$/.exec(key);

				key = key.replace(/\[\d*\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = {};
				}

				accumulator[key][result[1]] = value;
			};

		case 'bracket':
			return function (key, value, accumulator) {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				} else if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		default:
			return function (key, value, accumulator) {
				if (accumulator[key] === undefined) {
					accumulator[key] = value;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};
	}
}

function encode(value, opts) {
	if (opts.encode) {
		return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

function keysSorter(input) {
	if (Array.isArray(input)) {
		return input.sort();
	} else if (typeof input === 'object') {
		return keysSorter(Object.keys(input)).sort(function (a, b) {
			return Number(a) - Number(b);
		}).map(function (key) {
			return input[key];
		});
	}

	return input;
}

exports.extract = function (str) {
	return str.split('?')[1] || '';
};

exports.parse = function (str, opts) {
	opts = objectAssign({arrayFormat: 'none'}, opts);

	var formatter = parserForArrayFormat(opts);

	var ret = Object.create(null);

	if (typeof str !== 'string') {
		return ret;
	}

	str = str.trim().replace(/^(\?|#|&)/, '');

	if (!str) {
		return ret;
	}

	str.split('&').forEach(function (param) {
		var parts = param.replace(/\+/g, ' ').split('=');
		var key = parts.shift();
		var val = parts.length > 0 ? parts.join('=') : undefined;

		val = val === undefined ? null : decodeURIComponent(val);

		formatter(decodeURIComponent(key), val, ret);
	});

	return Object.keys(ret).sort().reduce(function (result, key) {
		var val = ret[key];
		if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
			result[key] = keysSorter(val);
		} else {
			result[key] = val;
		}

		return result;
	}, Object.create(null));
};

exports.stringify = function (obj, opts) {
	var defaults = {
		encode: true,
		strict: true,
		arrayFormat: 'none'
	};

	opts = objectAssign(defaults, opts);

	var formatter = encoderForArrayFormat(opts);

	return obj ? Object.keys(obj).sort().map(function (key) {
		var val = obj[key];

		if (val === undefined) {
			return '';
		}

		if (val === null) {
			return encode(key, opts);
		}

		if (Array.isArray(val)) {
			var result = [];

			val.slice().forEach(function (val2) {
				if (val2 === undefined) {
					return;
				}

				result.push(formatter(key, val2, result.length));
			});

			return result.join('&');
		}

		return encode(key, opts) + '=' + encode(val, opts);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&') : '';
};

},{"object-assign":71,"strict-uri-encode":76}],75:[function(require,module,exports){
(function (global){(function (){
;(function(factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports !== 'undefined') {
        module.exports = factory((typeof window !== "undefined" ? window['jQuery'] : typeof global !== "undefined" ? global['jQuery'] : null));
    } else {
        factory(jQuery);
    }

}(function($) {
    'use strict';
    var Slick = window.Slick || {};

    Slick = (function() {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this, dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
                nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function(slider, i) {
                    return $('<button type="button" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                focusOnChange: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                scrolling: false,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                swiping: false,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;


            _.registerBreakpoints();
            _.init(true);

        }

        return Slick;

    }());

    Slick.prototype.activateADA = function() {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });

    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || (index >= _.slideCount)) {
            return false;
        }

        _.unload();

        if (typeof(index) === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function(index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.animateHeight = function() {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function(targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }

        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -(_.currentLeft);
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function(now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' +
                                now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' +
                                now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function() {
                        if (callback) {
                            callback.call();
                        }
                    }
                });

            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function() {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }

            }

        }

    };

    Slick.prototype.getNavTarget = function() {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if ( asNavFor && asNavFor !== null ) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;

    };

    Slick.prototype.asNavFor = function(index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if ( asNavFor !== null && typeof asNavFor === 'object' ) {
            asNavFor.each(function() {
                var target = $(this).slick('getSlick');
                if(!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }

    };

    Slick.prototype.applyTransition = function(slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.autoPlay = function() {

        var _ = this;

        _.autoPlayClear();

        if ( _.slideCount > _.options.slidesToShow ) {
            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );
        }

    };

    Slick.prototype.autoPlayClear = function() {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }

    };

    Slick.prototype.autoPlayIterator = function() {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if ( !_.paused && !_.interrupted && !_.focussed ) {

            if ( _.options.infinite === false ) {

                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
                    _.direction = 0;
                }

                else if ( _.direction === 0 ) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if ( _.currentSlide - 1 === 0 ) {
                        _.direction = 1;
                    }

                }

            }

            _.slideHandler( slideTo );

        }

    };

    Slick.prototype.buildArrows = function() {

        var _ = this;

        if (_.options.arrows === true ) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if( _.slideCount > _.options.slidesToShow ) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow
                        .addClass('slick-disabled')
                        .attr('aria-disabled', 'true');
                }

            } else {

                _.$prevArrow.add( _.$nextArrow )

                    .addClass('slick-hidden')
                    .attr({
                        'aria-disabled': 'true',
                        'tabindex': '-1'
                    });

            }

        }

    };

    Slick.prototype.buildDots = function() {

        var _ = this,
            i, dot;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active');

        }

    };

    Slick.prototype.buildOut = function() {

        var _ = this;

        _.$slides =
            _.$slider
                .children( _.options.slide + ':not(.slick-cloned)')
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function(index, element) {
            $(element)
                .attr('data-slick-index', index)
                .data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = (_.slideCount === 0) ?
            $('<div class="slick-track"/>').appendTo(_.$slider) :
            _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap(
            '<div class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();


        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }

    };

    Slick.prototype.buildRows = function() {

        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if(_.options.rows > 0) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(
                originalSlides.length / slidesPerSection
            );

            for(a = 0; a < numOfSlides; a++){
                var slide = document.createElement('div');
                for(b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for(c = 0; c < _.options.slidesPerRow; c++) {
                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children()
                .css({
                    'width':(100 / _.options.slidesPerRow) + '%',
                    'display': 'inline-block'
                });

        }

    };

    Slick.prototype.checkResponsive = function(initial, forceUpdate) {

        var _ = this,
            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if ( _.options.responsive &&
            _.options.responsive.length &&
            _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint =
                            targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings,
                                _.breakpointSettings[
                                    targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings,
                            _.breakpointSettings[
                                targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            if( !initial && triggerBreakpoint !== false ) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }

    };

    Slick.prototype.changeSlide = function(event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset, slideOffset, unevenOffset;

        if($target.is('a')) {
            event.preventDefault();
        }

        if(!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 :
                    event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }

    };

    Slick.prototype.checkNavigable = function(index) {

        var _ = this,
            navigables, prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function() {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots)
                .off('click.slick', _.changeSlide)
                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));

            if (_.options.accessibility === true) {
                _.$dots.off('keydown.slick', _.keyHandler);
            }
        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);
                _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);
            }
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);

    };

    Slick.prototype.cleanUpSlideEvents = function() {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));

    };

    Slick.prototype.cleanUpRows = function() {

        var _ = this, originalSlides;

        if(_.options.rows > 0) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }

    };

    Slick.prototype.clickHandler = function(event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }

    };

    Slick.prototype.destroy = function(refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }

        if ( _.$prevArrow && _.$prevArrow.length ) {

            _.$prevArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display','');

            if ( _.htmlExpr.test( _.options.prevArrow )) {
                _.$prevArrow.remove();
            }
        }

        if ( _.$nextArrow && _.$nextArrow.length ) {

            _.$nextArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display','');

            if ( _.htmlExpr.test( _.options.nextArrow )) {
                _.$nextArrow.remove();
            }
        }


        if (_.$slides) {

            _.$slides
                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                .removeAttr('aria-hidden')
                .removeAttr('data-slick-index')
                .each(function(){
                    $(this).attr('style', $(this).data('originalStyling'));
                });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if(!refresh) {
            _.$slider.trigger('destroy', [_]);
        }

    };

    Slick.prototype.disableTransition = function(slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.fadeSlide = function(slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function() {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }

        }

    };

    Slick.prototype.fadeSlideOut = function(slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });

        }

    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.focusHandler = function() {

        var _ = this;

        _.$slider
            .off('focus.slick blur.slick')
            .on('focus.slick blur.slick', '*', function(event) {

            event.stopImmediatePropagation();
            var $sf = $(this);

            setTimeout(function() {

                if( _.options.pauseOnFocus ) {
                    _.focussed = $sf.is(':focus');
                    _.autoPlay();
                }

            }, 0);

        });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {

        var _ = this;
        return _.currentSlide;

    };

    Slick.prototype.getDotCount = function() {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            if (_.slideCount <= _.options.slidesToShow) {
                 ++pagerQty;
            } else {
                while (breakPoint < _.slideCount) {
                    ++pagerQty;
                    breakPoint = counter + _.options.slidesToScroll;
                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                }
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if(!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        }else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;

    };

    Slick.prototype.getLeft = function(slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide,
            coef;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                coef = -1

                if (_.options.vertical === true && _.options.centerMode === true) {
                    if (_.options.slidesToShow === 2) {
                        coef = -1.5;
                    } else if (_.options.slidesToShow === 1) {
                        coef = -2
                    }
                }
                verticalOffset = (verticalHeight * _.options.slidesToShow) * coef;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                    } else {
                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
            _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);
        } else if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
        } else {
            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft =  0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft =  0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;

    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {

        var _ = this;

        return _.options[option];

    };

    Slick.prototype.getNavigableIndexes = function() {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;

    };

    Slick.prototype.getSlick = function() {

        return this;

    };

    Slick.prototype.getSlideCount = function() {

        var _ = this,
            slidesTraversed, swipedSlide, centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function(index, slide) {
                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;

        } else {
            return _.options.slidesToScroll;
        }

    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);

    };

    Slick.prototype.init = function(creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();

        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if ( _.options.autoplay ) {

            _.paused = false;
            _.autoPlay();

        }

    };

    Slick.prototype.initADA = function() {
        var _ = this,
                numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
                tabControlIndexes = _.getNavigableIndexes().filter(function(val) {
                    return (val >= 0) && (val < _.slideCount);
                });

        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        if (_.$dots !== null) {
            _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
                var slideControlIndex = tabControlIndexes.indexOf(i);

                $(this).attr({
                    'role': 'tabpanel',
                    'id': 'slick-slide' + _.instanceUid + i,
                    'tabindex': -1
                });

                if (slideControlIndex !== -1) {
                   var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex
                   if ($('#' + ariaButtonControl).length) {
                     $(this).attr({
                         'aria-describedby': ariaButtonControl
                     });
                   }
                }
            });

            _.$dots.attr('role', 'tablist').find('li').each(function(i) {
                var mappedSlideIndex = tabControlIndexes[i];

                $(this).attr({
                    'role': 'presentation'
                });

                $(this).find('button').first().attr({
                    'role': 'tab',
                    'id': 'slick-slide-control' + _.instanceUid + i,
                    'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,
                    'aria-label': (i + 1) + ' of ' + numDotGroups,
                    'aria-selected': null,
                    'tabindex': '-1'
                });

            }).eq(_.currentSlide).find('button').attr({
                'aria-selected': 'true',
                'tabindex': '0'
            }).end();
        }

        for (var i=_.currentSlide, max=i+_.options.slidesToShow; i < max; i++) {
          if (_.options.focusOnChange) {
            _.$slides.eq(i).attr({'tabindex': '0'});
          } else {
            _.$slides.eq(i).removeAttr('tabindex');
          }
        }

        _.activateADA();

    };

    Slick.prototype.initArrowEvents = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow
               .off('click.slick')
               .on('click.slick', {
                    message: 'previous'
               }, _.changeSlide);
            _.$nextArrow
               .off('click.slick')
               .on('click.slick', {
                    message: 'next'
               }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow.on('keydown.slick', _.keyHandler);
                _.$nextArrow.on('keydown.slick', _.keyHandler);
            }
        }

    };

    Slick.prototype.initDotEvents = function() {

        var _ = this;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$dots.on('keydown.slick', _.keyHandler);
            }
        }

        if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {

            $('li', _.$dots)
                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initSlideEvents = function() {

        var _ = this;

        if ( _.options.pauseOnHover ) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initializeEvents = function() {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(_.setPosition);

    };

    Slick.prototype.initUI = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();

        }

    };

    Slick.prototype.keyHandler = function(event) {

        var _ = this;
        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' :  'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }

    };

    Slick.prototype.lazyLoad = function() {

        var _ = this,
            loadRange, cloneRange, rangeStart, rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function() {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageSrcSet = $(this).attr('data-srcset'),
                    imageSizes  = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function() {

                    image
                        .animate({ opacity: 0 }, 100, function() {

                            if (imageSrcSet) {
                                image
                                    .attr('srcset', imageSrcSet );

                                if (imageSizes) {
                                    image
                                        .attr('sizes', imageSizes );
                                }
                            }

                            image
                                .attr('src', imageSource)
                                .animate({ opacity: 1 }, 200, function() {
                                    image
                                        .removeAttr('data-lazy data-srcset data-sizes')
                                        .removeClass('slick-loading');
                                });
                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                        });

                };

                imageToLoad.onerror = function() {

                    image
                        .removeAttr( 'data-lazy' )
                        .removeClass( 'slick-loading' )
                        .addClass( 'slick-lazyload-error' );

                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                };

                imageToLoad.src = imageSource;

            });

        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);

        if (_.options.lazyLoad === 'anticipated') {
            var prevSlide = rangeStart - 1,
                nextSlide = rangeEnd,
                $slides = _.$slider.find('.slick-slide');

            for (var i = 0; i < _.options.slidesToScroll; i++) {
                if (prevSlide < 0) prevSlide = _.slideCount - 1;
                loadRange = loadRange.add($slides.eq(prevSlide));
                loadRange = loadRange.add($slides.eq(nextSlide));
                prevSlide--;
                nextSlide++;
            }
        }

        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else
        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }

    };

    Slick.prototype.loadSlider = function() {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }

    };

    Slick.prototype.next = Slick.prototype.slickNext = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });

    };

    Slick.prototype.orientationChange = function() {

        var _ = this;

        _.checkResponsive();
        _.setPosition();

    };

    Slick.prototype.pause = Slick.prototype.slickPause = function() {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;

    };

    Slick.prototype.play = Slick.prototype.slickPlay = function() {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;

    };

    Slick.prototype.postSlide = function(index) {

        var _ = this;

        if( !_.unslicked ) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            if (_.slideCount > _.options.slidesToShow) {
                _.setPosition();
            }

            _.swipeLeft = null;

            if ( _.options.autoplay ) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();

                if (_.options.focusOnChange) {
                    var $currentSlide = $(_.$slides.get(_.currentSlide));
                    $currentSlide.attr('tabindex', 0).focus();
                }
            }

        }

    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });

    };

    Slick.prototype.preventDefault = function(event) {

        event.preventDefault();

    };

    Slick.prototype.progressiveLazyLoad = function( tryCount ) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),
            image,
            imageSource,
            imageSrcSet,
            imageSizes,
            imageToLoad;

        if ( $imgsToLoad.length ) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageSrcSet = image.attr('data-srcset');
            imageSizes  = image.attr('data-sizes') || _.$slider.attr('data-sizes');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function() {

                if (imageSrcSet) {
                    image
                        .attr('srcset', imageSrcSet );

                    if (imageSizes) {
                        image
                            .attr('sizes', imageSizes );
                    }
                }

                image
                    .attr( 'src', imageSource )
                    .removeAttr('data-lazy data-srcset data-sizes')
                    .removeClass('slick-loading');

                if ( _.options.adaptiveHeight === true ) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);
                _.progressiveLazyLoad();

            };

            imageToLoad.onerror = function() {

                if ( tryCount < 3 ) {

                    setTimeout( function() {
                        _.progressiveLazyLoad( tryCount + 1 );
                    }, 500 );

                } else {

                    image
                        .removeAttr( 'data-lazy' )
                        .removeClass( 'slick-loading' )
                        .addClass( 'slick-lazyload-error' );

                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                    _.progressiveLazyLoad();

                }

            };

            imageToLoad.src = imageSource;

        } else {

            _.$slider.trigger('allImagesLoaded', [ _ ]);

        }

    };

    Slick.prototype.refresh = function( initializing ) {

        var _ = this, currentSlide, lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
            _.currentSlide = lastVisibleIndex;
        }

        if ( _.slideCount <= _.options.slidesToShow ) {
            _.currentSlide = 0;

        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if( !initializing ) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);

        }

    };

    Slick.prototype.registerBreakpoints = function() {

        var _ = this, breakpoint, currentBreakpoint, l,
            responsiveSettings = _.options.responsive || null;

        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {

            _.respondTo = _.options.respondTo || 'window';

            for ( breakpoint in responsiveSettings ) {

                l = _.breakpoints.length-1;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {
                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                    while( l >= 0 ) {
                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
                            _.breakpoints.splice(l,1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;

                }

            }

            _.breakpoints.sort(function(a, b) {
                return ( _.options.mobileFirst ) ? a-b : b-a;
            });

        }

    };

    Slick.prototype.reinit = function() {

        var _ = this;

        _.$slides =
            _.$slideTrack
                .children(_.options.slide)
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);

    };

    Slick.prototype.resize = function() {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function() {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if( !_.unslicked ) { _.setPosition(); }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.setCSS = function(position) {

        var _ = this,
            positionProps = {},
            x, y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }

    };

    Slick.prototype.setDimensions = function() {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: ('0px ' + _.options.centerPadding)
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: (_.options.centerPadding + ' 0px')
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();


        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));

        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);

    };

    Slick.prototype.setFade = function() {

        var _ = this,
            targetLeft;

        _.$slides.each(function(index, element) {
            targetLeft = (_.slideWidth * index) * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });

    };

    Slick.prototype.setHeight = function() {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }

    };

    Slick.prototype.setOption =
    Slick.prototype.slickSetOption = function() {


        var _ = this, l, item, option, value, refresh = false, type;

        if( $.type( arguments[0] ) === 'object' ) {

            option =  arguments[0];
            refresh = arguments[1];
            type = 'multiple';

        } else if ( $.type( arguments[0] ) === 'string' ) {

            option =  arguments[0];
            value = arguments[1];
            refresh = arguments[2];

            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {

                type = 'responsive';

            } else if ( typeof arguments[1] !== 'undefined' ) {

                type = 'single';

            }

        }

        if ( type === 'single' ) {

            _.options[option] = value;


        } else if ( type === 'multiple' ) {

            $.each( option , function( opt, val ) {

                _.options[opt] = val;

            });


        } else if ( type === 'responsive' ) {

            for ( item in value ) {

                if( $.type( _.options.responsive ) !== 'array' ) {

                    _.options.responsive = [ value[item] ];

                } else {

                    l = _.options.responsive.length-1;

                    while( l >= 0 ) {

                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {

                            _.options.responsive.splice(l,1);

                        }

                        l--;

                    }

                    _.options.responsive.push( value[item] );

                }

            }

        }

        if ( refresh ) {

            _.unload();
            _.reinit();

        }

    };

    Slick.prototype.setPosition = function() {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);

    };

    Slick.prototype.setProps = function() {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined ||
            bodyStyle.MozTransition !== undefined ||
            bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if ( _.options.fade ) {
            if ( typeof _.options.zIndex === 'number' ) {
                if( _.options.zIndex < 3 ) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
    };


    Slick.prototype.setSlideClasses = function(index) {

        var _ = this,
            centerOffset, allSlides, indexOffset, remainder;

        allSlides = _.$slider
            .find('.slick-slide')
            .removeClass('slick-active slick-center slick-current')
            .attr('aria-hidden', 'true');

        _.$slides
            .eq(index)
            .addClass('slick-current');

        if (_.options.centerMode === true) {

            var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {
                    _.$slides
                        .slice(index - centerOffset + evenCoef, index + centerOffset + 1)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides
                        .slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

                if (index === 0) {

                    allSlides
                        .eq(allSlides.length - 1 - _.options.slidesToShow)
                        .addClass('slick-center');

                } else if (index === _.slideCount - 1) {

                    allSlides
                        .eq(_.options.slidesToShow)
                        .addClass('slick-center');

                }

            }

            _.$slides
                .eq(index)
                .addClass('slick-center');

        } else {

            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {

                _.$slides
                    .slice(index, index + _.options.slidesToShow)
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {

                    allSlides
                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    allSlides
                        .slice(indexOffset, indexOffset + _.options.slidesToShow)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

            }

        }

        if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
            _.lazyLoad();
        }
    };

    Slick.prototype.setupInfinite = function() {

        var _ = this,
            i, slideIndex, infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > (_.slideCount -
                        infiniteCount); i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex - _.slideCount)
                        .prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount  + _.slideCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex + _.slideCount)
                        .appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
                    $(this).attr('id', '');
                });

            }

        }

    };

    Slick.prototype.interrupt = function( toggle ) {

        var _ = this;

        if( !toggle ) {
            _.autoPlay();
        }
        _.interrupted = toggle;

    };

    Slick.prototype.selectHandler = function(event) {

        var _ = this;

        var targetElement =
            $(event.target).is('.slick-slide') ?
                $(event.target) :
                $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.slideHandler(index, false, true);
            return;

        }

        _.slideHandler(index);

    };

    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {

        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
            _ = this, navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if ( _.options.autoplay ) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if ( _.options.asNavFor ) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {
                navTarget.setSlideClasses(_.currentSlide);
            }

        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function() {
                    _.postSlide(animSlide);
                });

            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
            _.animateSlide(targetLeft, function() {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }

    };

    Slick.prototype.startLoad = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();

        }

        _.$slider.addClass('slick-loading');

    };

    Slick.prototype.swipeDirection = function() {

        var xDist, yDist, r, swipeAngle, _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
            return (_.options.rtl === false ? 'right' : 'left');
        }
        if (_.options.verticalSwiping === true) {
            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';

    };

    Slick.prototype.swipeEnd = function(event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.swiping = false;

        if (_.scrolling) {
            _.scrolling = false;
            return false;
        }

        _.interrupted = false;
        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;

        if ( _.touchObject.curX === undefined ) {
            return false;
        }

        if ( _.touchObject.edgeHit === true ) {
            _.$slider.trigger('edge', [_, _.swipeDirection() ]);
        }

        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {

            direction = _.swipeDirection();

            switch ( direction ) {

                case 'left':
                case 'down':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :
                            _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :
                            _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:


            }

            if( direction != 'vertical' ) {

                _.slideHandler( slideCount );
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction ]);

            }

        } else {

            if ( _.touchObject.startX !== _.touchObject.curX ) {

                _.slideHandler( _.currentSlide );
                _.touchObject = {};

            }

        }

    };

    Slick.prototype.swipeHandler = function(event) {

        var _ = this;

        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
            event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options
            .touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options
                .touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }

    };

    Slick.prototype.swipeMove = function(event) {

        var _ = this,
            edgeWasHit = false,
            curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        verticalSwipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));

        if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
            _.scrolling = true;
            return false;
        }

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = verticalSwipeLength;
        }

        swipeDirection = _.swipeDirection();

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            _.swiping = true;
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }


        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);

    };

    Slick.prototype.swipeStart = function(event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;

    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.unload = function() {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides
            .removeClass('slick-slide slick-active slick-visible slick-current')
            .attr('aria-hidden', 'true')
            .css('width', '');

    };

    Slick.prototype.unslick = function(fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();

    };

    Slick.prototype.updateArrows = function() {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if ( _.options.arrows === true &&
            _.slideCount > _.options.slidesToShow &&
            !_.options.infinite ) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            }

        }

    };

    Slick.prototype.updateDots = function() {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots
                .find('li')
                    .removeClass('slick-active')
                    .end();

            _.$dots
                .find('li')
                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                .addClass('slick-active');

        }

    };

    Slick.prototype.visibility = function() {

        var _ = this;

        if ( _.options.autoplay ) {

            if ( document[_.hidden] ) {

                _.interrupted = true;

            } else {

                _.interrupted = false;

            }

        }

    };

    $.fn.slick = function() {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == 'object' || typeof opt == 'undefined')
                _[i].slick = new Slick(_[i], opt);
            else
                ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };

}));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],76:[function(require,module,exports){
'use strict';
module.exports = function (str) {
	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	});
};

},{}],77:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;


exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":72,"timers":77}]},{},[5]);
